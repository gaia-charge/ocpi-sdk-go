// Package ocpi_v221 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ocpi_v221

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ActiveChargingProfileResultResult.
const (
	ActiveChargingProfileResultResultACCEPTED ActiveChargingProfileResultResult = "ACCEPTED"
	ActiveChargingProfileResultResultREJECTED ActiveChargingProfileResultResult = "REJECTED"
	ActiveChargingProfileResultResultUNKNOWN  ActiveChargingProfileResultResult = "UNKNOWN"
)

// Defines values for AuthorizationAllowed.
const (
	AuthorizationAllowedALLOWED    AuthorizationAllowed = "ALLOWED"
	AuthorizationAllowedBLOCKED    AuthorizationAllowed = "BLOCKED"
	AuthorizationAllowedEXPIRED    AuthorizationAllowed = "EXPIRED"
	AuthorizationAllowedNOCREDIT   AuthorizationAllowed = "NO_CREDIT"
	AuthorizationAllowedNOTALLOWED AuthorizationAllowed = "NOT_ALLOWED"
)

// Defines values for CdrBodyAuthMethod.
const (
	CdrBodyAuthMethodAUTHREQUEST CdrBodyAuthMethod = "AUTH_REQUEST"
	CdrBodyAuthMethodCOMMAND     CdrBodyAuthMethod = "COMMAND"
	CdrBodyAuthMethodWHITELIST   CdrBodyAuthMethod = "WHITELIST"
)

// Defines values for CdrBodyCdrLocationConnectorFormat.
const (
	CdrBodyCdrLocationConnectorFormatCABLE  CdrBodyCdrLocationConnectorFormat = "CABLE"
	CdrBodyCdrLocationConnectorFormatSOCKET CdrBodyCdrLocationConnectorFormat = "SOCKET"
)

// Defines values for CdrBodyCdrLocationConnectorPowerType.
const (
	CdrBodyCdrLocationConnectorPowerTypeAC1PHASE      CdrBodyCdrLocationConnectorPowerType = "AC_1_PHASE"
	CdrBodyCdrLocationConnectorPowerTypeAC2PHASE      CdrBodyCdrLocationConnectorPowerType = "AC_2_PHASE"
	CdrBodyCdrLocationConnectorPowerTypeAC2PHASESPLIT CdrBodyCdrLocationConnectorPowerType = "AC_2_PHASE_SPLIT"
	CdrBodyCdrLocationConnectorPowerTypeAC3PHASE      CdrBodyCdrLocationConnectorPowerType = "AC_3_PHASE"
	CdrBodyCdrLocationConnectorPowerTypeDC            CdrBodyCdrLocationConnectorPowerType = "DC"
)

// Defines values for CdrBodyCdrLocationConnectorStandard.
const (
	CdrBodyCdrLocationConnectorStandardCHADEMO            CdrBodyCdrLocationConnectorStandard = "CHADEMO"
	CdrBodyCdrLocationConnectorStandardCHAOJI             CdrBodyCdrLocationConnectorStandard = "CHAOJI"
	CdrBodyCdrLocationConnectorStandardDOMESTICA          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_A"
	CdrBodyCdrLocationConnectorStandardDOMESTICB          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_B"
	CdrBodyCdrLocationConnectorStandardDOMESTICC          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_C"
	CdrBodyCdrLocationConnectorStandardDOMESTICD          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_D"
	CdrBodyCdrLocationConnectorStandardDOMESTICE          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_E"
	CdrBodyCdrLocationConnectorStandardDOMESTICF          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_F"
	CdrBodyCdrLocationConnectorStandardDOMESTICG          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_G"
	CdrBodyCdrLocationConnectorStandardDOMESTICH          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_H"
	CdrBodyCdrLocationConnectorStandardDOMESTICJ          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_J"
	CdrBodyCdrLocationConnectorStandardDOMESTICK          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_K"
	CdrBodyCdrLocationConnectorStandardDOMESTICL          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_L"
	CdrBodyCdrLocationConnectorStandardDOMESTICM          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_M"
	CdrBodyCdrLocationConnectorStandardDOMESTICN          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_N"
	CdrBodyCdrLocationConnectorStandardDOMESTICO          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_O"
	CdrBodyCdrLocationConnectorStandardGBTAC              CdrBodyCdrLocationConnectorStandard = "GBT_AC"
	CdrBodyCdrLocationConnectorStandardGBTDC              CdrBodyCdrLocationConnectorStandard = "GBT_DC"
	CdrBodyCdrLocationConnectorStandardIEC603092Single16  CdrBodyCdrLocationConnectorStandard = "IEC_60309_2_single_16"
	CdrBodyCdrLocationConnectorStandardIEC603092Three16   CdrBodyCdrLocationConnectorStandard = "IEC_60309_2_three_16"
	CdrBodyCdrLocationConnectorStandardIEC603092Three32   CdrBodyCdrLocationConnectorStandard = "IEC_60309_2_three_32"
	CdrBodyCdrLocationConnectorStandardIEC603092Three64   CdrBodyCdrLocationConnectorStandard = "IEC_60309_2_three_64"
	CdrBodyCdrLocationConnectorStandardIEC62196T1         CdrBodyCdrLocationConnectorStandard = "IEC_62196_T1"
	CdrBodyCdrLocationConnectorStandardIEC62196T1COMBO    CdrBodyCdrLocationConnectorStandard = "IEC_62196_T1_COMBO"
	CdrBodyCdrLocationConnectorStandardIEC62196T2         CdrBodyCdrLocationConnectorStandard = "IEC_62196_T2"
	CdrBodyCdrLocationConnectorStandardIEC62196T2COMBO    CdrBodyCdrLocationConnectorStandard = "IEC_62196_T2_COMBO"
	CdrBodyCdrLocationConnectorStandardIEC62196T3A        CdrBodyCdrLocationConnectorStandard = "IEC_62196_T3A"
	CdrBodyCdrLocationConnectorStandardIEC62196T3C        CdrBodyCdrLocationConnectorStandard = "IEC_62196_T3C"
	CdrBodyCdrLocationConnectorStandardNEMA1030           CdrBodyCdrLocationConnectorStandard = "NEMA_10_30"
	CdrBodyCdrLocationConnectorStandardNEMA1050           CdrBodyCdrLocationConnectorStandard = "NEMA_10_50"
	CdrBodyCdrLocationConnectorStandardNEMA1430           CdrBodyCdrLocationConnectorStandard = "NEMA_14_30"
	CdrBodyCdrLocationConnectorStandardNEMA1450           CdrBodyCdrLocationConnectorStandard = "NEMA_14_50"
	CdrBodyCdrLocationConnectorStandardNEMA520            CdrBodyCdrLocationConnectorStandard = "NEMA_5_20"
	CdrBodyCdrLocationConnectorStandardNEMA630            CdrBodyCdrLocationConnectorStandard = "NEMA_6_30"
	CdrBodyCdrLocationConnectorStandardNEMA650            CdrBodyCdrLocationConnectorStandard = "NEMA_6_50"
	CdrBodyCdrLocationConnectorStandardPANTOGRAPHBOTTOMUP CdrBodyCdrLocationConnectorStandard = "PANTOGRAPH_BOTTOM_UP"
	CdrBodyCdrLocationConnectorStandardPANTOGRAPHTOPDOWN  CdrBodyCdrLocationConnectorStandard = "PANTOGRAPH_TOP_DOWN"
	CdrBodyCdrLocationConnectorStandardTESLAR             CdrBodyCdrLocationConnectorStandard = "TESLA_R"
	CdrBodyCdrLocationConnectorStandardTESLAS             CdrBodyCdrLocationConnectorStandard = "TESLA_S"
)

// Defines values for CdrBodyCdrTokenType.
const (
	CdrBodyCdrTokenTypeADHOCUSER CdrBodyCdrTokenType = "AD_HOC_USER"
	CdrBodyCdrTokenTypeAPPUSER   CdrBodyCdrTokenType = "APP_USER"
	CdrBodyCdrTokenTypeOTHER     CdrBodyCdrTokenType = "OTHER"
	CdrBodyCdrTokenTypeRFID      CdrBodyCdrTokenType = "RFID"
)

// Defines values for CdrBodyChargingPeriodsDimensionsType.
const (
	CdrBodyChargingPeriodsDimensionsTypeCURRENT         CdrBodyChargingPeriodsDimensionsType = "CURRENT"
	CdrBodyChargingPeriodsDimensionsTypeENERGY          CdrBodyChargingPeriodsDimensionsType = "ENERGY"
	CdrBodyChargingPeriodsDimensionsTypeENERGYEXPORT    CdrBodyChargingPeriodsDimensionsType = "ENERGY_EXPORT"
	CdrBodyChargingPeriodsDimensionsTypeENERGYIMPORT    CdrBodyChargingPeriodsDimensionsType = "ENERGY_IMPORT"
	CdrBodyChargingPeriodsDimensionsTypeMAXCURRENT      CdrBodyChargingPeriodsDimensionsType = "MAX_CURRENT"
	CdrBodyChargingPeriodsDimensionsTypeMAXPOWER        CdrBodyChargingPeriodsDimensionsType = "MAX_POWER"
	CdrBodyChargingPeriodsDimensionsTypeMINCURRENT      CdrBodyChargingPeriodsDimensionsType = "MIN_CURRENT"
	CdrBodyChargingPeriodsDimensionsTypeMINPOWER        CdrBodyChargingPeriodsDimensionsType = "MIN_POWER"
	CdrBodyChargingPeriodsDimensionsTypePARKINGTIME     CdrBodyChargingPeriodsDimensionsType = "PARKING_TIME"
	CdrBodyChargingPeriodsDimensionsTypePOWER           CdrBodyChargingPeriodsDimensionsType = "POWER"
	CdrBodyChargingPeriodsDimensionsTypeRESERVATIONTIME CdrBodyChargingPeriodsDimensionsType = "RESERVATION_TIME"
	CdrBodyChargingPeriodsDimensionsTypeSTATEOFCHARGE   CdrBodyChargingPeriodsDimensionsType = "STATE_OF_CHARGE"
	CdrBodyChargingPeriodsDimensionsTypeTIME            CdrBodyChargingPeriodsDimensionsType = "TIME"
)

// Defines values for CdrBodyTariffsType.
const (
	CdrBodyTariffsTypeADHOCPAYMENT CdrBodyTariffsType = "AD_HOC_PAYMENT"
	CdrBodyTariffsTypePROFILECHEAP CdrBodyTariffsType = "PROFILE_CHEAP"
	CdrBodyTariffsTypePROFILEFAST  CdrBodyTariffsType = "PROFILE_FAST"
	CdrBodyTariffsTypePROFILEGREEN CdrBodyTariffsType = "PROFILE_GREEN"
	CdrBodyTariffsTypeREGULAR      CdrBodyTariffsType = "REGULAR"
)

// Defines values for CdrBodyTariffsElementsPriceComponents.
const (
	CdrBodyTariffsElementsPriceComponentsENERGY      CdrBodyTariffsElementsPriceComponents = "ENERGY"
	CdrBodyTariffsElementsPriceComponentsFLAT        CdrBodyTariffsElementsPriceComponents = "FLAT"
	CdrBodyTariffsElementsPriceComponentsPARKINGTIME CdrBodyTariffsElementsPriceComponents = "PARKING_TIME"
	CdrBodyTariffsElementsPriceComponentsTIME        CdrBodyTariffsElementsPriceComponents = "TIME"
)

// Defines values for CdrBodyTariffsElementsRestrictionsDayOfWeek.
const (
	CdrBodyTariffsElementsRestrictionsDayOfWeekFRIDAY    CdrBodyTariffsElementsRestrictionsDayOfWeek = "FRIDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekMONDAY    CdrBodyTariffsElementsRestrictionsDayOfWeek = "MONDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekSATURDAY  CdrBodyTariffsElementsRestrictionsDayOfWeek = "SATURDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekSUNDAY    CdrBodyTariffsElementsRestrictionsDayOfWeek = "SUNDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekTHURSDAY  CdrBodyTariffsElementsRestrictionsDayOfWeek = "THURSDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekTUESDAY   CdrBodyTariffsElementsRestrictionsDayOfWeek = "TUESDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekWEDNESDAY CdrBodyTariffsElementsRestrictionsDayOfWeek = "WEDNESDAY"
)

// Defines values for CdrBodyTariffsElementsRestrictionsReservation.
const (
	CdrBodyTariffsElementsRestrictionsReservationRESERVATION        CdrBodyTariffsElementsRestrictionsReservation = "RESERVATION"
	CdrBodyTariffsElementsRestrictionsReservationRESERVATIONEXPIRES CdrBodyTariffsElementsRestrictionsReservation = "RESERVATION_EXPIRES"
)

// Defines values for CdrBodyTariffsEnergyMixEnergySourcesSource.
const (
	COAL          CdrBodyTariffsEnergyMixEnergySourcesSource = "COAL"
	GAS           CdrBodyTariffsEnergyMixEnergySourcesSource = "GAS"
	GENERALFOSSIL CdrBodyTariffsEnergyMixEnergySourcesSource = "GENERAL_FOSSIL"
	GENERALGREEN  CdrBodyTariffsEnergyMixEnergySourcesSource = "GENERAL_GREEN"
	NUCLEAR       CdrBodyTariffsEnergyMixEnergySourcesSource = "NUCLEAR"
	SOLAR         CdrBodyTariffsEnergyMixEnergySourcesSource = "SOLAR"
	WATER         CdrBodyTariffsEnergyMixEnergySourcesSource = "WATER"
	WIND          CdrBodyTariffsEnergyMixEnergySourcesSource = "WIND"
)

// Defines values for CdrBodyTariffsEnergyMixEnvironImpactCategory.
const (
	CdrBodyTariffsEnergyMixEnvironImpactCategoryCARBONDIOXIDE CdrBodyTariffsEnergyMixEnvironImpactCategory = "CARBON_DIOXIDE"
	CdrBodyTariffsEnergyMixEnvironImpactCategoryNUCLEARWASTE  CdrBodyTariffsEnergyMixEnvironImpactCategory = "NUCLEAR_WASTE"
)

// Defines values for ChargingPreferencesProfileType.
const (
	ChargingPreferencesProfileTypeCHEAP   ChargingPreferencesProfileType = "CHEAP"
	ChargingPreferencesProfileTypeFAST    ChargingPreferencesProfileType = "FAST"
	ChargingPreferencesProfileTypeGREEN   ChargingPreferencesProfileType = "GREEN"
	ChargingPreferencesProfileTypeREGULAR ChargingPreferencesProfileType = "REGULAR"
)

// Defines values for ChargingPreferencesResponseChargingPreferences.
const (
	ChargingPreferencesResponseChargingPreferencesACCEPTED                ChargingPreferencesResponseChargingPreferences = "ACCEPTED"
	ChargingPreferencesResponseChargingPreferencesDEPARTUREREQUIRED       ChargingPreferencesResponseChargingPreferences = "DEPARTURE_REQUIRED"
	ChargingPreferencesResponseChargingPreferencesENERGYNEEDREQUIRED      ChargingPreferencesResponseChargingPreferences = "ENERGY_NEED_REQUIRED"
	ChargingPreferencesResponseChargingPreferencesNOTPOSSIBLE             ChargingPreferencesResponseChargingPreferences = "NOT_POSSIBLE"
	ChargingPreferencesResponseChargingPreferencesPROFILETYPENOTSUPPORTED ChargingPreferencesResponseChargingPreferences = "PROFILE_TYPE_NOT_SUPPORTED"
)

// Defines values for ChargingProfileChargingRateUnit.
const (
	A ChargingProfileChargingRateUnit = "A"
	W ChargingProfileChargingRateUnit = "W"
)

// Defines values for ChargingProfileResponseType.
const (
	ChargingProfileResponseTypeACCEPTED       ChargingProfileResponseType = "ACCEPTED"
	ChargingProfileResponseTypeNOTSUPPORTED   ChargingProfileResponseType = "NOT_SUPPORTED"
	ChargingProfileResponseTypeREJECTED       ChargingProfileResponseType = "REJECTED"
	ChargingProfileResponseTypeTOOOFTEN       ChargingProfileResponseType = "TOO_OFTEN"
	ChargingProfileResponseTypeUNKNOWNSESSION ChargingProfileResponseType = "UNKNOWN_SESSION"
)

// Defines values for ChargingProfileResultResult.
const (
	ChargingProfileResultResultACCEPTED ChargingProfileResultResult = "ACCEPTED"
	ChargingProfileResultResultREJECTED ChargingProfileResultResult = "REJECTED"
	ChargingProfileResultResultUNKNOWN  ChargingProfileResultResult = "UNKNOWN"
)

// Defines values for ClearProfileResultResult.
const (
	ClearProfileResultResultACCEPTED ClearProfileResultResult = "ACCEPTED"
	ClearProfileResultResultREJECTED ClearProfileResultResult = "REJECTED"
	ClearProfileResultResultUNKNOWN  ClearProfileResultResult = "UNKNOWN"
)

// Defines values for ClientInfoRole.
const (
	ClientInfoRoleCPO   ClientInfoRole = "CPO"
	ClientInfoRoleEMSP  ClientInfoRole = "EMSP"
	ClientInfoRoleHUB   ClientInfoRole = "HUB"
	ClientInfoRoleNAP   ClientInfoRole = "NAP"
	ClientInfoRoleNSP   ClientInfoRole = "NSP"
	ClientInfoRoleOTHER ClientInfoRole = "OTHER"
	ClientInfoRoleSCSP  ClientInfoRole = "SCSP"
)

// Defines values for ClientInfoStatus.
const (
	ClientInfoStatusCONNECTED ClientInfoStatus = "CONNECTED"
	ClientInfoStatusOFFLINE   ClientInfoStatus = "OFFLINE"
	ClientInfoStatusPLANNED   ClientInfoStatus = "PLANNED"
	ClientInfoStatusSUSPENDED ClientInfoStatus = "SUSPENDED"
)

// Defines values for CommandResponseResult.
const (
	CommandResponseResultACCEPTED       CommandResponseResult = "ACCEPTED"
	CommandResponseResultNOTSUPPORTED   CommandResponseResult = "NOT_SUPPORTED"
	CommandResponseResultREJECTED       CommandResponseResult = "REJECTED"
	CommandResponseResultUNKNOWNSESSION CommandResponseResult = "UNKNOWN_SESSION"
)

// Defines values for CommandResultResult.
const (
	ACCEPTED            CommandResultResult = "ACCEPTED"
	CANCELEDRESERVATION CommandResultResult = "CANCELED_RESERVATION"
	EVSEINOPERATIVE     CommandResultResult = "EVSE_INOPERATIVE"
	EVSEOCCUPIED        CommandResultResult = "EVSE_OCCUPIED"
	FAILED              CommandResultResult = "FAILED"
	NOTSUPPORTED        CommandResultResult = "NOT_SUPPORTED"
	REJECTED            CommandResultResult = "REJECTED"
	TIMEOUT             CommandResultResult = "TIMEOUT"
	UNKNOWNRESERVATION  CommandResultResult = "UNKNOWN_RESERVATION"
)

// Defines values for ConnectorFormat.
const (
	ConnectorFormatCABLE  ConnectorFormat = "CABLE"
	ConnectorFormatSOCKET ConnectorFormat = "SOCKET"
)

// Defines values for ConnectorPowerType.
const (
	ConnectorPowerTypeAC1PHASE      ConnectorPowerType = "AC_1_PHASE"
	ConnectorPowerTypeAC2PHASE      ConnectorPowerType = "AC_2_PHASE"
	ConnectorPowerTypeAC2PHASESPLIT ConnectorPowerType = "AC_2_PHASE_SPLIT"
	ConnectorPowerTypeAC3PHASE      ConnectorPowerType = "AC_3_PHASE"
	ConnectorPowerTypeDC            ConnectorPowerType = "DC"
)

// Defines values for ConnectorStandard.
const (
	ConnectorStandardCHADEMO            ConnectorStandard = "CHADEMO"
	ConnectorStandardCHAOJI             ConnectorStandard = "CHAOJI"
	ConnectorStandardDOMESTICA          ConnectorStandard = "DOMESTIC_A"
	ConnectorStandardDOMESTICB          ConnectorStandard = "DOMESTIC_B"
	ConnectorStandardDOMESTICC          ConnectorStandard = "DOMESTIC_C"
	ConnectorStandardDOMESTICD          ConnectorStandard = "DOMESTIC_D"
	ConnectorStandardDOMESTICE          ConnectorStandard = "DOMESTIC_E"
	ConnectorStandardDOMESTICF          ConnectorStandard = "DOMESTIC_F"
	ConnectorStandardDOMESTICG          ConnectorStandard = "DOMESTIC_G"
	ConnectorStandardDOMESTICH          ConnectorStandard = "DOMESTIC_H"
	ConnectorStandardDOMESTICJ          ConnectorStandard = "DOMESTIC_J"
	ConnectorStandardDOMESTICK          ConnectorStandard = "DOMESTIC_K"
	ConnectorStandardDOMESTICL          ConnectorStandard = "DOMESTIC_L"
	ConnectorStandardDOMESTICM          ConnectorStandard = "DOMESTIC_M"
	ConnectorStandardDOMESTICN          ConnectorStandard = "DOMESTIC_N"
	ConnectorStandardDOMESTICO          ConnectorStandard = "DOMESTIC_O"
	ConnectorStandardGBTAC              ConnectorStandard = "GBT_AC"
	ConnectorStandardGBTDC              ConnectorStandard = "GBT_DC"
	ConnectorStandardIEC603092Single16  ConnectorStandard = "IEC_60309_2_single_16"
	ConnectorStandardIEC603092Three16   ConnectorStandard = "IEC_60309_2_three_16"
	ConnectorStandardIEC603092Three32   ConnectorStandard = "IEC_60309_2_three_32"
	ConnectorStandardIEC603092Three64   ConnectorStandard = "IEC_60309_2_three_64"
	ConnectorStandardIEC62196T1         ConnectorStandard = "IEC_62196_T1"
	ConnectorStandardIEC62196T1COMBO    ConnectorStandard = "IEC_62196_T1_COMBO"
	ConnectorStandardIEC62196T2         ConnectorStandard = "IEC_62196_T2"
	ConnectorStandardIEC62196T2COMBO    ConnectorStandard = "IEC_62196_T2_COMBO"
	ConnectorStandardIEC62196T3A        ConnectorStandard = "IEC_62196_T3A"
	ConnectorStandardIEC62196T3C        ConnectorStandard = "IEC_62196_T3C"
	ConnectorStandardNEMA1030           ConnectorStandard = "NEMA_10_30"
	ConnectorStandardNEMA1050           ConnectorStandard = "NEMA_10_50"
	ConnectorStandardNEMA1430           ConnectorStandard = "NEMA_14_30"
	ConnectorStandardNEMA1450           ConnectorStandard = "NEMA_14_50"
	ConnectorStandardNEMA520            ConnectorStandard = "NEMA_5_20"
	ConnectorStandardNEMA630            ConnectorStandard = "NEMA_6_30"
	ConnectorStandardNEMA650            ConnectorStandard = "NEMA_6_50"
	ConnectorStandardPANTOGRAPHBOTTOMUP ConnectorStandard = "PANTOGRAPH_BOTTOM_UP"
	ConnectorStandardPANTOGRAPHTOPDOWN  ConnectorStandard = "PANTOGRAPH_TOP_DOWN"
	ConnectorStandardTESLAR             ConnectorStandard = "TESLA_R"
	ConnectorStandardTESLAS             ConnectorStandard = "TESLA_S"
)

// Defines values for CredentialsDataRolesRole.
const (
	CredentialsDataRolesRoleCPO   CredentialsDataRolesRole = "CPO"
	CredentialsDataRolesRoleEMSP  CredentialsDataRolesRole = "EMSP"
	CredentialsDataRolesRoleHUB   CredentialsDataRolesRole = "HUB"
	CredentialsDataRolesRoleNAP   CredentialsDataRolesRole = "NAP"
	CredentialsDataRolesRoleNSP   CredentialsDataRolesRole = "NSP"
	CredentialsDataRolesRoleOTHER CredentialsDataRolesRole = "OTHER"
	CredentialsDataRolesRoleSCSP  CredentialsDataRolesRole = "SCSP"
)

// Defines values for CredentialsDataRolesBusinessDetailsLogoCategory.
const (
	CredentialsDataRolesBusinessDetailsLogoCategoryCHARGER  CredentialsDataRolesBusinessDetailsLogoCategory = "CHARGER"
	CredentialsDataRolesBusinessDetailsLogoCategoryENTRANCE CredentialsDataRolesBusinessDetailsLogoCategory = "ENTRANCE"
	CredentialsDataRolesBusinessDetailsLogoCategoryLOCATION CredentialsDataRolesBusinessDetailsLogoCategory = "LOCATION"
	CredentialsDataRolesBusinessDetailsLogoCategoryNETWORK  CredentialsDataRolesBusinessDetailsLogoCategory = "NETWORK"
	CredentialsDataRolesBusinessDetailsLogoCategoryOPERATOR CredentialsDataRolesBusinessDetailsLogoCategory = "OPERATOR"
	CredentialsDataRolesBusinessDetailsLogoCategoryOTHER    CredentialsDataRolesBusinessDetailsLogoCategory = "OTHER"
	CredentialsDataRolesBusinessDetailsLogoCategoryOWNER    CredentialsDataRolesBusinessDetailsLogoCategory = "OWNER"
)

// Defines values for DetailsDataVersion.
const (
	DetailsDataVersionN20  DetailsDataVersion = "2.0"
	DetailsDataVersionN21  DetailsDataVersion = "2.1"
	DetailsDataVersionN211 DetailsDataVersion = "2.1.1"
	DetailsDataVersionN22  DetailsDataVersion = "2.2"
	DetailsDataVersionN221 DetailsDataVersion = "2.2.1"
)

// Defines values for EnvironmentalImpactCategoryType.
const (
	EnvironmentalImpactCategoryTypeCARBONDIOXIDE EnvironmentalImpactCategoryType = "CARBON_DIOXIDE"
	EnvironmentalImpactCategoryTypeNUCLEARWASTE  EnvironmentalImpactCategoryType = "NUCLEAR_WASTE"
)

// Defines values for EvseCapabilities.
const (
	CHARGINGPREFERENCESCAPABLE    EvseCapabilities = "CHARGING_PREFERENCES_CAPABLE"
	CHARGINGPROFILECAPABLE        EvseCapabilities = "CHARGING_PROFILE_CAPABLE"
	CHIPCARDSUPPORT               EvseCapabilities = "CHIP_CARD_SUPPORT"
	CONTACTLESSCARDSUPPORT        EvseCapabilities = "CONTACTLESS_CARD_SUPPORT"
	CREDITCARDPAYABLE             EvseCapabilities = "CREDIT_CARD_PAYABLE"
	DEBITCARDPAYABLE              EvseCapabilities = "DEBIT_CARD_PAYABLE"
	PEDTERMINAL                   EvseCapabilities = "PED_TERMINAL"
	REMOTESTARTSTOPCAPABLE        EvseCapabilities = "REMOTE_START_STOP_CAPABLE"
	RESERVABLE                    EvseCapabilities = "RESERVABLE"
	RFIDREADER                    EvseCapabilities = "RFID_READER"
	STARTSESSIONCONNECTORREQUIRED EvseCapabilities = "START_SESSION_CONNECTOR_REQUIRED"
	TOKENGROUPCAPABLE             EvseCapabilities = "TOKEN_GROUP_CAPABLE"
	UNLOCKCAPABLE                 EvseCapabilities = "UNLOCK_CAPABLE"
)

// Defines values for EvseParkingRestrictions.
const (
	CUSTOMERS   EvseParkingRestrictions = "CUSTOMERS"
	DISABLED    EvseParkingRestrictions = "DISABLED"
	EVONLY      EvseParkingRestrictions = "EV_ONLY"
	MOTORCYCLES EvseParkingRestrictions = "MOTORCYCLES"
	PLUGGED     EvseParkingRestrictions = "PLUGGED"
)

// Defines values for EvseStatus.
const (
	EvseStatusAVAILABLE   EvseStatus = "AVAILABLE"
	EvseStatusBLOCKED     EvseStatus = "BLOCKED"
	EvseStatusCHARGING    EvseStatus = "CHARGING"
	EvseStatusINOPERATIVE EvseStatus = "INOPERATIVE"
	EvseStatusOUTOFORDER  EvseStatus = "OUTOFORDER"
	EvseStatusPLANNED     EvseStatus = "PLANNED"
	EvseStatusREMOVED     EvseStatus = "REMOVED"
	EvseStatusRESERVED    EvseStatus = "RESERVED"
	EvseStatusUNKNOWN     EvseStatus = "UNKNOWN"
)

// Defines values for EvseStatusScheduleStatus.
const (
	EvseStatusScheduleStatusAVAILABLE   EvseStatusScheduleStatus = "AVAILABLE"
	EvseStatusScheduleStatusBLOCKED     EvseStatusScheduleStatus = "BLOCKED"
	EvseStatusScheduleStatusCHARGING    EvseStatusScheduleStatus = "CHARGING"
	EvseStatusScheduleStatusINOPERATIVE EvseStatusScheduleStatus = "INOPERATIVE"
	EvseStatusScheduleStatusOUTOFORDER  EvseStatusScheduleStatus = "OUTOFORDER"
	EvseStatusScheduleStatusPLANNED     EvseStatusScheduleStatus = "PLANNED"
	EvseStatusScheduleStatusREMOVED     EvseStatusScheduleStatus = "REMOVED"
	EvseStatusScheduleStatusRESERVED    EvseStatusScheduleStatus = "RESERVED"
	EvseStatusScheduleStatusUNKNOWN     EvseStatusScheduleStatus = "UNKNOWN"
)

// Defines values for ImageCategory.
const (
	ImageCategoryCHARGER  ImageCategory = "CHARGER"
	ImageCategoryENTRANCE ImageCategory = "ENTRANCE"
	ImageCategoryLOCATION ImageCategory = "LOCATION"
	ImageCategoryNETWORK  ImageCategory = "NETWORK"
	ImageCategoryOPERATOR ImageCategory = "OPERATOR"
	ImageCategoryOTHER    ImageCategory = "OTHER"
	ImageCategoryOWNER    ImageCategory = "OWNER"
)

// Defines values for InterfaceRoleType.
const (
	RECEIVER InterfaceRoleType = "RECEIVER"
	SENDER   InterfaceRoleType = "SENDER"
)

// Defines values for LocationsDataFacilities.
const (
	LocationsDataFacilitiesAIRPORT        LocationsDataFacilities = "AIRPORT"
	LocationsDataFacilitiesBIKESHARING    LocationsDataFacilities = "BIKE_SHARING"
	LocationsDataFacilitiesBUSSTOP        LocationsDataFacilities = "BUS_STOP"
	LocationsDataFacilitiesCAFE           LocationsDataFacilities = "CAFE"
	LocationsDataFacilitiesCARPOOLPARKING LocationsDataFacilities = "CARPOOL_PARKING"
	LocationsDataFacilitiesFUELSTATION    LocationsDataFacilities = "FUEL_STATION"
	LocationsDataFacilitiesHOTEL          LocationsDataFacilities = "HOTEL"
	LocationsDataFacilitiesMALL           LocationsDataFacilities = "MALL"
	LocationsDataFacilitiesMETROSTATION   LocationsDataFacilities = "METRO_STATION"
	LocationsDataFacilitiesMUSEUM         LocationsDataFacilities = "MUSEUM"
	LocationsDataFacilitiesNATURE         LocationsDataFacilities = "NATURE"
	LocationsDataFacilitiesPARKINGLOT     LocationsDataFacilities = "PARKING_LOT"
	LocationsDataFacilitiesRECREATIONAREA LocationsDataFacilities = "RECREATION_AREA"
	LocationsDataFacilitiesRESTAURANT     LocationsDataFacilities = "RESTAURANT"
	LocationsDataFacilitiesSPORT          LocationsDataFacilities = "SPORT"
	LocationsDataFacilitiesSUPERMARKET    LocationsDataFacilities = "SUPERMARKET"
	LocationsDataFacilitiesTAXISTAND      LocationsDataFacilities = "TAXI_STAND"
	LocationsDataFacilitiesTRAINSTATION   LocationsDataFacilities = "TRAIN_STATION"
	LocationsDataFacilitiesTRAMSTOP       LocationsDataFacilities = "TRAM_STOP"
	LocationsDataFacilitiesWIFI           LocationsDataFacilities = "WIFI"
)

// Defines values for LocationsDataParkingType.
const (
	LocationsDataParkingTypeALONGMOTORWAY     LocationsDataParkingType = "ALONG_MOTORWAY"
	LocationsDataParkingTypeONDRIVEWAY        LocationsDataParkingType = "ON_DRIVEWAY"
	LocationsDataParkingTypeONSTREET          LocationsDataParkingType = "ON_STREET"
	LocationsDataParkingTypePARKINGGARAGE     LocationsDataParkingType = "PARKING_GARAGE"
	LocationsDataParkingTypePARKINGLOT        LocationsDataParkingType = "PARKING_LOT"
	LocationsDataParkingTypeUNDERGROUNDGARAGE LocationsDataParkingType = "UNDERGROUND_GARAGE"
)

// Defines values for LocationsDataPublishAllowedToType.
const (
	LocationsDataPublishAllowedToTypeADHOCUSER LocationsDataPublishAllowedToType = "AD_HOC_USER"
	LocationsDataPublishAllowedToTypeAPPUSER   LocationsDataPublishAllowedToType = "APP_USER"
	LocationsDataPublishAllowedToTypeOTHER     LocationsDataPublishAllowedToType = "OTHER"
	LocationsDataPublishAllowedToTypeRFID      LocationsDataPublishAllowedToType = "RFID"
)

// Defines values for ModuleIDType.
const (
	ModuleIDTypeCdrs             ModuleIDType = "cdrs"
	ModuleIDTypeChargingprofiles ModuleIDType = "chargingprofiles"
	ModuleIDTypeCommands         ModuleIDType = "commands"
	ModuleIDTypeCredentials      ModuleIDType = "credentials"
	ModuleIDTypeHubclientinfo    ModuleIDType = "hubclientinfo"
	ModuleIDTypeLocations        ModuleIDType = "locations"
	ModuleIDTypeSessions         ModuleIDType = "sessions"
	ModuleIDTypeTariffs          ModuleIDType = "tariffs"
	ModuleIDTypeTokens           ModuleIDType = "tokens"
)

// Defines values for ReservationRestrictionType.
const (
	ReservationRestrictionTypeRESERVATION        ReservationRestrictionType = "RESERVATION"
	ReservationRestrictionTypeRESERVATIONEXPIRES ReservationRestrictionType = "RESERVATION_EXPIRES"
)

// Defines values for SessionAuthMethod.
const (
	SessionAuthMethodAUTHREQUEST SessionAuthMethod = "AUTH_REQUEST"
	SessionAuthMethodCOMMAND     SessionAuthMethod = "COMMAND"
	SessionAuthMethodWHITELIST   SessionAuthMethod = "WHITELIST"
)

// Defines values for SessionStatus.
const (
	ACTIVE      SessionStatus = "ACTIVE"
	COMPLETED   SessionStatus = "COMPLETED"
	INVALID     SessionStatus = "INVALID"
	PENDING     SessionStatus = "PENDING"
	RESERVATION SessionStatus = "RESERVATION"
)

// Defines values for SessionChargingPeriodsDimensionsType.
const (
	AUTHREQUEST SessionChargingPeriodsDimensionsType = "AUTH_REQUEST"
	COMMAND     SessionChargingPeriodsDimensionsType = "COMMAND"
	WHITELIST   SessionChargingPeriodsDimensionsType = "WHITELIST"
)

// Defines values for TariffType.
const (
	TariffTypeADHOCPAYMENT TariffType = "AD_HOC_PAYMENT"
	TariffTypePROFILECHEAP TariffType = "PROFILE_CHEAP"
	TariffTypePROFILEFAST  TariffType = "PROFILE_FAST"
	TariffTypePROFILEGREEN TariffType = "PROFILE_GREEN"
	TariffTypeREGULAR      TariffType = "REGULAR"
)

// Defines values for TariffElementsPriceComponents.
const (
	ENERGY      TariffElementsPriceComponents = "ENERGY"
	FLAT        TariffElementsPriceComponents = "FLAT"
	PARKINGTIME TariffElementsPriceComponents = "PARKING_TIME"
	TIME        TariffElementsPriceComponents = "TIME"
)

// Defines values for TariffElementsRestrictionsDayOfWeek.
const (
	TariffElementsRestrictionsDayOfWeekFRIDAY    TariffElementsRestrictionsDayOfWeek = "FRIDAY"
	TariffElementsRestrictionsDayOfWeekMONDAY    TariffElementsRestrictionsDayOfWeek = "MONDAY"
	TariffElementsRestrictionsDayOfWeekSATURDAY  TariffElementsRestrictionsDayOfWeek = "SATURDAY"
	TariffElementsRestrictionsDayOfWeekSUNDAY    TariffElementsRestrictionsDayOfWeek = "SUNDAY"
	TariffElementsRestrictionsDayOfWeekTHURSDAY  TariffElementsRestrictionsDayOfWeek = "THURSDAY"
	TariffElementsRestrictionsDayOfWeekTUESDAY   TariffElementsRestrictionsDayOfWeek = "TUESDAY"
	TariffElementsRestrictionsDayOfWeekWEDNESDAY TariffElementsRestrictionsDayOfWeek = "WEDNESDAY"
)

// Defines values for TokenDefaultProfileType.
const (
	TokenDefaultProfileTypeCHEAP   TokenDefaultProfileType = "CHEAP"
	TokenDefaultProfileTypeFAST    TokenDefaultProfileType = "FAST"
	TokenDefaultProfileTypeGREEN   TokenDefaultProfileType = "GREEN"
	TokenDefaultProfileTypeREGULAR TokenDefaultProfileType = "REGULAR"
)

// Defines values for TokenType.
const (
	TokenTypeADHOCUSER TokenType = "AD_HOC_USER"
	TokenTypeAPPUSER   TokenType = "APP_USER"
	TokenTypeOTHER     TokenType = "OTHER"
	TokenTypeRFID      TokenType = "RFID"
)

// Defines values for TokenWhitelist.
const (
	ALLOWED        TokenWhitelist = "ALLOWED"
	ALLOWEDOFFLINE TokenWhitelist = "ALLOWED_OFFLINE"
	ALWAYS         TokenWhitelist = "ALWAYS"
	NEVER          TokenWhitelist = "NEVER"
)

// Defines values for VersionsDataVersion.
const (
	VersionsDataVersionN20  VersionsDataVersion = "2.0"
	VersionsDataVersionN21  VersionsDataVersion = "2.1"
	VersionsDataVersionN211 VersionsDataVersion = "2.1.1"
	VersionsDataVersionN22  VersionsDataVersion = "2.2"
	VersionsDataVersionN221 VersionsDataVersion = "2.2.1"
)

// Defines values for PostOcpiCommandsCommandParamsCommand.
const (
	PostOcpiCommandsCommandParamsCommandCANCELRESERVATION PostOcpiCommandsCommandParamsCommand = "CANCEL_RESERVATION"
	PostOcpiCommandsCommandParamsCommandRESERVENOW        PostOcpiCommandsCommandParamsCommand = "RESERVE_NOW"
	PostOcpiCommandsCommandParamsCommandSTARTSESSION      PostOcpiCommandsCommandParamsCommand = "START_SESSION"
	PostOcpiCommandsCommandParamsCommandSTOPSESSION       PostOcpiCommandsCommandParamsCommand = "STOP_SESSION"
	PostOcpiCommandsCommandParamsCommandUNLOCKCONNECTOR   PostOcpiCommandsCommandParamsCommand = "UNLOCK_CONNECTOR"
)

// Defines values for PostOcpiCommandsCommandUidParamsCommand.
const (
	PostOcpiCommandsCommandUidParamsCommandCANCELRESERVATION PostOcpiCommandsCommandUidParamsCommand = "CANCEL_RESERVATION"
	PostOcpiCommandsCommandUidParamsCommandRESERVENOW        PostOcpiCommandsCommandUidParamsCommand = "RESERVE_NOW"
	PostOcpiCommandsCommandUidParamsCommandSTARTSESSION      PostOcpiCommandsCommandUidParamsCommand = "START_SESSION"
	PostOcpiCommandsCommandUidParamsCommandSTOPSESSION       PostOcpiCommandsCommandUidParamsCommand = "STOP_SESSION"
	PostOcpiCommandsCommandUidParamsCommandUNLOCKCONNECTOR   PostOcpiCommandsCommandUidParamsCommand = "UNLOCK_CONNECTOR"
)

// Defines values for GetOcpiTokensCountryCodePartyIdTokenUidParamsType.
const (
	GetOcpiTokensCountryCodePartyIdTokenUidParamsTypeADHOCUSER GetOcpiTokensCountryCodePartyIdTokenUidParamsType = "AD_HOC_USER"
	GetOcpiTokensCountryCodePartyIdTokenUidParamsTypeAPPUSER   GetOcpiTokensCountryCodePartyIdTokenUidParamsType = "APP_USER"
	GetOcpiTokensCountryCodePartyIdTokenUidParamsTypeOTHER     GetOcpiTokensCountryCodePartyIdTokenUidParamsType = "OTHER"
	GetOcpiTokensCountryCodePartyIdTokenUidParamsTypeRFID      GetOcpiTokensCountryCodePartyIdTokenUidParamsType = "RFID"
)

// Defines values for PatchOcpiTokensCountryCodePartyIdTokenUidParamsType.
const (
	PatchOcpiTokensCountryCodePartyIdTokenUidParamsTypeADHOCUSER PatchOcpiTokensCountryCodePartyIdTokenUidParamsType = "AD_HOC_USER"
	PatchOcpiTokensCountryCodePartyIdTokenUidParamsTypeAPPUSER   PatchOcpiTokensCountryCodePartyIdTokenUidParamsType = "APP_USER"
	PatchOcpiTokensCountryCodePartyIdTokenUidParamsTypeOTHER     PatchOcpiTokensCountryCodePartyIdTokenUidParamsType = "OTHER"
	PatchOcpiTokensCountryCodePartyIdTokenUidParamsTypeRFID      PatchOcpiTokensCountryCodePartyIdTokenUidParamsType = "RFID"
)

// Defines values for PutOcpiTokensCountryCodePartyIdTokenUidParamsType.
const (
	PutOcpiTokensCountryCodePartyIdTokenUidParamsTypeADHOCUSER PutOcpiTokensCountryCodePartyIdTokenUidParamsType = "AD_HOC_USER"
	PutOcpiTokensCountryCodePartyIdTokenUidParamsTypeAPPUSER   PutOcpiTokensCountryCodePartyIdTokenUidParamsType = "APP_USER"
	PutOcpiTokensCountryCodePartyIdTokenUidParamsTypeOTHER     PutOcpiTokensCountryCodePartyIdTokenUidParamsType = "OTHER"
	PutOcpiTokensCountryCodePartyIdTokenUidParamsTypeRFID      PutOcpiTokensCountryCodePartyIdTokenUidParamsType = "RFID"
)

// Defines values for PostOcpiTokenUidAuthorizeParamsType.
const (
	ADHOCUSER PostOcpiTokenUidAuthorizeParamsType = "AD_HOC_USER"
	APPUSER   PostOcpiTokenUidAuthorizeParamsType = "APP_USER"
	OTHER     PostOcpiTokenUidAuthorizeParamsType = "OTHER"
	RFID      PostOcpiTokenUidAuthorizeParamsType = "RFID"
)

// OcpiChargingprofilePostRequest defines model for _ocpi_chargingprofile_post_request.
type OcpiChargingprofilePostRequest struct {
	union json.RawMessage
}

// OcpiCommandsCommandPostRequest defines model for _ocpi_commands__command__post_request.
type OcpiCommandsCommandPostRequest struct {
	union json.RawMessage
}

// OcpiLocationsLocationIdGet200Response defines model for _ocpi_locations__location_id__get_200_response.
type OcpiLocationsLocationIdGet200Response struct {
	union json.RawMessage
}

// ActiveChargingProfile defines model for activeChargingProfile.
type ActiveChargingProfile struct {
	ChargingProfile ChargingProfile `json:"charging_profile"`
	StartDateTime   string          `json:"start_date_time"`
}

// ActiveChargingProfileResult defines model for activeChargingProfileResult.
type ActiveChargingProfileResult struct {
	Profile *ActiveChargingProfileResultProfile `json:"profile,omitempty"`
	Result  ActiveChargingProfileResultResult   `json:"result"`
}

// ActiveChargingProfileResultResult defines model for ActiveChargingProfileResult.Result.
type ActiveChargingProfileResultResult string

// ActiveChargingProfileResultProfile defines model for activeChargingProfileResult_profile.
type ActiveChargingProfileResultProfile struct {
	ChargingProfile ChargingProfile `json:"charging_profile"`
	StartDateTime   string          `json:"start_date_time"`
}

// Authorization Changed name of the object from official docs due to colliding naming of info property
type Authorization struct {
	Allowed                AuthorizationAllowed    `json:"allowed"`
	AuthorizationReference *string                 `json:"authorization_reference,omitempty"`
	Info                   *CommandResponseMessage `json:"info,omitempty"`
	Location               *LocationReferences     `json:"location,omitempty"`
	Token                  Token                   `json:"token"`
}

// AuthorizationAllowed defines model for Authorization.Allowed.
type AuthorizationAllowed string

// BusinessDetails defines model for businessDetails.
type BusinessDetails struct {
	Logo    *CredentialsDataRolesBusinessDetailsLogo `json:"logo,omitempty"`
	Name    string                                   `json:"name"`
	Website *string                                  `json:"website,omitempty"`
}

// CancelReservation defines model for cancelReservation.
type CancelReservation struct {
	ReservationId string `json:"reservation_id"`
	ResponseUrl   string `json:"response_url"`
}

// CdrBody defines model for cdrBody.
type CdrBody struct {
	AuthMethod               CdrBodyAuthMethod       `json:"auth_method"`
	AuthorizationReference   *string                 `json:"authorization_reference,omitempty"`
	CdrLocation              CdrBodyCdrLocation      `json:"cdr_location"`
	CdrToken                 CdrBodyCdrToken         `json:"cdr_token"`
	ChargingPeriods          *CdrBodyChargingPeriods `json:"charging_periods,omitempty"`
	CountryCode              string                  `json:"country_code"`
	Credit                   *bool                   `json:"credit,omitempty"`
	CreditReferenceId        *string                 `json:"credit_reference_id,omitempty"`
	Currency                 string                  `json:"currency"`
	EndDateTime              string                  `json:"end_date_time"`
	HomeChargingCompensation *bool                   `json:"home_charging_compensation,omitempty"`
	Id                       string                  `json:"id"`
	InvoiceReferenceId       *string                 `json:"invoice_reference_id,omitempty"`
	LastUpdated              string                  `json:"last_updated"`
	MeterId                  *string                 `json:"meter_id,omitempty"`
	PartyId                  string                  `json:"party_id"`
	Remark                   *string                 `json:"remark,omitempty"`
	SessionId                *string                 `json:"session_id,omitempty"`
	SignedData               *CdrBodySignedData      `json:"signed_data,omitempty"`
	StartDateTime            string                  `json:"start_date_time"`
	Tariffs                  *CdrBodyTariffs         `json:"tariffs,omitempty"`
	TotalCost                Price                   `json:"total_cost"`
	TotalEnergy              float32                 `json:"total_energy"`
	TotalEnergyCost          *Price                  `json:"total_energy_cost,omitempty"`
	TotalFixedCost           *Price                  `json:"total_fixed_cost,omitempty"`
	TotalParkingCost         *Price                  `json:"total_parking_cost,omitempty"`
	TotalParkingTime         *float32                `json:"total_parking_time,omitempty"`
	TotalReservationCost     *Price                  `json:"total_reservation_cost,omitempty"`
	TotalTime                float32                 `json:"total_time"`
	TotalTimeCost            *Price                  `json:"total_time_cost,omitempty"`
}

// CdrBodyAuthMethod defines model for CdrBody.AuthMethod.
type CdrBodyAuthMethod string

// CdrBodyCdrLocation defines model for cdrBody_cdr_location.
type CdrBodyCdrLocation struct {
	Address            *string                               `json:"address,omitempty"`
	City               *string                               `json:"city,omitempty"`
	ConnectorFormat    *CdrBodyCdrLocationConnectorFormat    `json:"connector_format,omitempty"`
	ConnectorId        *string                               `json:"connector_id,omitempty"`
	ConnectorPowerType *CdrBodyCdrLocationConnectorPowerType `json:"connector_power_type,omitempty"`
	ConnectorStandard  *CdrBodyCdrLocationConnectorStandard  `json:"connector_standard,omitempty"`
	Coordinates        *CdrBodyCdrLocationCoordinates        `json:"coordinates,omitempty"`
	Country            *string                               `json:"country,omitempty"`
	EvseId             *string                               `json:"evse_id,omitempty"`
	EvseUid            *string                               `json:"evse_uid,omitempty"`
	Id                 *string                               `json:"id,omitempty"`
	Name               *string                               `json:"name,omitempty"`
	PostalCode         *string                               `json:"postal_code,omitempty"`
	State              *string                               `json:"state,omitempty"`
}

// CdrBodyCdrLocationConnectorFormat defines model for CdrBodyCdrLocation.ConnectorFormat.
type CdrBodyCdrLocationConnectorFormat string

// CdrBodyCdrLocationConnectorPowerType defines model for CdrBodyCdrLocation.ConnectorPowerType.
type CdrBodyCdrLocationConnectorPowerType string

// CdrBodyCdrLocationConnectorStandard defines model for CdrBodyCdrLocation.ConnectorStandard.
type CdrBodyCdrLocationConnectorStandard string

// CdrBodyCdrLocationCoordinates defines model for cdrBody_cdr_location_coordinates.
type CdrBodyCdrLocationCoordinates struct {
	Latitude  string `json:"latitude"`
	Longitude string `json:"longitude"`
}

// CdrBodyCdrToken defines model for cdrBody_cdr_token.
type CdrBodyCdrToken struct {
	ContractId  string              `json:"contract_id"`
	CountryCode string              `json:"country_code"`
	PartyId     string              `json:"party_id"`
	Type        CdrBodyCdrTokenType `json:"type"`
	Uid         string              `json:"uid"`
}

// CdrBodyCdrTokenType defines model for CdrBodyCdrToken.Type.
type CdrBodyCdrTokenType string

// CdrBodyChargingPeriods defines model for cdrBody_charging_periods.
type CdrBodyChargingPeriods struct {
	Dimensions    *CdrBodyChargingPeriodsDimensions `json:"dimensions,omitempty"`
	StartDateTime string                            `json:"start_date_time"`
	TariffId      *string                           `json:"tariff_id,omitempty"`
}

// CdrBodyChargingPeriodsDimensions defines model for cdrBody_charging_periods_dimensions.
type CdrBodyChargingPeriodsDimensions struct {
	Type   CdrBodyChargingPeriodsDimensionsType `json:"type"`
	Volume float32                              `json:"volume"`
}

// CdrBodyChargingPeriodsDimensionsType defines model for CdrBodyChargingPeriodsDimensions.Type.
type CdrBodyChargingPeriodsDimensionsType string

// CdrBodySignedData defines model for cdrBody_signed_data.
type CdrBodySignedData struct {
	EncodingMethod        string                         `json:"encoding_method"`
	EncodingMethodVersion *int                           `json:"encoding_method_version,omitempty"`
	PublicKey             *string                        `json:"public_key,omitempty"`
	SignedValues          *CdrBodySignedDataSignedValues `json:"signed_values,omitempty"`
	Url                   *string                        `json:"url,omitempty"`
}

// CdrBodySignedDataSignedValues defines model for cdrBody_signed_data_signed_values.
type CdrBodySignedDataSignedValues struct {
	Nature     string `json:"nature"`
	PlainData  string `json:"plain_data"`
	SignedData string `json:"signed_data"`
}

// CdrBodyTariffs defines model for cdrBody_tariffs.
type CdrBodyTariffs struct {
	CountryCode   string                       `json:"country_code"`
	Currency      string                       `json:"currency"`
	Elements      *CdrBodyTariffsElements      `json:"elements,omitempty"`
	EndDateTime   *string                      `json:"end_date_time,omitempty"`
	EnergyMix     *CdrBodyTariffsEnergyMix     `json:"energy_mix,omitempty"`
	Id            string                       `json:"id"`
	LastUpdated   string                       `json:"last_updated"`
	MaxPrice      *Price                       `json:"max_price,omitempty"`
	MinPrice      *Price                       `json:"min_price,omitempty"`
	PartyId       string                       `json:"party_id"`
	StartDateTime *string                      `json:"start_date_time,omitempty"`
	TariffAltText *CdrBodyTariffsTariffAltText `json:"tariff_alt_text,omitempty"`
	TariffAltUrl  *string                      `json:"tariff_alt_url,omitempty"`
	Type          *CdrBodyTariffsType          `json:"type,omitempty"`
}

// CdrBodyTariffsType defines model for CdrBodyTariffs.Type.
type CdrBodyTariffsType string

// CdrBodyTariffsElements defines model for cdrBody_tariffs_elements.
type CdrBodyTariffsElements struct {
	PriceComponents *CdrBodyTariffsElementsPriceComponents `json:"price_components,omitempty"`
	Restrictions    *CdrBodyTariffsElementsRestrictions    `json:"restrictions,omitempty"`
}

// CdrBodyTariffsElementsPriceComponents defines model for CdrBodyTariffsElements.PriceComponents.
type CdrBodyTariffsElementsPriceComponents string

// CdrBodyTariffsElementsRestrictions defines model for cdrBody_tariffs_elements_restrictions.
type CdrBodyTariffsElementsRestrictions struct {
	DayOfWeek   *CdrBodyTariffsElementsRestrictionsDayOfWeek   `json:"day_of_week,omitempty"`
	EndDate     *string                                        `json:"end_date,omitempty"`
	EndTime     *string                                        `json:"end_time,omitempty"`
	MaxCurrent  *float32                                       `json:"max_current,omitempty"`
	MaxDuration *int                                           `json:"max_duration,omitempty"`
	MaxKwh      *float32                                       `json:"max_kwh,omitempty"`
	MaxPower    *float32                                       `json:"max_power,omitempty"`
	MinCurrent  *float32                                       `json:"min_current,omitempty"`
	MinDuration *int                                           `json:"min_duration,omitempty"`
	MinKwh      *float32                                       `json:"min_kwh,omitempty"`
	MinPower    *float32                                       `json:"min_power,omitempty"`
	Reservation *CdrBodyTariffsElementsRestrictionsReservation `json:"reservation,omitempty"`
	StartDate   *string                                        `json:"start_date,omitempty"`
	StartTime   *string                                        `json:"start_time,omitempty"`
}

// CdrBodyTariffsElementsRestrictionsDayOfWeek defines model for CdrBodyTariffsElementsRestrictions.DayOfWeek.
type CdrBodyTariffsElementsRestrictionsDayOfWeek string

// CdrBodyTariffsElementsRestrictionsReservation defines model for CdrBodyTariffsElementsRestrictions.Reservation.
type CdrBodyTariffsElementsRestrictionsReservation string

// CdrBodyTariffsEnergyMix defines model for cdrBody_tariffs_energy_mix.
type CdrBodyTariffsEnergyMix struct {
	EnergyProductName *string                               `json:"energy_product_name,omitempty"`
	EnergySources     *CdrBodyTariffsEnergyMixEnergySources `json:"energy_sources,omitempty"`
	EnvironImpact     *CdrBodyTariffsEnergyMixEnvironImpact `json:"environ_impact,omitempty"`
	IsGreenEnergy     bool                                  `json:"is_green_energy"`
	SupplierName      *string                               `json:"supplier_name,omitempty"`
}

// CdrBodyTariffsEnergyMixEnergySources defines model for cdrBody_tariffs_energy_mix_energy_sources.
type CdrBodyTariffsEnergyMixEnergySources struct {
	Percentage float32                                    `json:"percentage"`
	Source     CdrBodyTariffsEnergyMixEnergySourcesSource `json:"source"`
}

// CdrBodyTariffsEnergyMixEnergySourcesSource defines model for CdrBodyTariffsEnergyMixEnergySources.Source.
type CdrBodyTariffsEnergyMixEnergySourcesSource string

// CdrBodyTariffsEnergyMixEnvironImpact defines model for cdrBody_tariffs_energy_mix_environ_impact.
type CdrBodyTariffsEnergyMixEnvironImpact struct {
	Amount   float32                                      `json:"amount"`
	Category CdrBodyTariffsEnergyMixEnvironImpactCategory `json:"category"`
}

// CdrBodyTariffsEnergyMixEnvironImpactCategory defines model for CdrBodyTariffsEnergyMixEnvironImpact.Category.
type CdrBodyTariffsEnergyMixEnvironImpactCategory string

// CdrBodyTariffsTariffAltText defines model for cdrBody_tariffs_tariff_alt_text.
type CdrBodyTariffsTariffAltText struct {
	Language string `json:"language"`
	Text     string `json:"text"`
}

// CdrResponse defines model for cdrResponse.
type CdrResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
	Url           string  `json:"url"`
}

// CdrsResponse defines model for cdrsResponse.
type CdrsResponse struct {
	Cdrs          *CdrBody `json:"cdrs,omitempty"`
	StatusCode    float32  `json:"status_code"`
	StatusMessage *string  `json:"status_message,omitempty"`
	TimeStamp     *string  `json:"timeStamp,omitempty"`
}

// ChargingPreferences defines model for chargingPreferences.
type ChargingPreferences struct {
	DepartureTime *string                        `json:"departure_time,omitempty"`
	EnergyNeed    *float32                       `json:"energy_need,omitempty"`
	ProfileType   ChargingPreferencesProfileType `json:"profile_type"`
}

// ChargingPreferencesProfileType defines model for ChargingPreferences.ProfileType.
type ChargingPreferencesProfileType string

// ChargingPreferencesResponse defines model for chargingPreferencesResponse.
type ChargingPreferencesResponse struct {
	ChargingPreferences ChargingPreferencesResponseChargingPreferences `json:"charging_preferences"`
	StatusCode          float32                                        `json:"status_code"`
	StatusMessage       *string                                        `json:"status_message,omitempty"`
	TimeStamp           *string                                        `json:"timeStamp,omitempty"`
}

// ChargingPreferencesResponseChargingPreferences defines model for ChargingPreferencesResponse.ChargingPreferences.
type ChargingPreferencesResponseChargingPreferences string

// ChargingProfile defines model for chargingProfile.
type ChargingProfile struct {
	ChargingProfilePeriod *ChargingProfileChargingProfilePeriod `json:"charging_profile_period,omitempty"`
	ChargingRateUnit      ChargingProfileChargingRateUnit       `json:"charging_rate_unit"`
	Duration              *int                                  `json:"duration,omitempty"`
	MinChargingRate       *float32                              `json:"min_charging_rate,omitempty"`
	StartDateTime         *string                               `json:"start_date_time,omitempty"`
}

// ChargingProfileChargingRateUnit defines model for ChargingProfile.ChargingRateUnit.
type ChargingProfileChargingRateUnit string

// ChargingProfileResponse defines model for chargingProfileResponse.
type ChargingProfileResponse struct {
	// Result Response to the ChargingProfile request from the eMSP to the CPO.
	Result  ChargingProfileResponseType `json:"result"`
	Timeout int                         `json:"timeout"`
}

// ChargingProfileResponseType Response to the ChargingProfile request from the eMSP to the CPO.
type ChargingProfileResponseType string

// ChargingProfileResult defines model for chargingProfileResult.
type ChargingProfileResult struct {
	Result ChargingProfileResultResult `json:"result"`
}

// ChargingProfileResultResult defines model for ChargingProfileResult.Result.
type ChargingProfileResultResult string

// ChargingProfileChargingProfilePeriod defines model for chargingProfile_charging_profile_period.
type ChargingProfileChargingProfilePeriod struct {
	Limit       float32 `json:"limit"`
	StartPeriod int     `json:"start_period"`
}

// ChargingProfilesResponse defines model for chargingProfilesResponse.
type ChargingProfilesResponse struct {
	ChargingProfile *ChargingProfileResponse `json:"chargingProfile,omitempty"`
	StatusCode      float32                  `json:"status_code"`
	StatusMessage   *string                  `json:"status_message,omitempty"`
	TimeStamp       *string                  `json:"timeStamp,omitempty"`
}

// ClearProfileResult defines model for clearProfileResult.
type ClearProfileResult struct {
	Result ClearProfileResultResult `json:"result"`
}

// ClearProfileResultResult defines model for ClearProfileResult.Result.
type ClearProfileResultResult string

// ClientInfo defines model for clientInfo.
type ClientInfo struct {
	CountryCode string           `json:"country_code"`
	LastUpdated string           `json:"last_updated"`
	PartyId     string           `json:"party_id"`
	Role        ClientInfoRole   `json:"role"`
	Status      ClientInfoStatus `json:"status"`
}

// ClientInfoRole defines model for ClientInfo.Role.
type ClientInfoRole string

// ClientInfoStatus defines model for ClientInfo.Status.
type ClientInfoStatus string

// ClientInfoResponse defines model for clientInfoResponse.
type ClientInfoResponse struct {
	ClientsInfo   *ClientInfo `json:"clients_info,omitempty"`
	StatusCode    float32     `json:"status_code"`
	StatusMessage *string     `json:"status_message,omitempty"`
	TimeStamp     *string     `json:"timeStamp,omitempty"`
}

// ClientsInfoResponse defines model for clientsInfoResponse.
type ClientsInfoResponse struct {
	ClientInfo    ClientInfo `json:"client_info"`
	StatusCode    float32    `json:"status_code"`
	StatusMessage *string    `json:"status_message,omitempty"`
	TimeStamp     *string    `json:"timeStamp,omitempty"`
}

// CommandResponse defines model for commandResponse.
type CommandResponse struct {
	Message *CommandResponseMessage `json:"message,omitempty"`
	Result  CommandResponseResult   `json:"result"`
	Timeout int                     `json:"timeout"`
}

// CommandResponseResult defines model for CommandResponse.Result.
type CommandResponseResult string

// CommandResponseMessage defines model for commandResponse_message.
type CommandResponseMessage struct {
	Language string `json:"language"`
	Text     string `json:"text"`
}

// CommandResult defines model for commandResult.
type CommandResult struct {
	Message *CommandResponseMessage `json:"message,omitempty"`
	Result  CommandResultResult     `json:"result"`
}

// CommandResultResult defines model for CommandResult.Result.
type CommandResultResult string

// Connector defines model for connector.
type Connector struct {
	Format             ConnectorFormat    `json:"format"`
	Id                 string             `json:"id"`
	LastUpdated        string             `json:"last_updated"`
	MaxAmperage        int                `json:"max_amperage"`
	MaxElectricPower   *int               `json:"max_electric_power,omitempty"`
	MaxVoltage         int                `json:"max_voltage"`
	PowerType          ConnectorPowerType `json:"power_type"`
	Standard           ConnectorStandard  `json:"standard"`
	TariffIds          *string            `json:"tariff_ids,omitempty"`
	TermsAndConditions *string            `json:"terms_and_conditions,omitempty"`
}

// ConnectorFormat defines model for Connector.Format.
type ConnectorFormat string

// ConnectorPowerType defines model for Connector.PowerType.
type ConnectorPowerType string

// ConnectorStandard defines model for Connector.Standard.
type ConnectorStandard string

// Credentials defines model for credentials.
type Credentials struct {
	Data          *CredentialsData `json:"data,omitempty"`
	StatusCode    float32          `json:"status_code"`
	StatusMessage *string          `json:"status_message,omitempty"`
	TimeStamp     *string          `json:"timeStamp,omitempty"`
}

// CredentialsData defines model for credentials_data.
type CredentialsData struct {
	Roles *CredentialsDataRoles `json:"roles,omitempty"`
	Token string                `json:"token"`
	Url   string                `json:"url"`
}

// CredentialsDataRoles defines model for credentials_data_roles.
type CredentialsDataRoles struct {
	BusinessDetails CredentialsDataRolesBusinessDetails `json:"business_details"`
	CountryCode     string                              `json:"country_code"`
	PartyId         string                              `json:"party_id"`
	Role            CredentialsDataRolesRole            `json:"role"`
}

// CredentialsDataRolesRole defines model for CredentialsDataRoles.Role.
type CredentialsDataRolesRole string

// CredentialsDataRolesBusinessDetails defines model for credentials_data_roles_business_details.
type CredentialsDataRolesBusinessDetails struct {
	Logo    *CredentialsDataRolesBusinessDetailsLogo `json:"logo,omitempty"`
	Name    string                                   `json:"name"`
	Website *string                                  `json:"website,omitempty"`
}

// CredentialsDataRolesBusinessDetailsLogo defines model for credentials_data_roles_business_details_logo.
type CredentialsDataRolesBusinessDetailsLogo struct {
	Category  CredentialsDataRolesBusinessDetailsLogoCategory `json:"category"`
	Height    *float32                                        `json:"height,omitempty"`
	Thumbnail *string                                         `json:"thumbnail,omitempty"`
	Type      string                                          `json:"type"`
	Url       string                                          `json:"url"`
	Width     *float32                                        `json:"width,omitempty"`
}

// CredentialsDataRolesBusinessDetailsLogoCategory defines model for CredentialsDataRolesBusinessDetailsLogo.Category.
type CredentialsDataRolesBusinessDetailsLogoCategory string

// Details defines model for details.
type Details struct {
	Data          *DetailsData `json:"data,omitempty"`
	StatusCode    float32      `json:"status_code"`
	StatusMessage *string      `json:"status_message,omitempty"`
	TimeStamp     *string      `json:"timeStamp,omitempty"`
}

// DetailsData defines model for details_data.
type DetailsData struct {
	Endpoints *DetailsDataEndpoints `json:"endpoints,omitempty"`
	Version   DetailsDataVersion    `json:"version"`
}

// DetailsDataVersion defines model for DetailsData.Version.
type DetailsDataVersion string

// DetailsDataEndpoints defines model for details_data_endpoints.
type DetailsDataEndpoints struct {
	// Identifier OCPI 2.2.1 modules
	Identifier ModuleIDType `json:"identifier"`

	// Role Interface role endpoint implements.
	Role InterfaceRoleType `json:"role"`

	// Url URL to the endpoint.
	Url string `json:"url"`
}

// EnvironmentalImpactCategoryType Categories of environmental impact values
type EnvironmentalImpactCategoryType string

// Evse defines model for evse.
type Evse struct {
	Capabilities        *EvseCapabilities              `json:"capabilities,omitempty"`
	Connectors          *Connector                     `json:"connectors,omitempty"`
	Coordinates         *CdrBodyCdrLocationCoordinates `json:"coordinates,omitempty"`
	Directions          *CdrBodyTariffsTariffAltText   `json:"directions,omitempty"`
	EvseId              *string                        `json:"evse_id,omitempty"`
	FloorLevel          *string                        `json:"floor_level,omitempty"`
	Images              *Image                         `json:"images,omitempty"`
	LastUpdated         string                         `json:"last_updated"`
	ParkingRestrictions *EvseParkingRestrictions       `json:"parking_restrictions,omitempty"`
	PhysicalReference   *string                        `json:"physical_reference,omitempty"`
	Status              EvseStatus                     `json:"status"`
	StatusSchedule      *EvseStatusSchedule            `json:"status_schedule,omitempty"`
	Uid                 string                         `json:"uid"`
}

// EvseCapabilities defines model for Evse.Capabilities.
type EvseCapabilities string

// EvseParkingRestrictions defines model for Evse.ParkingRestrictions.
type EvseParkingRestrictions string

// EvseStatus defines model for Evse.Status.
type EvseStatus string

// EvseStatusSchedule defines model for evse_status_schedule.
type EvseStatusSchedule struct {
	PeriodBegin string                   `json:"period_begin"`
	PeriodEnd   *string                  `json:"period_end,omitempty"`
	Status      EvseStatusScheduleStatus `json:"status"`
}

// EvseStatusScheduleStatus defines model for EvseStatusSchedule.Status.
type EvseStatusScheduleStatus string

// GenericError defines model for genericError.
type GenericError struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     string  `json:"timeStamp"`
}

// GenericResponse defines model for genericResponse.
type GenericResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     string  `json:"timeStamp"`
}

// Image defines model for image.
type Image struct {
	Category  ImageCategory `json:"category"`
	Height    *float32      `json:"height,omitempty"`
	Thumbnail *string       `json:"thumbnail,omitempty"`
	Type      string        `json:"type"`
	Url       string        `json:"url"`
	Width     *float32      `json:"width,omitempty"`
}

// ImageCategory defines model for Image.Category.
type ImageCategory string

// InterfaceRoleType Interface role endpoint implements.
type InterfaceRoleType string

// LocationReferences defines model for locationReferences.
type LocationReferences struct {
	EvseUids   *string `json:"evse_uids,omitempty"`
	LocationId string  `json:"location_id"`
}

// Locations defines model for locations.
type Locations struct {
	Data          *LocationsData `json:"data,omitempty"`
	StatusCode    float32        `json:"status_code"`
	StatusMessage *string        `json:"status_message,omitempty"`
	TimeStamp     *string        `json:"timeStamp,omitempty"`
}

// LocationsData defines model for locations_data.
type LocationsData struct {
	Address            string                         `json:"address"`
	ChargingWhenClosed *bool                          `json:"charging_when_closed,omitempty"`
	City               string                         `json:"city"`
	Coordinates        CdrBodyCdrLocationCoordinates  `json:"coordinates"`
	Country            string                         `json:"country"`
	CountryCode        *string                        `json:"country_code,omitempty"`
	Directions         *CdrBodyTariffsTariffAltText   `json:"directions,omitempty"`
	EnergyMix          *CdrBodyTariffsEnergyMix       `json:"energy_mix,omitempty"`
	Evses              *Evse                          `json:"evses,omitempty"`
	Facilities         *LocationsDataFacilities       `json:"facilities,omitempty"`
	Id                 *string                        `json:"id,omitempty"`
	Images             *Image                         `json:"images,omitempty"`
	LastUpdated        string                         `json:"last_updated"`
	Name               *string                        `json:"name,omitempty"`
	OpeningTimes       *LocationsDataOpeningTimes     `json:"opening_times,omitempty"`
	Operator           *BusinessDetails               `json:"operator,omitempty"`
	Owner              *BusinessDetails               `json:"owner,omitempty"`
	ParkingType        *LocationsDataParkingType      `json:"parking_type,omitempty"`
	PartyId            *string                        `json:"party_id,omitempty"`
	PostalCode         *string                        `json:"postal_code,omitempty"`
	Publish            *bool                          `json:"publish,omitempty"`
	PublishAllowedTo   *LocationsDataPublishAllowedTo `json:"publish_allowed_to,omitempty"`
	RelatedLocations   *LocationsDataRelatedLocations `json:"related_locations,omitempty"`
	State              *string                        `json:"state,omitempty"`
	Suboperator        *BusinessDetails               `json:"suboperator,omitempty"`
	TimeZone           string                         `json:"time_zone"`
}

// LocationsDataFacilities defines model for LocationsData.Facilities.
type LocationsDataFacilities string

// LocationsDataParkingType defines model for LocationsData.ParkingType.
type LocationsDataParkingType string

// LocationsDataOpeningTimes defines model for locations_data_opening_times.
type LocationsDataOpeningTimes struct {
	ExceptionalClosings *LocationsDataOpeningTimesExceptionalOpenings `json:"exceptional_closings,omitempty"`
	ExceptionalOpenings *LocationsDataOpeningTimesExceptionalOpenings `json:"exceptional_openings,omitempty"`
	RegularHours        *LocationsDataOpeningTimesRegularHours        `json:"regular_hours,omitempty"`
	Twentyfourseven     bool                                          `json:"twentyfourseven"`
}

// LocationsDataOpeningTimesExceptionalOpenings defines model for locations_data_opening_times_exceptional_openings.
type LocationsDataOpeningTimesExceptionalOpenings struct {
	PeriodBegin string `json:"period_begin"`
	PeriodEnd   string `json:"period_end"`
}

// LocationsDataOpeningTimesRegularHours defines model for locations_data_opening_times_regular_hours.
type LocationsDataOpeningTimesRegularHours struct {
	PeriodBegin string `json:"period_begin"`
	PeriodEnd   string `json:"period_end"`
	Weekday     int    `json:"weekday"`
}

// LocationsDataPublishAllowedTo defines model for locations_data_publish_allowed_to.
type LocationsDataPublishAllowedTo struct {
	GroupId      *string                            `json:"group_id,omitempty"`
	Issuer       *string                            `json:"issuer,omitempty"`
	Type         *LocationsDataPublishAllowedToType `json:"type,omitempty"`
	Uid          *string                            `json:"uid,omitempty"`
	VisualNumber *string                            `json:"visual_number,omitempty"`
}

// LocationsDataPublishAllowedToType defines model for LocationsDataPublishAllowedTo.Type.
type LocationsDataPublishAllowedToType string

// LocationsDataRelatedLocations defines model for locations_data_related_locations.
type LocationsDataRelatedLocations struct {
	Latitude  string                       `json:"latitude"`
	Longitude string                       `json:"longitude"`
	Name      *CdrBodyTariffsTariffAltText `json:"name,omitempty"`
}

// ModuleIDType OCPI 2.2.1 modules
type ModuleIDType string

// Price defines model for price.
type Price struct {
	ExclVat float32  `json:"excl_vat"`
	InclVat *float32 `json:"incl_vat,omitempty"`
}

// ReservationRestrictionType defines model for reservationRestrictionType.
type ReservationRestrictionType string

// ReserveNow defines model for reserveNow.
type ReserveNow struct {
	AuthorizationReference *string `json:"authorization_reference,omitempty"`
	EvseUid                *string `json:"evse_uid,omitempty"`
	ExpiryDate             string  `json:"expiry_date"`
	LocationId             string  `json:"location_id"`
	ReservationId          string  `json:"reservation_id"`
	ResponseUrl            string  `json:"response_url"`
	Token                  Token   `json:"token"`
}

// Session defines model for session.
type Session struct {
	AuthMethod             SessionAuthMethod       `json:"auth_method"`
	AuthorizationReference *string                 `json:"authorization_reference,omitempty"`
	CdrToken               CdrBodyCdrToken         `json:"cdr_token"`
	ChargingPeriods        *SessionChargingPeriods `json:"charging_periods,omitempty"`
	ConnectorId            string                  `json:"connector_id"`
	CountryCode            string                  `json:"country_code"`
	Currency               string                  `json:"currency"`
	EndDateTime            *string                 `json:"end_date_time,omitempty"`
	EvseUid                string                  `json:"evse_uid"`
	Id                     string                  `json:"id"`
	Kwh                    float32                 `json:"kwh"`
	LastUpdated            string                  `json:"last_updated"`
	LocationId             string                  `json:"location_id"`
	MeterId                *string                 `json:"meter_id,omitempty"`
	PartyId                string                  `json:"party_id"`
	StartDateTime          string                  `json:"start_date_time"`
	Status                 SessionStatus           `json:"status"`
	TotalCosts             *SessionTotalCosts      `json:"total_costs,omitempty"`
}

// SessionAuthMethod defines model for Session.AuthMethod.
type SessionAuthMethod string

// SessionStatus defines model for Session.Status.
type SessionStatus string

// SessionResponse defines model for sessionResponse.
type SessionResponse struct {
	Session       Session `json:"session"`
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
}

// SessionChargingPeriods defines model for session_charging_periods.
type SessionChargingPeriods struct {
	Dimensions    *SessionChargingPeriodsDimensions `json:"dimensions,omitempty"`
	StartDateTime string                            `json:"start_date_time"`
	TariffId      *string                           `json:"tariff_id,omitempty"`
}

// SessionChargingPeriodsDimensions defines model for session_charging_periods_dimensions.
type SessionChargingPeriodsDimensions struct {
	Type   SessionChargingPeriodsDimensionsType `json:"type"`
	Volume float32                              `json:"volume"`
}

// SessionChargingPeriodsDimensionsType defines model for SessionChargingPeriodsDimensions.Type.
type SessionChargingPeriodsDimensionsType string

// SessionTotalCosts defines model for session_total_costs.
type SessionTotalCosts struct {
	ExclVat float32  `json:"excl_vat"`
	InclVat *float32 `json:"incl_vat,omitempty"`
}

// SessionsResponse defines model for sessionsResponse.
type SessionsResponse struct {
	Sessions      *Session `json:"sessions,omitempty"`
	StatusCode    float32  `json:"status_code"`
	StatusMessage *string  `json:"status_message,omitempty"`
	TimeStamp     *string  `json:"timeStamp,omitempty"`
}

// SetChargingProfile defines model for setChargingProfile.
type SetChargingProfile struct {
	ChargingProfile ChargingProfile `json:"charging_profile"`
	ResponseUrl     string          `json:"response_url"`
}

// StartSession defines model for startSession.
type StartSession struct {
	AuthorizationReference *string `json:"authorization_reference,omitempty"`
	ConnectorId            *string `json:"connector_id,omitempty"`
	EvseUid                *string `json:"evse_uid,omitempty"`
	LocationId             string  `json:"location_id"`
	ResponseUrl            string  `json:"response_url"`
	Token                  Token   `json:"token"`
}

// StopSession defines model for stopSession.
type StopSession struct {
	ResponseUrl string  `json:"response_url"`
	SessionId   *string `json:"session_id,omitempty"`
}

// Tariff defines model for tariff.
type Tariff struct {
	CountryCode   string                       `json:"country_code"`
	Currency      string                       `json:"currency"`
	Elements      *TariffElements              `json:"elements,omitempty"`
	EndDateTime   *string                      `json:"end_date_time,omitempty"`
	EnergyMix     *TariffEnergyMix             `json:"energy_mix,omitempty"`
	Id            string                       `json:"id"`
	LastUpdated   string                       `json:"last_updated"`
	MaxPrice      *Price                       `json:"max_price,omitempty"`
	MinPrice      *Price                       `json:"min_price,omitempty"`
	PartyId       string                       `json:"party_id"`
	StartDateTime *string                      `json:"start_date_time,omitempty"`
	TariffAltText *CdrBodyTariffsTariffAltText `json:"tariff_alt_text,omitempty"`
	TariffAltUrl  *string                      `json:"tariff_alt_url,omitempty"`
	Type          *TariffType                  `json:"type,omitempty"`
}

// TariffType defines model for Tariff.Type.
type TariffType string

// TariffDeleteResponse defines model for tariffDeleteResponse.
type TariffDeleteResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     string  `json:"timeStamp"`
}

// TariffResponse defines model for tariffResponse.
type TariffResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	Tariff        Tariff  `json:"tariff"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
}

// TariffElements defines model for tariff_elements.
type TariffElements struct {
	PriceComponents *TariffElementsPriceComponents `json:"price_components,omitempty"`
	Restrictions    *TariffElementsRestrictions    `json:"restrictions,omitempty"`
}

// TariffElementsPriceComponents defines model for TariffElements.PriceComponents.
type TariffElementsPriceComponents string

// TariffElementsRestrictions defines model for tariff_elements_restrictions.
type TariffElementsRestrictions struct {
	DayOfWeek   *TariffElementsRestrictionsDayOfWeek `json:"day_of_week,omitempty"`
	EndDate     *string                              `json:"end_date,omitempty"`
	EndTime     *string                              `json:"end_time,omitempty"`
	MaxCurrent  *float32                             `json:"max_current,omitempty"`
	MaxDuration *int                                 `json:"max_duration,omitempty"`
	MaxKwh      *float32                             `json:"max_kwh,omitempty"`
	MaxPower    *float32                             `json:"max_power,omitempty"`
	MinCurrent  *float32                             `json:"min_current,omitempty"`
	MinDuration *int                                 `json:"min_duration,omitempty"`
	MinKwh      *float32                             `json:"min_kwh,omitempty"`
	MinPower    *float32                             `json:"min_power,omitempty"`
	Reservation *ReservationRestrictionType          `json:"reservation,omitempty"`
	StartDate   *string                              `json:"start_date,omitempty"`
	StartTime   *string                              `json:"start_time,omitempty"`
}

// TariffElementsRestrictionsDayOfWeek defines model for TariffElementsRestrictions.DayOfWeek.
type TariffElementsRestrictionsDayOfWeek string

// TariffEnergyMix defines model for tariff_energy_mix.
type TariffEnergyMix struct {
	EnergyProductName *string                               `json:"energy_product_name,omitempty"`
	EnergySources     *CdrBodyTariffsEnergyMixEnergySources `json:"energy_sources,omitempty"`
	EnvironImpact     *TariffEnergyMixEnvironImpact         `json:"environ_impact,omitempty"`
	IsGreenEnergy     bool                                  `json:"is_green_energy"`
	SupplierName      *string                               `json:"supplier_name,omitempty"`
}

// TariffEnergyMixEnvironImpact defines model for tariff_energy_mix_environ_impact.
type TariffEnergyMixEnvironImpact struct {
	Amount float32 `json:"amount"`

	// Category Categories of environmental impact values
	Category EnvironmentalImpactCategoryType `json:"category"`
}

// TariffsResponse defines model for tariffsResponse.
type TariffsResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	Tariffs       *Tariff `json:"tariffs,omitempty"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
}

// Token defines model for token.
type Token struct {
	ContractId         string                   `json:"contract_id"`
	CountryCode        string                   `json:"country_code"`
	DefaultProfileType *TokenDefaultProfileType `json:"default_profile_type,omitempty"`
	EnergyContract     *TokenEnergyContract     `json:"energy_contract,omitempty"`
	GroupId            *string                  `json:"group_id,omitempty"`
	Issuer             string                   `json:"issuer"`
	Language           *string                  `json:"language,omitempty"`
	LastUpdated        string                   `json:"last_updated"`
	PartyId            string                   `json:"party_id"`
	Type               TokenType                `json:"type"`
	Uid                string                   `json:"uid"`
	Valid              bool                     `json:"valid"`
	VisualNumber       *string                  `json:"visual_number,omitempty"`
	Whitelist          TokenWhitelist           `json:"whitelist"`
}

// TokenDefaultProfileType defines model for Token.DefaultProfileType.
type TokenDefaultProfileType string

// TokenType defines model for Token.Type.
type TokenType string

// TokenWhitelist defines model for Token.Whitelist.
type TokenWhitelist string

// TokenResponse defines model for tokenResponse.
type TokenResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
	Token         Token   `json:"token"`
}

// TokenEnergyContract defines model for token_energy_contract.
type TokenEnergyContract struct {
	ContractId   *string `json:"contract_id,omitempty"`
	SupplierName string  `json:"supplier_name"`
}

// TokensResponse defines model for tokensResponse.
type TokensResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
	Tokens        *Token  `json:"tokens,omitempty"`
}

// UnlockConnector defines model for unlockConnector.
type UnlockConnector struct {
	ConnectorId string `json:"connector_id"`
	EvseUid     string `json:"evse_uid"`
	LocationId  string `json:"location_id"`
	ResponseUrl string `json:"response_url"`
}

// Versions defines model for versions.
type Versions struct {
	Data          *VersionsData `json:"data,omitempty"`
	StatusCode    float32       `json:"status_code"`
	StatusMessage *string       `json:"status_message,omitempty"`
	TimeStamp     *string       `json:"timeStamp,omitempty"`
}

// VersionsData defines model for versions_data.
type VersionsData struct {
	Url     string              `json:"url"`
	Version VersionsDataVersion `json:"version"`
}

// VersionsDataVersion defines model for VersionsData.Version.
type VersionsDataVersion string

// GetOcpiCdrsParams defines parameters for GetOcpiCdrs.
type GetOcpiCdrsParams struct {
	// DateFrom Return CDRs that have last_updated after or equal to this Date/Time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return CDRs that have last_updated up to this Date/Time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostOcpiCommandsCommandParamsCommand defines parameters for PostOcpiCommandsCommand.
type PostOcpiCommandsCommandParamsCommand string

// PostOcpiCommandsCommandUidParamsCommand defines parameters for PostOcpiCommandsCommandUid.
type PostOcpiCommandsCommandUidParamsCommand string

// GetOcpiHubclientinfoParams defines parameters for GetOcpiHubclientinfo.
type GetOcpiHubclientinfoParams struct {
	// DateFrom Return ClientInfo that have last_updated after or equal to Date/Time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return ClientInfo that have last_updated up to Date/Time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOcpiLocationsParams defines parameters for GetOcpiLocations.
type GetOcpiLocationsParams struct {
	// DateFrom Return Locations that have last_updated after or equal to this date time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return Locations that have last_updated up to this date time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOcpiLocationsCountryCodePartyIdLocationIdParams defines parameters for GetOcpiLocationsCountryCodePartyIdLocationId.
type GetOcpiLocationsCountryCodePartyIdLocationIdParams struct {
	// EvseUid Evse.uid, required when requesting an EVSE or Connector object.
	EvseUid *string `form:"evse_uid,omitempty" json:"evse_uid,omitempty"`

	// ConnectorId Connector.id, required when requesting a Connector object.
	ConnectorId *string `form:"connector_id,omitempty" json:"connector_id,omitempty"`
}

// PatchOcpiLocationsCountryCodePartyIdLocationIdParams defines parameters for PatchOcpiLocationsCountryCodePartyIdLocationId.
type PatchOcpiLocationsCountryCodePartyIdLocationIdParams struct {
	// EvseUid Evse.uid, required when requesting an EVSE or Connector object.
	EvseUid *string `form:"evse_uid,omitempty" json:"evse_uid,omitempty"`

	// ConnectorId Connector.id, required when requesting a Connector object.
	ConnectorId *string `form:"connector_id,omitempty" json:"connector_id,omitempty"`
}

// PutOcpiLocationsCountryCodePartyIdLocationIdParams defines parameters for PutOcpiLocationsCountryCodePartyIdLocationId.
type PutOcpiLocationsCountryCodePartyIdLocationIdParams struct {
	// EvseUid Evse.uid, required when requesting an EVSE or Connector object.
	EvseUid *string `form:"evse_uid,omitempty" json:"evse_uid,omitempty"`

	// ConnectorId Connector.id, required when requesting a Connector object.
	ConnectorId *string `form:"connector_id,omitempty" json:"connector_id,omitempty"`
}

// GetOcpiLocationsLocationIdParams defines parameters for GetOcpiLocationsLocationId.
type GetOcpiLocationsLocationIdParams struct {
	// EvseUid Evse.uid, required when requesting an EVSE or Connector object.
	EvseUid *string `form:"evse_uid,omitempty" json:"evse_uid,omitempty"`

	// ConnectorId Connector.id, required when requesting a Connector object.
	ConnectorId *string `form:"connector_id,omitempty" json:"connector_id,omitempty"`
}

// GetOcpiSessionsParams defines parameters for GetOcpiSessions.
type GetOcpiSessionsParams struct {
	// DateFrom Return Sessions that have last_updated after or equal to this date time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return Sessions that have last_updated up to this date time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOcpiTariffsParams defines parameters for GetOcpiTariffs.
type GetOcpiTariffsParams struct {
	// DateFrom Return Tariffs that have last_updated after or equal to Date/Time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return Tariffs that have last_updated up to Date/Time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOcpiTokensParams defines parameters for GetOcpiTokens.
type GetOcpiTokensParams struct {
	// DateFrom Return tokens that have last_updated after or equal to this Date/Time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return tokens that have last_updated up to Date/Time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOcpiTokensCountryCodePartyIdTokenUidParams defines parameters for GetOcpiTokensCountryCodePartyIdTokenUid.
type GetOcpiTokensCountryCodePartyIdTokenUidParams struct {
	// Type Token.type of the Token to retrieve. Default if omitted: RFID
	Type *GetOcpiTokensCountryCodePartyIdTokenUidParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetOcpiTokensCountryCodePartyIdTokenUidParamsType defines parameters for GetOcpiTokensCountryCodePartyIdTokenUid.
type GetOcpiTokensCountryCodePartyIdTokenUidParamsType string

// PatchOcpiTokensCountryCodePartyIdTokenUidParams defines parameters for PatchOcpiTokensCountryCodePartyIdTokenUid.
type PatchOcpiTokensCountryCodePartyIdTokenUidParams struct {
	// Type Token.type of the Token to retrieve. Default if omitted: RFID
	Type *PatchOcpiTokensCountryCodePartyIdTokenUidParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// PatchOcpiTokensCountryCodePartyIdTokenUidParamsType defines parameters for PatchOcpiTokensCountryCodePartyIdTokenUid.
type PatchOcpiTokensCountryCodePartyIdTokenUidParamsType string

// PutOcpiTokensCountryCodePartyIdTokenUidParams defines parameters for PutOcpiTokensCountryCodePartyIdTokenUid.
type PutOcpiTokensCountryCodePartyIdTokenUidParams struct {
	// Type Token.type of the Token to retrieve. Default if omitted: RFID
	Type *PutOcpiTokensCountryCodePartyIdTokenUidParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// PutOcpiTokensCountryCodePartyIdTokenUidParamsType defines parameters for PutOcpiTokensCountryCodePartyIdTokenUid.
type PutOcpiTokensCountryCodePartyIdTokenUidParamsType string

// PostOcpiTokenUidAuthorizeParams defines parameters for PostOcpiTokenUidAuthorize.
type PostOcpiTokenUidAuthorizeParams struct {
	// Type Token.type of the Token to retrieve. Default if omitted: RFID
	Type *PostOcpiTokenUidAuthorizeParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// PostOcpiTokenUidAuthorizeParamsType defines parameters for PostOcpiTokenUidAuthorize.
type PostOcpiTokenUidAuthorizeParamsType string

// PostOcpi221CredentialsJSONRequestBody defines body for PostOcpi221Credentials for application/json ContentType.
type PostOcpi221CredentialsJSONRequestBody = Credentials

// PutOcpi221CredentialsJSONRequestBody defines body for PutOcpi221Credentials for application/json ContentType.
type PutOcpi221CredentialsJSONRequestBody = Credentials

// PostOcpiCdrsJSONRequestBody defines body for PostOcpiCdrs for application/json ContentType.
type PostOcpiCdrsJSONRequestBody = CdrBody

// PostOcpiChargingprofileJSONRequestBody defines body for PostOcpiChargingprofile for application/json ContentType.
type PostOcpiChargingprofileJSONRequestBody = OcpiChargingprofilePostRequest

// PutOcpiChargingprofileSessionIdJSONRequestBody defines body for PutOcpiChargingprofileSessionId for application/json ContentType.
type PutOcpiChargingprofileSessionIdJSONRequestBody = ActiveChargingProfile

// PutOcpiChargingprofilesSessionIdJSONRequestBody defines body for PutOcpiChargingprofilesSessionId for application/json ContentType.
type PutOcpiChargingprofilesSessionIdJSONRequestBody = SetChargingProfile

// PutOcpiClientinfoCountryCodePartyIdJSONRequestBody defines body for PutOcpiClientinfoCountryCodePartyId for application/json ContentType.
type PutOcpiClientinfoCountryCodePartyIdJSONRequestBody = ClientInfo

// PostOcpiCommandsCommandJSONRequestBody defines body for PostOcpiCommandsCommand for application/json ContentType.
type PostOcpiCommandsCommandJSONRequestBody = OcpiCommandsCommandPostRequest

// PostOcpiCommandsCommandUidJSONRequestBody defines body for PostOcpiCommandsCommandUid for application/json ContentType.
type PostOcpiCommandsCommandUidJSONRequestBody = CommandResult

// PutOcpiLocationsCountryCodePartyIdLocationIdJSONRequestBody defines body for PutOcpiLocationsCountryCodePartyIdLocationId for application/json ContentType.
type PutOcpiLocationsCountryCodePartyIdLocationIdJSONRequestBody = OcpiLocationsLocationIdGet200Response

// PutOcpiSessionsCountryCodePartyIdSessionIdJSONRequestBody defines body for PutOcpiSessionsCountryCodePartyIdSessionId for application/json ContentType.
type PutOcpiSessionsCountryCodePartyIdSessionIdJSONRequestBody = Session

// PutOcpiSessionsSessionIdChargingPreferencesJSONRequestBody defines body for PutOcpiSessionsSessionIdChargingPreferences for application/json ContentType.
type PutOcpiSessionsSessionIdChargingPreferencesJSONRequestBody = ChargingPreferences

// PutOcpiTariffsCountryCodePartyIdTariffIdJSONRequestBody defines body for PutOcpiTariffsCountryCodePartyIdTariffId for application/json ContentType.
type PutOcpiTariffsCountryCodePartyIdTariffIdJSONRequestBody = Tariff

// PutOcpiTokensCountryCodePartyIdTokenUidJSONRequestBody defines body for PutOcpiTokensCountryCodePartyIdTokenUid for application/json ContentType.
type PutOcpiTokensCountryCodePartyIdTokenUidJSONRequestBody = Token

// PostOcpiTokenUidAuthorizeJSONRequestBody defines body for PostOcpiTokenUidAuthorize for application/json ContentType.
type PostOcpiTokenUidAuthorizeJSONRequestBody = LocationReferences

// AsActiveChargingProfileResult returns the union data inside the OcpiChargingprofilePostRequest as a ActiveChargingProfileResult
func (t OcpiChargingprofilePostRequest) AsActiveChargingProfileResult() (ActiveChargingProfileResult, error) {
	var body ActiveChargingProfileResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActiveChargingProfileResult overwrites any union data inside the OcpiChargingprofilePostRequest as the provided ActiveChargingProfileResult
func (t *OcpiChargingprofilePostRequest) FromActiveChargingProfileResult(v ActiveChargingProfileResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActiveChargingProfileResult performs a merge with any union data inside the OcpiChargingprofilePostRequest, using the provided ActiveChargingProfileResult
func (t *OcpiChargingprofilePostRequest) MergeActiveChargingProfileResult(v ActiveChargingProfileResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChargingProfileResult returns the union data inside the OcpiChargingprofilePostRequest as a ChargingProfileResult
func (t OcpiChargingprofilePostRequest) AsChargingProfileResult() (ChargingProfileResult, error) {
	var body ChargingProfileResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChargingProfileResult overwrites any union data inside the OcpiChargingprofilePostRequest as the provided ChargingProfileResult
func (t *OcpiChargingprofilePostRequest) FromChargingProfileResult(v ChargingProfileResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChargingProfileResult performs a merge with any union data inside the OcpiChargingprofilePostRequest, using the provided ChargingProfileResult
func (t *OcpiChargingprofilePostRequest) MergeChargingProfileResult(v ChargingProfileResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsClearProfileResult returns the union data inside the OcpiChargingprofilePostRequest as a ClearProfileResult
func (t OcpiChargingprofilePostRequest) AsClearProfileResult() (ClearProfileResult, error) {
	var body ClearProfileResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClearProfileResult overwrites any union data inside the OcpiChargingprofilePostRequest as the provided ClearProfileResult
func (t *OcpiChargingprofilePostRequest) FromClearProfileResult(v ClearProfileResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClearProfileResult performs a merge with any union data inside the OcpiChargingprofilePostRequest, using the provided ClearProfileResult
func (t *OcpiChargingprofilePostRequest) MergeClearProfileResult(v ClearProfileResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OcpiChargingprofilePostRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OcpiChargingprofilePostRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCancelReservation returns the union data inside the OcpiCommandsCommandPostRequest as a CancelReservation
func (t OcpiCommandsCommandPostRequest) AsCancelReservation() (CancelReservation, error) {
	var body CancelReservation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelReservation overwrites any union data inside the OcpiCommandsCommandPostRequest as the provided CancelReservation
func (t *OcpiCommandsCommandPostRequest) FromCancelReservation(v CancelReservation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelReservation performs a merge with any union data inside the OcpiCommandsCommandPostRequest, using the provided CancelReservation
func (t *OcpiCommandsCommandPostRequest) MergeCancelReservation(v CancelReservation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReserveNow returns the union data inside the OcpiCommandsCommandPostRequest as a ReserveNow
func (t OcpiCommandsCommandPostRequest) AsReserveNow() (ReserveNow, error) {
	var body ReserveNow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReserveNow overwrites any union data inside the OcpiCommandsCommandPostRequest as the provided ReserveNow
func (t *OcpiCommandsCommandPostRequest) FromReserveNow(v ReserveNow) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReserveNow performs a merge with any union data inside the OcpiCommandsCommandPostRequest, using the provided ReserveNow
func (t *OcpiCommandsCommandPostRequest) MergeReserveNow(v ReserveNow) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStartSession returns the union data inside the OcpiCommandsCommandPostRequest as a StartSession
func (t OcpiCommandsCommandPostRequest) AsStartSession() (StartSession, error) {
	var body StartSession
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStartSession overwrites any union data inside the OcpiCommandsCommandPostRequest as the provided StartSession
func (t *OcpiCommandsCommandPostRequest) FromStartSession(v StartSession) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStartSession performs a merge with any union data inside the OcpiCommandsCommandPostRequest, using the provided StartSession
func (t *OcpiCommandsCommandPostRequest) MergeStartSession(v StartSession) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStopSession returns the union data inside the OcpiCommandsCommandPostRequest as a StopSession
func (t OcpiCommandsCommandPostRequest) AsStopSession() (StopSession, error) {
	var body StopSession
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStopSession overwrites any union data inside the OcpiCommandsCommandPostRequest as the provided StopSession
func (t *OcpiCommandsCommandPostRequest) FromStopSession(v StopSession) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStopSession performs a merge with any union data inside the OcpiCommandsCommandPostRequest, using the provided StopSession
func (t *OcpiCommandsCommandPostRequest) MergeStopSession(v StopSession) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnlockConnector returns the union data inside the OcpiCommandsCommandPostRequest as a UnlockConnector
func (t OcpiCommandsCommandPostRequest) AsUnlockConnector() (UnlockConnector, error) {
	var body UnlockConnector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnlockConnector overwrites any union data inside the OcpiCommandsCommandPostRequest as the provided UnlockConnector
func (t *OcpiCommandsCommandPostRequest) FromUnlockConnector(v UnlockConnector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnlockConnector performs a merge with any union data inside the OcpiCommandsCommandPostRequest, using the provided UnlockConnector
func (t *OcpiCommandsCommandPostRequest) MergeUnlockConnector(v UnlockConnector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OcpiCommandsCommandPostRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OcpiCommandsCommandPostRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLocations returns the union data inside the OcpiLocationsLocationIdGet200Response as a Locations
func (t OcpiLocationsLocationIdGet200Response) AsLocations() (Locations, error) {
	var body Locations
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLocations overwrites any union data inside the OcpiLocationsLocationIdGet200Response as the provided Locations
func (t *OcpiLocationsLocationIdGet200Response) FromLocations(v Locations) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLocations performs a merge with any union data inside the OcpiLocationsLocationIdGet200Response, using the provided Locations
func (t *OcpiLocationsLocationIdGet200Response) MergeLocations(v Locations) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEvse returns the union data inside the OcpiLocationsLocationIdGet200Response as a Evse
func (t OcpiLocationsLocationIdGet200Response) AsEvse() (Evse, error) {
	var body Evse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvse overwrites any union data inside the OcpiLocationsLocationIdGet200Response as the provided Evse
func (t *OcpiLocationsLocationIdGet200Response) FromEvse(v Evse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvse performs a merge with any union data inside the OcpiLocationsLocationIdGet200Response, using the provided Evse
func (t *OcpiLocationsLocationIdGet200Response) MergeEvse(v Evse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConnector returns the union data inside the OcpiLocationsLocationIdGet200Response as a Connector
func (t OcpiLocationsLocationIdGet200Response) AsConnector() (Connector, error) {
	var body Connector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConnector overwrites any union data inside the OcpiLocationsLocationIdGet200Response as the provided Connector
func (t *OcpiLocationsLocationIdGet200Response) FromConnector(v Connector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConnector performs a merge with any union data inside the OcpiLocationsLocationIdGet200Response, using the provided Connector
func (t *OcpiLocationsLocationIdGet200Response) MergeConnector(v Connector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OcpiLocationsLocationIdGet200Response) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OcpiLocationsLocationIdGet200Response) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Informs that credentials are invalid
	// (DELETE /ocpi/2.2.1/credentials)
	DeleteOcpi221Credentials(c *gin.Context)
	// Get the credentials object
	// (GET /ocpi/2.2.1/credentials)
	GetOcpi221Credentials(c *gin.Context)
	// Provides the credentials object
	// (POST /ocpi/2.2.1/credentials)
	PostOcpi221Credentials(c *gin.Context)
	// Provides updated credentials object
	// (PUT /ocpi/2.2.1/credentials)
	PutOcpi221Credentials(c *gin.Context)
	// Get version supported endpoints
	// (GET /ocpi/2.2.1/details)
	GetOcpi221Details(c *gin.Context)
	// Get CDRs
	// (GET /ocpi/cdrs)
	GetOcpiCdrs(c *gin.Context, params GetOcpiCdrsParams)
	// Create CDR object
	// (POST /ocpi/cdrs)
	PostOcpiCdrs(c *gin.Context)
	// Send a result of the original request by the eMSP
	// (POST /ocpi/chargingprofile)
	PostOcpiChargingprofile(c *gin.Context)
	// Update charging profile
	// (PUT /ocpi/chargingprofile/{session_id})
	PutOcpiChargingprofileSessionId(c *gin.Context, sessionId string)
	// Create or update charging profile on session
	// (PUT /ocpi/chargingprofiles/{session_id})
	PutOcpiChargingprofilesSessionId(c *gin.Context, sessionId string)
	// Get active charging profile
	// (GET /ocpi/chargingprofiles/{session_id}/{duration}/{response_url})
	GetOcpiChargingprofilesSessionIdDurationResponseUrl(c *gin.Context, sessionId string, duration int, responseUrl string)
	// Delete charging profile on the session
	// (DELETE /ocpi/chargingprofiles/{session_id}/{response_url})
	DeleteOcpiChargingprofilesSessionIdResponseUrl(c *gin.Context, sessionId string, responseUrl string)
	// Get a ClientInfo object as it is stored in the connected clients system.
	// (GET /ocpi/clientinfo/{country_code}/{party_id})
	GetOcpiClientinfoCountryCodePartyId(c *gin.Context, countryCode string, partyId string)
	// Create or update client info
	// (PUT /ocpi/clientinfo/{country_code}/{party_id})
	PutOcpiClientinfoCountryCodePartyId(c *gin.Context, countryCode string, partyId string)
	// Send a command
	// (POST /ocpi/commands/{command})
	PostOcpiCommandsCommand(c *gin.Context, command PostOcpiCommandsCommandParamsCommand)
	// Receive the asynchronous response from the Charge Point.
	// (POST /ocpi/commands/{command}/{uid})
	PostOcpiCommandsCommandUid(c *gin.Context, command PostOcpiCommandsCommandUidParamsCommand, uid string)
	// Get hub connected clients
	// (GET /ocpi/hubclientinfo)
	GetOcpiHubclientinfo(c *gin.Context, params GetOcpiHubclientinfoParams)
	// Get available locations
	// (GET /ocpi/locations)
	GetOcpiLocations(c *gin.Context, params GetOcpiLocationsParams)
	// Get location, EVSE or connector
	// (GET /ocpi/locations/{country_code}/{party_id}/{location_id})
	GetOcpiLocationsCountryCodePartyIdLocationId(c *gin.Context, countryCode string, partyId string, locationId string, params GetOcpiLocationsCountryCodePartyIdLocationIdParams)
	// Sends new location object
	// (PATCH /ocpi/locations/{country_code}/{party_id}/{location_id})
	PatchOcpiLocationsCountryCodePartyIdLocationId(c *gin.Context, countryCode string, partyId string, locationId string, params PatchOcpiLocationsCountryCodePartyIdLocationIdParams)
	// Sends new location object
	// (PUT /ocpi/locations/{country_code}/{party_id}/{location_id})
	PutOcpiLocationsCountryCodePartyIdLocationId(c *gin.Context, countryCode string, partyId string, locationId string, params PutOcpiLocationsCountryCodePartyIdLocationIdParams)
	// Get location, EVSE or connector
	// (GET /ocpi/locations/{location_id})
	GetOcpiLocationsLocationId(c *gin.Context, locationId string, params GetOcpiLocationsLocationIdParams)
	// Get charging sessions
	// (GET /ocpi/sessions)
	GetOcpiSessions(c *gin.Context, params GetOcpiSessionsParams)
	// Get session with session_id
	// (GET /ocpi/sessions/{country_code}/{party_id}/{session_id})
	GetOcpiSessionsCountryCodePartyIdSessionId(c *gin.Context, countryCode string, partyId string, sessionId string)
	// Update session with session_id
	// (PATCH /ocpi/sessions/{country_code}/{party_id}/{session_id})
	PatchOcpiSessionsCountryCodePartyIdSessionId(c *gin.Context, countryCode string, partyId string, sessionId string)
	// Update session with session_id
	// (PUT /ocpi/sessions/{country_code}/{party_id}/{session_id})
	PutOcpiSessionsCountryCodePartyIdSessionId(c *gin.Context, countryCode string, partyId string, sessionId string)
	// Update charging session
	// (PUT /ocpi/sessions/{session_id}/charging_preferences)
	PutOcpiSessionsSessionIdChargingPreferences(c *gin.Context, sessionId string)
	// Get tariffs
	// (GET /ocpi/tariffs)
	GetOcpiTariffs(c *gin.Context, params GetOcpiTariffsParams)
	// Delete tariff
	// (DELETE /ocpi/tariffs/{country_code}/{party_id}/{tariff_id})
	DeleteOcpiTariffsCountryCodePartyIdTariffId(c *gin.Context, countryCode string, partyId string, tariffId string)
	// Get tariff with tariff_id
	// (GET /ocpi/tariffs/{country_code}/{party_id}/{tariff_id})
	GetOcpiTariffsCountryCodePartyIdTariffId(c *gin.Context, countryCode string, partyId string, tariffId string)
	// Update tariff
	// (PUT /ocpi/tariffs/{country_code}/{party_id}/{tariff_id})
	PutOcpiTariffsCountryCodePartyIdTariffId(c *gin.Context, countryCode string, partyId string, tariffId string)
	// Get tokens
	// (GET /ocpi/tokens)
	GetOcpiTokens(c *gin.Context, params GetOcpiTokensParams)
	// Get the token object
	// (GET /ocpi/tokens/{country_code}/{party_id}/{token_uid})
	GetOcpiTokensCountryCodePartyIdTokenUid(c *gin.Context, countryCode string, partyId string, tokenUid string, params GetOcpiTokensCountryCodePartyIdTokenUidParams)
	// Update token object
	// (PATCH /ocpi/tokens/{country_code}/{party_id}/{token_uid})
	PatchOcpiTokensCountryCodePartyIdTokenUid(c *gin.Context, countryCode string, partyId string, tokenUid string, params PatchOcpiTokensCountryCodePartyIdTokenUidParams)
	// Update token object
	// (PUT /ocpi/tokens/{country_code}/{party_id}/{token_uid})
	PutOcpiTokensCountryCodePartyIdTokenUid(c *gin.Context, countryCode string, partyId string, tokenUid string, params PutOcpiTokensCountryCodePartyIdTokenUidParams)
	// Get supported versions
	// (GET /ocpi/versions)
	GetOcpiVersions(c *gin.Context)
	// Authorization
	// (POST /ocpi/{token_uid}/authorize)
	PostOcpiTokenUidAuthorize(c *gin.Context, tokenUid string, params PostOcpiTokenUidAuthorizeParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteOcpi221Credentials operation middleware
func (siw *ServerInterfaceWrapper) DeleteOcpi221Credentials(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOcpi221Credentials(c)
}

// GetOcpi221Credentials operation middleware
func (siw *ServerInterfaceWrapper) GetOcpi221Credentials(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpi221Credentials(c)
}

// PostOcpi221Credentials operation middleware
func (siw *ServerInterfaceWrapper) PostOcpi221Credentials(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOcpi221Credentials(c)
}

// PutOcpi221Credentials operation middleware
func (siw *ServerInterfaceWrapper) PutOcpi221Credentials(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOcpi221Credentials(c)
}

// GetOcpi221Details operation middleware
func (siw *ServerInterfaceWrapper) GetOcpi221Details(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpi221Details(c)
}

// GetOcpiCdrs operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiCdrs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOcpiCdrsParams

	// ------------- Optional query parameter "date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_from", c.Request.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_to", c.Request.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiCdrs(c, params)
}

// PostOcpiCdrs operation middleware
func (siw *ServerInterfaceWrapper) PostOcpiCdrs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOcpiCdrs(c)
}

// PostOcpiChargingprofile operation middleware
func (siw *ServerInterfaceWrapper) PostOcpiChargingprofile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOcpiChargingprofile(c)
}

// PutOcpiChargingprofileSessionId operation middleware
func (siw *ServerInterfaceWrapper) PutOcpiChargingprofileSessionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Param("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter session_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOcpiChargingprofileSessionId(c, sessionId)
}

// PutOcpiChargingprofilesSessionId operation middleware
func (siw *ServerInterfaceWrapper) PutOcpiChargingprofilesSessionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Param("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter session_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOcpiChargingprofilesSessionId(c, sessionId)
}

// GetOcpiChargingprofilesSessionIdDurationResponseUrl operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiChargingprofilesSessionIdDurationResponseUrl(c *gin.Context) {

	var err error

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Param("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter session_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "duration" -------------
	var duration int

	err = runtime.BindStyledParameterWithOptions("simple", "duration", c.Param("duration"), &duration, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter duration: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "response_url" -------------
	var responseUrl string

	err = runtime.BindStyledParameterWithOptions("simple", "response_url", c.Param("response_url"), &responseUrl, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter response_url: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiChargingprofilesSessionIdDurationResponseUrl(c, sessionId, duration, responseUrl)
}

// DeleteOcpiChargingprofilesSessionIdResponseUrl operation middleware
func (siw *ServerInterfaceWrapper) DeleteOcpiChargingprofilesSessionIdResponseUrl(c *gin.Context) {

	var err error

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Param("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter session_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "response_url" -------------
	var responseUrl string

	err = runtime.BindStyledParameterWithOptions("simple", "response_url", c.Param("response_url"), &responseUrl, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter response_url: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOcpiChargingprofilesSessionIdResponseUrl(c, sessionId, responseUrl)
}

// GetOcpiClientinfoCountryCodePartyId operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiClientinfoCountryCodePartyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiClientinfoCountryCodePartyId(c, countryCode, partyId)
}

// PutOcpiClientinfoCountryCodePartyId operation middleware
func (siw *ServerInterfaceWrapper) PutOcpiClientinfoCountryCodePartyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOcpiClientinfoCountryCodePartyId(c, countryCode, partyId)
}

// PostOcpiCommandsCommand operation middleware
func (siw *ServerInterfaceWrapper) PostOcpiCommandsCommand(c *gin.Context) {

	var err error

	// ------------- Path parameter "command" -------------
	var command PostOcpiCommandsCommandParamsCommand

	err = runtime.BindStyledParameterWithOptions("simple", "command", c.Param("command"), &command, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter command: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOcpiCommandsCommand(c, command)
}

// PostOcpiCommandsCommandUid operation middleware
func (siw *ServerInterfaceWrapper) PostOcpiCommandsCommandUid(c *gin.Context) {

	var err error

	// ------------- Path parameter "command" -------------
	var command PostOcpiCommandsCommandUidParamsCommand

	err = runtime.BindStyledParameterWithOptions("simple", "command", c.Param("command"), &command, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter command: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", c.Param("uid"), &uid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOcpiCommandsCommandUid(c, command, uid)
}

// GetOcpiHubclientinfo operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiHubclientinfo(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOcpiHubclientinfoParams

	// ------------- Optional query parameter "date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_from", c.Request.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_to", c.Request.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiHubclientinfo(c, params)
}

// GetOcpiLocations operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiLocations(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOcpiLocationsParams

	// ------------- Optional query parameter "date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_from", c.Request.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_to", c.Request.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiLocations(c, params)
}

// GetOcpiLocationsCountryCodePartyIdLocationId operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiLocationsCountryCodePartyIdLocationId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "location_id" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "location_id", c.Param("location_id"), &locationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter location_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOcpiLocationsCountryCodePartyIdLocationIdParams

	// ------------- Optional query parameter "evse_uid" -------------

	err = runtime.BindQueryParameter("form", true, false, "evse_uid", c.Request.URL.Query(), &params.EvseUid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter evse_uid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "connector_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "connector_id", c.Request.URL.Query(), &params.ConnectorId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter connector_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiLocationsCountryCodePartyIdLocationId(c, countryCode, partyId, locationId, params)
}

// PatchOcpiLocationsCountryCodePartyIdLocationId operation middleware
func (siw *ServerInterfaceWrapper) PatchOcpiLocationsCountryCodePartyIdLocationId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "location_id" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "location_id", c.Param("location_id"), &locationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter location_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchOcpiLocationsCountryCodePartyIdLocationIdParams

	// ------------- Optional query parameter "evse_uid" -------------

	err = runtime.BindQueryParameter("form", true, false, "evse_uid", c.Request.URL.Query(), &params.EvseUid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter evse_uid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "connector_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "connector_id", c.Request.URL.Query(), &params.ConnectorId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter connector_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchOcpiLocationsCountryCodePartyIdLocationId(c, countryCode, partyId, locationId, params)
}

// PutOcpiLocationsCountryCodePartyIdLocationId operation middleware
func (siw *ServerInterfaceWrapper) PutOcpiLocationsCountryCodePartyIdLocationId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "location_id" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "location_id", c.Param("location_id"), &locationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter location_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutOcpiLocationsCountryCodePartyIdLocationIdParams

	// ------------- Optional query parameter "evse_uid" -------------

	err = runtime.BindQueryParameter("form", true, false, "evse_uid", c.Request.URL.Query(), &params.EvseUid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter evse_uid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "connector_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "connector_id", c.Request.URL.Query(), &params.ConnectorId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter connector_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOcpiLocationsCountryCodePartyIdLocationId(c, countryCode, partyId, locationId, params)
}

// GetOcpiLocationsLocationId operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiLocationsLocationId(c *gin.Context) {

	var err error

	// ------------- Path parameter "location_id" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "location_id", c.Param("location_id"), &locationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter location_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOcpiLocationsLocationIdParams

	// ------------- Optional query parameter "evse_uid" -------------

	err = runtime.BindQueryParameter("form", true, false, "evse_uid", c.Request.URL.Query(), &params.EvseUid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter evse_uid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "connector_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "connector_id", c.Request.URL.Query(), &params.ConnectorId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter connector_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiLocationsLocationId(c, locationId, params)
}

// GetOcpiSessions operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiSessions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOcpiSessionsParams

	// ------------- Optional query parameter "date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_from", c.Request.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_to", c.Request.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiSessions(c, params)
}

// GetOcpiSessionsCountryCodePartyIdSessionId operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiSessionsCountryCodePartyIdSessionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Param("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter session_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiSessionsCountryCodePartyIdSessionId(c, countryCode, partyId, sessionId)
}

// PatchOcpiSessionsCountryCodePartyIdSessionId operation middleware
func (siw *ServerInterfaceWrapper) PatchOcpiSessionsCountryCodePartyIdSessionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Param("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter session_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchOcpiSessionsCountryCodePartyIdSessionId(c, countryCode, partyId, sessionId)
}

// PutOcpiSessionsCountryCodePartyIdSessionId operation middleware
func (siw *ServerInterfaceWrapper) PutOcpiSessionsCountryCodePartyIdSessionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Param("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter session_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOcpiSessionsCountryCodePartyIdSessionId(c, countryCode, partyId, sessionId)
}

// PutOcpiSessionsSessionIdChargingPreferences operation middleware
func (siw *ServerInterfaceWrapper) PutOcpiSessionsSessionIdChargingPreferences(c *gin.Context) {

	var err error

	// ------------- Path parameter "session_id" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Param("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter session_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOcpiSessionsSessionIdChargingPreferences(c, sessionId)
}

// GetOcpiTariffs operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiTariffs(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOcpiTariffsParams

	// ------------- Optional query parameter "date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_from", c.Request.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_to", c.Request.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiTariffs(c, params)
}

// DeleteOcpiTariffsCountryCodePartyIdTariffId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOcpiTariffsCountryCodePartyIdTariffId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tariff_id" -------------
	var tariffId string

	err = runtime.BindStyledParameterWithOptions("simple", "tariff_id", c.Param("tariff_id"), &tariffId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tariff_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOcpiTariffsCountryCodePartyIdTariffId(c, countryCode, partyId, tariffId)
}

// GetOcpiTariffsCountryCodePartyIdTariffId operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiTariffsCountryCodePartyIdTariffId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tariff_id" -------------
	var tariffId string

	err = runtime.BindStyledParameterWithOptions("simple", "tariff_id", c.Param("tariff_id"), &tariffId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tariff_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiTariffsCountryCodePartyIdTariffId(c, countryCode, partyId, tariffId)
}

// PutOcpiTariffsCountryCodePartyIdTariffId operation middleware
func (siw *ServerInterfaceWrapper) PutOcpiTariffsCountryCodePartyIdTariffId(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "tariff_id" -------------
	var tariffId string

	err = runtime.BindStyledParameterWithOptions("simple", "tariff_id", c.Param("tariff_id"), &tariffId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tariff_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOcpiTariffsCountryCodePartyIdTariffId(c, countryCode, partyId, tariffId)
}

// GetOcpiTokens operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiTokens(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOcpiTokensParams

	// ------------- Optional query parameter "date_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_from", c.Request.URL.Query(), &params.DateFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "date_to", c.Request.URL.Query(), &params.DateTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiTokens(c, params)
}

// GetOcpiTokensCountryCodePartyIdTokenUid operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiTokensCountryCodePartyIdTokenUid(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "token_uid" -------------
	var tokenUid string

	err = runtime.BindStyledParameterWithOptions("simple", "token_uid", c.Param("token_uid"), &tokenUid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token_uid: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOcpiTokensCountryCodePartyIdTokenUidParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiTokensCountryCodePartyIdTokenUid(c, countryCode, partyId, tokenUid, params)
}

// PatchOcpiTokensCountryCodePartyIdTokenUid operation middleware
func (siw *ServerInterfaceWrapper) PatchOcpiTokensCountryCodePartyIdTokenUid(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "token_uid" -------------
	var tokenUid string

	err = runtime.BindStyledParameterWithOptions("simple", "token_uid", c.Param("token_uid"), &tokenUid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token_uid: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchOcpiTokensCountryCodePartyIdTokenUidParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchOcpiTokensCountryCodePartyIdTokenUid(c, countryCode, partyId, tokenUid, params)
}

// PutOcpiTokensCountryCodePartyIdTokenUid operation middleware
func (siw *ServerInterfaceWrapper) PutOcpiTokensCountryCodePartyIdTokenUid(c *gin.Context) {

	var err error

	// ------------- Path parameter "country_code" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithOptions("simple", "country_code", c.Param("country_code"), &countryCode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter country_code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "party_id" -------------
	var partyId string

	err = runtime.BindStyledParameterWithOptions("simple", "party_id", c.Param("party_id"), &partyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter party_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "token_uid" -------------
	var tokenUid string

	err = runtime.BindStyledParameterWithOptions("simple", "token_uid", c.Param("token_uid"), &tokenUid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token_uid: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutOcpiTokensCountryCodePartyIdTokenUidParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOcpiTokensCountryCodePartyIdTokenUid(c, countryCode, partyId, tokenUid, params)
}

// GetOcpiVersions operation middleware
func (siw *ServerInterfaceWrapper) GetOcpiVersions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOcpiVersions(c)
}

// PostOcpiTokenUidAuthorize operation middleware
func (siw *ServerInterfaceWrapper) PostOcpiTokenUidAuthorize(c *gin.Context) {

	var err error

	// ------------- Path parameter "token_uid" -------------
	var tokenUid string

	err = runtime.BindStyledParameterWithOptions("simple", "token_uid", c.Param("token_uid"), &tokenUid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token_uid: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostOcpiTokenUidAuthorizeParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOcpiTokenUidAuthorize(c, tokenUid, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/ocpi/2.2.1/credentials", wrapper.DeleteOcpi221Credentials)
	router.GET(options.BaseURL+"/ocpi/2.2.1/credentials", wrapper.GetOcpi221Credentials)
	router.POST(options.BaseURL+"/ocpi/2.2.1/credentials", wrapper.PostOcpi221Credentials)
	router.PUT(options.BaseURL+"/ocpi/2.2.1/credentials", wrapper.PutOcpi221Credentials)
	router.GET(options.BaseURL+"/ocpi/2.2.1/details", wrapper.GetOcpi221Details)
	router.GET(options.BaseURL+"/ocpi/cdrs", wrapper.GetOcpiCdrs)
	router.POST(options.BaseURL+"/ocpi/cdrs", wrapper.PostOcpiCdrs)
	router.POST(options.BaseURL+"/ocpi/chargingprofile", wrapper.PostOcpiChargingprofile)
	router.PUT(options.BaseURL+"/ocpi/chargingprofile/:session_id", wrapper.PutOcpiChargingprofileSessionId)
	router.PUT(options.BaseURL+"/ocpi/chargingprofiles/:session_id", wrapper.PutOcpiChargingprofilesSessionId)
	router.GET(options.BaseURL+"/ocpi/chargingprofiles/:session_id/:duration/:response_url", wrapper.GetOcpiChargingprofilesSessionIdDurationResponseUrl)
	router.DELETE(options.BaseURL+"/ocpi/chargingprofiles/:session_id/:response_url", wrapper.DeleteOcpiChargingprofilesSessionIdResponseUrl)
	router.GET(options.BaseURL+"/ocpi/clientinfo/:country_code/:party_id", wrapper.GetOcpiClientinfoCountryCodePartyId)
	router.PUT(options.BaseURL+"/ocpi/clientinfo/:country_code/:party_id", wrapper.PutOcpiClientinfoCountryCodePartyId)
	router.POST(options.BaseURL+"/ocpi/commands/:command", wrapper.PostOcpiCommandsCommand)
	router.POST(options.BaseURL+"/ocpi/commands/:command/:uid", wrapper.PostOcpiCommandsCommandUid)
	router.GET(options.BaseURL+"/ocpi/hubclientinfo", wrapper.GetOcpiHubclientinfo)
	router.GET(options.BaseURL+"/ocpi/locations", wrapper.GetOcpiLocations)
	router.GET(options.BaseURL+"/ocpi/locations/:country_code/:party_id/:location_id", wrapper.GetOcpiLocationsCountryCodePartyIdLocationId)
	router.PATCH(options.BaseURL+"/ocpi/locations/:country_code/:party_id/:location_id", wrapper.PatchOcpiLocationsCountryCodePartyIdLocationId)
	router.PUT(options.BaseURL+"/ocpi/locations/:country_code/:party_id/:location_id", wrapper.PutOcpiLocationsCountryCodePartyIdLocationId)
	router.GET(options.BaseURL+"/ocpi/locations/:location_id", wrapper.GetOcpiLocationsLocationId)
	router.GET(options.BaseURL+"/ocpi/sessions", wrapper.GetOcpiSessions)
	router.GET(options.BaseURL+"/ocpi/sessions/:country_code/:party_id/:session_id", wrapper.GetOcpiSessionsCountryCodePartyIdSessionId)
	router.PATCH(options.BaseURL+"/ocpi/sessions/:country_code/:party_id/:session_id", wrapper.PatchOcpiSessionsCountryCodePartyIdSessionId)
	router.PUT(options.BaseURL+"/ocpi/sessions/:country_code/:party_id/:session_id", wrapper.PutOcpiSessionsCountryCodePartyIdSessionId)
	router.PUT(options.BaseURL+"/ocpi/sessions/:session_id/charging_preferences", wrapper.PutOcpiSessionsSessionIdChargingPreferences)
	router.GET(options.BaseURL+"/ocpi/tariffs", wrapper.GetOcpiTariffs)
	router.DELETE(options.BaseURL+"/ocpi/tariffs/:country_code/:party_id/:tariff_id", wrapper.DeleteOcpiTariffsCountryCodePartyIdTariffId)
	router.GET(options.BaseURL+"/ocpi/tariffs/:country_code/:party_id/:tariff_id", wrapper.GetOcpiTariffsCountryCodePartyIdTariffId)
	router.PUT(options.BaseURL+"/ocpi/tariffs/:country_code/:party_id/:tariff_id", wrapper.PutOcpiTariffsCountryCodePartyIdTariffId)
	router.GET(options.BaseURL+"/ocpi/tokens", wrapper.GetOcpiTokens)
	router.GET(options.BaseURL+"/ocpi/tokens/:country_code/:party_id/:token_uid", wrapper.GetOcpiTokensCountryCodePartyIdTokenUid)
	router.PATCH(options.BaseURL+"/ocpi/tokens/:country_code/:party_id/:token_uid", wrapper.PatchOcpiTokensCountryCodePartyIdTokenUid)
	router.PUT(options.BaseURL+"/ocpi/tokens/:country_code/:party_id/:token_uid", wrapper.PutOcpiTokensCountryCodePartyIdTokenUid)
	router.GET(options.BaseURL+"/ocpi/versions", wrapper.GetOcpiVersions)
	router.POST(options.BaseURL+"/ocpi/:token_uid/authorize", wrapper.PostOcpiTokenUidAuthorize)
}
