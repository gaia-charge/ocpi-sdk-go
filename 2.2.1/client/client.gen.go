// Package ocpi_v221 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ocpi_v221

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ActiveChargingProfileResultResult.
const (
	ActiveChargingProfileResultResultACCEPTED ActiveChargingProfileResultResult = "ACCEPTED"
	ActiveChargingProfileResultResultREJECTED ActiveChargingProfileResultResult = "REJECTED"
	ActiveChargingProfileResultResultUNKNOWN  ActiveChargingProfileResultResult = "UNKNOWN"
)

// Defines values for AuthorizationAllowed.
const (
	AuthorizationAllowedALLOWED    AuthorizationAllowed = "ALLOWED"
	AuthorizationAllowedBLOCKED    AuthorizationAllowed = "BLOCKED"
	AuthorizationAllowedEXPIRED    AuthorizationAllowed = "EXPIRED"
	AuthorizationAllowedNOCREDIT   AuthorizationAllowed = "NO_CREDIT"
	AuthorizationAllowedNOTALLOWED AuthorizationAllowed = "NOT_ALLOWED"
)

// Defines values for CdrBodyAuthMethod.
const (
	CdrBodyAuthMethodAUTHREQUEST CdrBodyAuthMethod = "AUTH_REQUEST"
	CdrBodyAuthMethodCOMMAND     CdrBodyAuthMethod = "COMMAND"
	CdrBodyAuthMethodWHITELIST   CdrBodyAuthMethod = "WHITELIST"
)

// Defines values for CdrBodyCdrLocationConnectorFormat.
const (
	CdrBodyCdrLocationConnectorFormatCABLE  CdrBodyCdrLocationConnectorFormat = "CABLE"
	CdrBodyCdrLocationConnectorFormatSOCKET CdrBodyCdrLocationConnectorFormat = "SOCKET"
)

// Defines values for CdrBodyCdrLocationConnectorPowerType.
const (
	CdrBodyCdrLocationConnectorPowerTypeAC1PHASE      CdrBodyCdrLocationConnectorPowerType = "AC_1_PHASE"
	CdrBodyCdrLocationConnectorPowerTypeAC2PHASE      CdrBodyCdrLocationConnectorPowerType = "AC_2_PHASE"
	CdrBodyCdrLocationConnectorPowerTypeAC2PHASESPLIT CdrBodyCdrLocationConnectorPowerType = "AC_2_PHASE_SPLIT"
	CdrBodyCdrLocationConnectorPowerTypeAC3PHASE      CdrBodyCdrLocationConnectorPowerType = "AC_3_PHASE"
	CdrBodyCdrLocationConnectorPowerTypeDC            CdrBodyCdrLocationConnectorPowerType = "DC"
)

// Defines values for CdrBodyCdrLocationConnectorStandard.
const (
	CdrBodyCdrLocationConnectorStandardCHADEMO            CdrBodyCdrLocationConnectorStandard = "CHADEMO"
	CdrBodyCdrLocationConnectorStandardCHAOJI             CdrBodyCdrLocationConnectorStandard = "CHAOJI"
	CdrBodyCdrLocationConnectorStandardDOMESTICA          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_A"
	CdrBodyCdrLocationConnectorStandardDOMESTICB          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_B"
	CdrBodyCdrLocationConnectorStandardDOMESTICC          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_C"
	CdrBodyCdrLocationConnectorStandardDOMESTICD          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_D"
	CdrBodyCdrLocationConnectorStandardDOMESTICE          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_E"
	CdrBodyCdrLocationConnectorStandardDOMESTICF          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_F"
	CdrBodyCdrLocationConnectorStandardDOMESTICG          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_G"
	CdrBodyCdrLocationConnectorStandardDOMESTICH          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_H"
	CdrBodyCdrLocationConnectorStandardDOMESTICJ          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_J"
	CdrBodyCdrLocationConnectorStandardDOMESTICK          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_K"
	CdrBodyCdrLocationConnectorStandardDOMESTICL          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_L"
	CdrBodyCdrLocationConnectorStandardDOMESTICM          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_M"
	CdrBodyCdrLocationConnectorStandardDOMESTICN          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_N"
	CdrBodyCdrLocationConnectorStandardDOMESTICO          CdrBodyCdrLocationConnectorStandard = "DOMESTIC_O"
	CdrBodyCdrLocationConnectorStandardGBTAC              CdrBodyCdrLocationConnectorStandard = "GBT_AC"
	CdrBodyCdrLocationConnectorStandardGBTDC              CdrBodyCdrLocationConnectorStandard = "GBT_DC"
	CdrBodyCdrLocationConnectorStandardIEC603092Single16  CdrBodyCdrLocationConnectorStandard = "IEC_60309_2_single_16"
	CdrBodyCdrLocationConnectorStandardIEC603092Three16   CdrBodyCdrLocationConnectorStandard = "IEC_60309_2_three_16"
	CdrBodyCdrLocationConnectorStandardIEC603092Three32   CdrBodyCdrLocationConnectorStandard = "IEC_60309_2_three_32"
	CdrBodyCdrLocationConnectorStandardIEC603092Three64   CdrBodyCdrLocationConnectorStandard = "IEC_60309_2_three_64"
	CdrBodyCdrLocationConnectorStandardIEC62196T1         CdrBodyCdrLocationConnectorStandard = "IEC_62196_T1"
	CdrBodyCdrLocationConnectorStandardIEC62196T1COMBO    CdrBodyCdrLocationConnectorStandard = "IEC_62196_T1_COMBO"
	CdrBodyCdrLocationConnectorStandardIEC62196T2         CdrBodyCdrLocationConnectorStandard = "IEC_62196_T2"
	CdrBodyCdrLocationConnectorStandardIEC62196T2COMBO    CdrBodyCdrLocationConnectorStandard = "IEC_62196_T2_COMBO"
	CdrBodyCdrLocationConnectorStandardIEC62196T3A        CdrBodyCdrLocationConnectorStandard = "IEC_62196_T3A"
	CdrBodyCdrLocationConnectorStandardIEC62196T3C        CdrBodyCdrLocationConnectorStandard = "IEC_62196_T3C"
	CdrBodyCdrLocationConnectorStandardNEMA1030           CdrBodyCdrLocationConnectorStandard = "NEMA_10_30"
	CdrBodyCdrLocationConnectorStandardNEMA1050           CdrBodyCdrLocationConnectorStandard = "NEMA_10_50"
	CdrBodyCdrLocationConnectorStandardNEMA1430           CdrBodyCdrLocationConnectorStandard = "NEMA_14_30"
	CdrBodyCdrLocationConnectorStandardNEMA1450           CdrBodyCdrLocationConnectorStandard = "NEMA_14_50"
	CdrBodyCdrLocationConnectorStandardNEMA520            CdrBodyCdrLocationConnectorStandard = "NEMA_5_20"
	CdrBodyCdrLocationConnectorStandardNEMA630            CdrBodyCdrLocationConnectorStandard = "NEMA_6_30"
	CdrBodyCdrLocationConnectorStandardNEMA650            CdrBodyCdrLocationConnectorStandard = "NEMA_6_50"
	CdrBodyCdrLocationConnectorStandardPANTOGRAPHBOTTOMUP CdrBodyCdrLocationConnectorStandard = "PANTOGRAPH_BOTTOM_UP"
	CdrBodyCdrLocationConnectorStandardPANTOGRAPHTOPDOWN  CdrBodyCdrLocationConnectorStandard = "PANTOGRAPH_TOP_DOWN"
	CdrBodyCdrLocationConnectorStandardTESLAR             CdrBodyCdrLocationConnectorStandard = "TESLA_R"
	CdrBodyCdrLocationConnectorStandardTESLAS             CdrBodyCdrLocationConnectorStandard = "TESLA_S"
)

// Defines values for CdrBodyCdrTokenType.
const (
	CdrBodyCdrTokenTypeADHOCUSER CdrBodyCdrTokenType = "AD_HOC_USER"
	CdrBodyCdrTokenTypeAPPUSER   CdrBodyCdrTokenType = "APP_USER"
	CdrBodyCdrTokenTypeOTHER     CdrBodyCdrTokenType = "OTHER"
	CdrBodyCdrTokenTypeRFID      CdrBodyCdrTokenType = "RFID"
)

// Defines values for CdrBodyChargingPeriodsDimensionsType.
const (
	CdrBodyChargingPeriodsDimensionsTypeCURRENT         CdrBodyChargingPeriodsDimensionsType = "CURRENT"
	CdrBodyChargingPeriodsDimensionsTypeENERGY          CdrBodyChargingPeriodsDimensionsType = "ENERGY"
	CdrBodyChargingPeriodsDimensionsTypeENERGYEXPORT    CdrBodyChargingPeriodsDimensionsType = "ENERGY_EXPORT"
	CdrBodyChargingPeriodsDimensionsTypeENERGYIMPORT    CdrBodyChargingPeriodsDimensionsType = "ENERGY_IMPORT"
	CdrBodyChargingPeriodsDimensionsTypeMAXCURRENT      CdrBodyChargingPeriodsDimensionsType = "MAX_CURRENT"
	CdrBodyChargingPeriodsDimensionsTypeMAXPOWER        CdrBodyChargingPeriodsDimensionsType = "MAX_POWER"
	CdrBodyChargingPeriodsDimensionsTypeMINCURRENT      CdrBodyChargingPeriodsDimensionsType = "MIN_CURRENT"
	CdrBodyChargingPeriodsDimensionsTypeMINPOWER        CdrBodyChargingPeriodsDimensionsType = "MIN_POWER"
	CdrBodyChargingPeriodsDimensionsTypePARKINGTIME     CdrBodyChargingPeriodsDimensionsType = "PARKING_TIME"
	CdrBodyChargingPeriodsDimensionsTypePOWER           CdrBodyChargingPeriodsDimensionsType = "POWER"
	CdrBodyChargingPeriodsDimensionsTypeRESERVATIONTIME CdrBodyChargingPeriodsDimensionsType = "RESERVATION_TIME"
	CdrBodyChargingPeriodsDimensionsTypeSTATEOFCHARGE   CdrBodyChargingPeriodsDimensionsType = "STATE_OF_CHARGE"
	CdrBodyChargingPeriodsDimensionsTypeTIME            CdrBodyChargingPeriodsDimensionsType = "TIME"
)

// Defines values for CdrBodyTariffsType.
const (
	CdrBodyTariffsTypeADHOCPAYMENT CdrBodyTariffsType = "AD_HOC_PAYMENT"
	CdrBodyTariffsTypePROFILECHEAP CdrBodyTariffsType = "PROFILE_CHEAP"
	CdrBodyTariffsTypePROFILEFAST  CdrBodyTariffsType = "PROFILE_FAST"
	CdrBodyTariffsTypePROFILEGREEN CdrBodyTariffsType = "PROFILE_GREEN"
	CdrBodyTariffsTypeREGULAR      CdrBodyTariffsType = "REGULAR"
)

// Defines values for CdrBodyTariffsElementsPriceComponents.
const (
	CdrBodyTariffsElementsPriceComponentsENERGY      CdrBodyTariffsElementsPriceComponents = "ENERGY"
	CdrBodyTariffsElementsPriceComponentsFLAT        CdrBodyTariffsElementsPriceComponents = "FLAT"
	CdrBodyTariffsElementsPriceComponentsPARKINGTIME CdrBodyTariffsElementsPriceComponents = "PARKING_TIME"
	CdrBodyTariffsElementsPriceComponentsTIME        CdrBodyTariffsElementsPriceComponents = "TIME"
)

// Defines values for CdrBodyTariffsElementsRestrictionsDayOfWeek.
const (
	CdrBodyTariffsElementsRestrictionsDayOfWeekFRIDAY    CdrBodyTariffsElementsRestrictionsDayOfWeek = "FRIDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekMONDAY    CdrBodyTariffsElementsRestrictionsDayOfWeek = "MONDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekSATURDAY  CdrBodyTariffsElementsRestrictionsDayOfWeek = "SATURDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekSUNDAY    CdrBodyTariffsElementsRestrictionsDayOfWeek = "SUNDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekTHURSDAY  CdrBodyTariffsElementsRestrictionsDayOfWeek = "THURSDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekTUESDAY   CdrBodyTariffsElementsRestrictionsDayOfWeek = "TUESDAY"
	CdrBodyTariffsElementsRestrictionsDayOfWeekWEDNESDAY CdrBodyTariffsElementsRestrictionsDayOfWeek = "WEDNESDAY"
)

// Defines values for CdrBodyTariffsElementsRestrictionsReservation.
const (
	CdrBodyTariffsElementsRestrictionsReservationRESERVATION        CdrBodyTariffsElementsRestrictionsReservation = "RESERVATION"
	CdrBodyTariffsElementsRestrictionsReservationRESERVATIONEXPIRES CdrBodyTariffsElementsRestrictionsReservation = "RESERVATION_EXPIRES"
)

// Defines values for CdrBodyTariffsEnergyMixEnergySourcesSource.
const (
	COAL          CdrBodyTariffsEnergyMixEnergySourcesSource = "COAL"
	GAS           CdrBodyTariffsEnergyMixEnergySourcesSource = "GAS"
	GENERALFOSSIL CdrBodyTariffsEnergyMixEnergySourcesSource = "GENERAL_FOSSIL"
	GENERALGREEN  CdrBodyTariffsEnergyMixEnergySourcesSource = "GENERAL_GREEN"
	NUCLEAR       CdrBodyTariffsEnergyMixEnergySourcesSource = "NUCLEAR"
	SOLAR         CdrBodyTariffsEnergyMixEnergySourcesSource = "SOLAR"
	WATER         CdrBodyTariffsEnergyMixEnergySourcesSource = "WATER"
	WIND          CdrBodyTariffsEnergyMixEnergySourcesSource = "WIND"
)

// Defines values for CdrBodyTariffsEnergyMixEnvironImpactCategory.
const (
	CdrBodyTariffsEnergyMixEnvironImpactCategoryCARBONDIOXIDE CdrBodyTariffsEnergyMixEnvironImpactCategory = "CARBON_DIOXIDE"
	CdrBodyTariffsEnergyMixEnvironImpactCategoryNUCLEARWASTE  CdrBodyTariffsEnergyMixEnvironImpactCategory = "NUCLEAR_WASTE"
)

// Defines values for ChargingPreferencesProfileType.
const (
	ChargingPreferencesProfileTypeCHEAP   ChargingPreferencesProfileType = "CHEAP"
	ChargingPreferencesProfileTypeFAST    ChargingPreferencesProfileType = "FAST"
	ChargingPreferencesProfileTypeGREEN   ChargingPreferencesProfileType = "GREEN"
	ChargingPreferencesProfileTypeREGULAR ChargingPreferencesProfileType = "REGULAR"
)

// Defines values for ChargingPreferencesResponseChargingPreferences.
const (
	ChargingPreferencesResponseChargingPreferencesACCEPTED                ChargingPreferencesResponseChargingPreferences = "ACCEPTED"
	ChargingPreferencesResponseChargingPreferencesDEPARTUREREQUIRED       ChargingPreferencesResponseChargingPreferences = "DEPARTURE_REQUIRED"
	ChargingPreferencesResponseChargingPreferencesENERGYNEEDREQUIRED      ChargingPreferencesResponseChargingPreferences = "ENERGY_NEED_REQUIRED"
	ChargingPreferencesResponseChargingPreferencesNOTPOSSIBLE             ChargingPreferencesResponseChargingPreferences = "NOT_POSSIBLE"
	ChargingPreferencesResponseChargingPreferencesPROFILETYPENOTSUPPORTED ChargingPreferencesResponseChargingPreferences = "PROFILE_TYPE_NOT_SUPPORTED"
)

// Defines values for ChargingProfileChargingRateUnit.
const (
	A ChargingProfileChargingRateUnit = "A"
	W ChargingProfileChargingRateUnit = "W"
)

// Defines values for ChargingProfileResponseType.
const (
	ChargingProfileResponseTypeACCEPTED       ChargingProfileResponseType = "ACCEPTED"
	ChargingProfileResponseTypeNOTSUPPORTED   ChargingProfileResponseType = "NOT_SUPPORTED"
	ChargingProfileResponseTypeREJECTED       ChargingProfileResponseType = "REJECTED"
	ChargingProfileResponseTypeTOOOFTEN       ChargingProfileResponseType = "TOO_OFTEN"
	ChargingProfileResponseTypeUNKNOWNSESSION ChargingProfileResponseType = "UNKNOWN_SESSION"
)

// Defines values for ChargingProfileResultResult.
const (
	ChargingProfileResultResultACCEPTED ChargingProfileResultResult = "ACCEPTED"
	ChargingProfileResultResultREJECTED ChargingProfileResultResult = "REJECTED"
	ChargingProfileResultResultUNKNOWN  ChargingProfileResultResult = "UNKNOWN"
)

// Defines values for ClearProfileResultResult.
const (
	ClearProfileResultResultACCEPTED ClearProfileResultResult = "ACCEPTED"
	ClearProfileResultResultREJECTED ClearProfileResultResult = "REJECTED"
	ClearProfileResultResultUNKNOWN  ClearProfileResultResult = "UNKNOWN"
)

// Defines values for ClientInfoRole.
const (
	ClientInfoRoleCPO   ClientInfoRole = "CPO"
	ClientInfoRoleEMSP  ClientInfoRole = "EMSP"
	ClientInfoRoleHUB   ClientInfoRole = "HUB"
	ClientInfoRoleNAP   ClientInfoRole = "NAP"
	ClientInfoRoleNSP   ClientInfoRole = "NSP"
	ClientInfoRoleOTHER ClientInfoRole = "OTHER"
	ClientInfoRoleSCSP  ClientInfoRole = "SCSP"
)

// Defines values for ClientInfoStatus.
const (
	ClientInfoStatusCONNECTED ClientInfoStatus = "CONNECTED"
	ClientInfoStatusOFFLINE   ClientInfoStatus = "OFFLINE"
	ClientInfoStatusPLANNED   ClientInfoStatus = "PLANNED"
	ClientInfoStatusSUSPENDED ClientInfoStatus = "SUSPENDED"
)

// Defines values for CommandResponseResult.
const (
	CommandResponseResultACCEPTED       CommandResponseResult = "ACCEPTED"
	CommandResponseResultNOTSUPPORTED   CommandResponseResult = "NOT_SUPPORTED"
	CommandResponseResultREJECTED       CommandResponseResult = "REJECTED"
	CommandResponseResultUNKNOWNSESSION CommandResponseResult = "UNKNOWN_SESSION"
)

// Defines values for CommandResultResult.
const (
	ACCEPTED            CommandResultResult = "ACCEPTED"
	CANCELEDRESERVATION CommandResultResult = "CANCELED_RESERVATION"
	EVSEINOPERATIVE     CommandResultResult = "EVSE_INOPERATIVE"
	EVSEOCCUPIED        CommandResultResult = "EVSE_OCCUPIED"
	FAILED              CommandResultResult = "FAILED"
	NOTSUPPORTED        CommandResultResult = "NOT_SUPPORTED"
	REJECTED            CommandResultResult = "REJECTED"
	TIMEOUT             CommandResultResult = "TIMEOUT"
	UNKNOWNRESERVATION  CommandResultResult = "UNKNOWN_RESERVATION"
)

// Defines values for ConnectorFormat.
const (
	ConnectorFormatCABLE  ConnectorFormat = "CABLE"
	ConnectorFormatSOCKET ConnectorFormat = "SOCKET"
)

// Defines values for ConnectorPowerType.
const (
	ConnectorPowerTypeAC1PHASE      ConnectorPowerType = "AC_1_PHASE"
	ConnectorPowerTypeAC2PHASE      ConnectorPowerType = "AC_2_PHASE"
	ConnectorPowerTypeAC2PHASESPLIT ConnectorPowerType = "AC_2_PHASE_SPLIT"
	ConnectorPowerTypeAC3PHASE      ConnectorPowerType = "AC_3_PHASE"
	ConnectorPowerTypeDC            ConnectorPowerType = "DC"
)

// Defines values for ConnectorStandard.
const (
	ConnectorStandardCHADEMO            ConnectorStandard = "CHADEMO"
	ConnectorStandardCHAOJI             ConnectorStandard = "CHAOJI"
	ConnectorStandardDOMESTICA          ConnectorStandard = "DOMESTIC_A"
	ConnectorStandardDOMESTICB          ConnectorStandard = "DOMESTIC_B"
	ConnectorStandardDOMESTICC          ConnectorStandard = "DOMESTIC_C"
	ConnectorStandardDOMESTICD          ConnectorStandard = "DOMESTIC_D"
	ConnectorStandardDOMESTICE          ConnectorStandard = "DOMESTIC_E"
	ConnectorStandardDOMESTICF          ConnectorStandard = "DOMESTIC_F"
	ConnectorStandardDOMESTICG          ConnectorStandard = "DOMESTIC_G"
	ConnectorStandardDOMESTICH          ConnectorStandard = "DOMESTIC_H"
	ConnectorStandardDOMESTICJ          ConnectorStandard = "DOMESTIC_J"
	ConnectorStandardDOMESTICK          ConnectorStandard = "DOMESTIC_K"
	ConnectorStandardDOMESTICL          ConnectorStandard = "DOMESTIC_L"
	ConnectorStandardDOMESTICM          ConnectorStandard = "DOMESTIC_M"
	ConnectorStandardDOMESTICN          ConnectorStandard = "DOMESTIC_N"
	ConnectorStandardDOMESTICO          ConnectorStandard = "DOMESTIC_O"
	ConnectorStandardGBTAC              ConnectorStandard = "GBT_AC"
	ConnectorStandardGBTDC              ConnectorStandard = "GBT_DC"
	ConnectorStandardIEC603092Single16  ConnectorStandard = "IEC_60309_2_single_16"
	ConnectorStandardIEC603092Three16   ConnectorStandard = "IEC_60309_2_three_16"
	ConnectorStandardIEC603092Three32   ConnectorStandard = "IEC_60309_2_three_32"
	ConnectorStandardIEC603092Three64   ConnectorStandard = "IEC_60309_2_three_64"
	ConnectorStandardIEC62196T1         ConnectorStandard = "IEC_62196_T1"
	ConnectorStandardIEC62196T1COMBO    ConnectorStandard = "IEC_62196_T1_COMBO"
	ConnectorStandardIEC62196T2         ConnectorStandard = "IEC_62196_T2"
	ConnectorStandardIEC62196T2COMBO    ConnectorStandard = "IEC_62196_T2_COMBO"
	ConnectorStandardIEC62196T3A        ConnectorStandard = "IEC_62196_T3A"
	ConnectorStandardIEC62196T3C        ConnectorStandard = "IEC_62196_T3C"
	ConnectorStandardNEMA1030           ConnectorStandard = "NEMA_10_30"
	ConnectorStandardNEMA1050           ConnectorStandard = "NEMA_10_50"
	ConnectorStandardNEMA1430           ConnectorStandard = "NEMA_14_30"
	ConnectorStandardNEMA1450           ConnectorStandard = "NEMA_14_50"
	ConnectorStandardNEMA520            ConnectorStandard = "NEMA_5_20"
	ConnectorStandardNEMA630            ConnectorStandard = "NEMA_6_30"
	ConnectorStandardNEMA650            ConnectorStandard = "NEMA_6_50"
	ConnectorStandardPANTOGRAPHBOTTOMUP ConnectorStandard = "PANTOGRAPH_BOTTOM_UP"
	ConnectorStandardPANTOGRAPHTOPDOWN  ConnectorStandard = "PANTOGRAPH_TOP_DOWN"
	ConnectorStandardTESLAR             ConnectorStandard = "TESLA_R"
	ConnectorStandardTESLAS             ConnectorStandard = "TESLA_S"
)

// Defines values for CredentialsDataRolesRole.
const (
	CredentialsDataRolesRoleCPO   CredentialsDataRolesRole = "CPO"
	CredentialsDataRolesRoleEMSP  CredentialsDataRolesRole = "EMSP"
	CredentialsDataRolesRoleHUB   CredentialsDataRolesRole = "HUB"
	CredentialsDataRolesRoleNAP   CredentialsDataRolesRole = "NAP"
	CredentialsDataRolesRoleNSP   CredentialsDataRolesRole = "NSP"
	CredentialsDataRolesRoleOTHER CredentialsDataRolesRole = "OTHER"
	CredentialsDataRolesRoleSCSP  CredentialsDataRolesRole = "SCSP"
)

// Defines values for CredentialsDataRolesBusinessDetailsLogoCategory.
const (
	CredentialsDataRolesBusinessDetailsLogoCategoryCHARGER  CredentialsDataRolesBusinessDetailsLogoCategory = "CHARGER"
	CredentialsDataRolesBusinessDetailsLogoCategoryENTRANCE CredentialsDataRolesBusinessDetailsLogoCategory = "ENTRANCE"
	CredentialsDataRolesBusinessDetailsLogoCategoryLOCATION CredentialsDataRolesBusinessDetailsLogoCategory = "LOCATION"
	CredentialsDataRolesBusinessDetailsLogoCategoryNETWORK  CredentialsDataRolesBusinessDetailsLogoCategory = "NETWORK"
	CredentialsDataRolesBusinessDetailsLogoCategoryOPERATOR CredentialsDataRolesBusinessDetailsLogoCategory = "OPERATOR"
	CredentialsDataRolesBusinessDetailsLogoCategoryOTHER    CredentialsDataRolesBusinessDetailsLogoCategory = "OTHER"
	CredentialsDataRolesBusinessDetailsLogoCategoryOWNER    CredentialsDataRolesBusinessDetailsLogoCategory = "OWNER"
)

// Defines values for DetailsDataVersion.
const (
	DetailsDataVersionN20  DetailsDataVersion = "2.0"
	DetailsDataVersionN21  DetailsDataVersion = "2.1"
	DetailsDataVersionN211 DetailsDataVersion = "2.1.1"
	DetailsDataVersionN22  DetailsDataVersion = "2.2"
	DetailsDataVersionN221 DetailsDataVersion = "2.2.1"
)

// Defines values for EnvironmentalImpactCategoryType.
const (
	EnvironmentalImpactCategoryTypeCARBONDIOXIDE EnvironmentalImpactCategoryType = "CARBON_DIOXIDE"
	EnvironmentalImpactCategoryTypeNUCLEARWASTE  EnvironmentalImpactCategoryType = "NUCLEAR_WASTE"
)

// Defines values for EvseCapabilities.
const (
	CHARGINGPREFERENCESCAPABLE    EvseCapabilities = "CHARGING_PREFERENCES_CAPABLE"
	CHARGINGPROFILECAPABLE        EvseCapabilities = "CHARGING_PROFILE_CAPABLE"
	CHIPCARDSUPPORT               EvseCapabilities = "CHIP_CARD_SUPPORT"
	CONTACTLESSCARDSUPPORT        EvseCapabilities = "CONTACTLESS_CARD_SUPPORT"
	CREDITCARDPAYABLE             EvseCapabilities = "CREDIT_CARD_PAYABLE"
	DEBITCARDPAYABLE              EvseCapabilities = "DEBIT_CARD_PAYABLE"
	PEDTERMINAL                   EvseCapabilities = "PED_TERMINAL"
	REMOTESTARTSTOPCAPABLE        EvseCapabilities = "REMOTE_START_STOP_CAPABLE"
	RESERVABLE                    EvseCapabilities = "RESERVABLE"
	RFIDREADER                    EvseCapabilities = "RFID_READER"
	STARTSESSIONCONNECTORREQUIRED EvseCapabilities = "START_SESSION_CONNECTOR_REQUIRED"
	TOKENGROUPCAPABLE             EvseCapabilities = "TOKEN_GROUP_CAPABLE"
	UNLOCKCAPABLE                 EvseCapabilities = "UNLOCK_CAPABLE"
)

// Defines values for EvseParkingRestrictions.
const (
	CUSTOMERS   EvseParkingRestrictions = "CUSTOMERS"
	DISABLED    EvseParkingRestrictions = "DISABLED"
	EVONLY      EvseParkingRestrictions = "EV_ONLY"
	MOTORCYCLES EvseParkingRestrictions = "MOTORCYCLES"
	PLUGGED     EvseParkingRestrictions = "PLUGGED"
)

// Defines values for EvseStatus.
const (
	EvseStatusAVAILABLE   EvseStatus = "AVAILABLE"
	EvseStatusBLOCKED     EvseStatus = "BLOCKED"
	EvseStatusCHARGING    EvseStatus = "CHARGING"
	EvseStatusINOPERATIVE EvseStatus = "INOPERATIVE"
	EvseStatusOUTOFORDER  EvseStatus = "OUTOFORDER"
	EvseStatusPLANNED     EvseStatus = "PLANNED"
	EvseStatusREMOVED     EvseStatus = "REMOVED"
	EvseStatusRESERVED    EvseStatus = "RESERVED"
	EvseStatusUNKNOWN     EvseStatus = "UNKNOWN"
)

// Defines values for EvseStatusScheduleStatus.
const (
	EvseStatusScheduleStatusAVAILABLE   EvseStatusScheduleStatus = "AVAILABLE"
	EvseStatusScheduleStatusBLOCKED     EvseStatusScheduleStatus = "BLOCKED"
	EvseStatusScheduleStatusCHARGING    EvseStatusScheduleStatus = "CHARGING"
	EvseStatusScheduleStatusINOPERATIVE EvseStatusScheduleStatus = "INOPERATIVE"
	EvseStatusScheduleStatusOUTOFORDER  EvseStatusScheduleStatus = "OUTOFORDER"
	EvseStatusScheduleStatusPLANNED     EvseStatusScheduleStatus = "PLANNED"
	EvseStatusScheduleStatusREMOVED     EvseStatusScheduleStatus = "REMOVED"
	EvseStatusScheduleStatusRESERVED    EvseStatusScheduleStatus = "RESERVED"
	EvseStatusScheduleStatusUNKNOWN     EvseStatusScheduleStatus = "UNKNOWN"
)

// Defines values for ImageCategory.
const (
	ImageCategoryCHARGER  ImageCategory = "CHARGER"
	ImageCategoryENTRANCE ImageCategory = "ENTRANCE"
	ImageCategoryLOCATION ImageCategory = "LOCATION"
	ImageCategoryNETWORK  ImageCategory = "NETWORK"
	ImageCategoryOPERATOR ImageCategory = "OPERATOR"
	ImageCategoryOTHER    ImageCategory = "OTHER"
	ImageCategoryOWNER    ImageCategory = "OWNER"
)

// Defines values for InterfaceRoleType.
const (
	RECEIVER InterfaceRoleType = "RECEIVER"
	SENDER   InterfaceRoleType = "SENDER"
)

// Defines values for LocationsDataFacilities.
const (
	LocationsDataFacilitiesAIRPORT        LocationsDataFacilities = "AIRPORT"
	LocationsDataFacilitiesBIKESHARING    LocationsDataFacilities = "BIKE_SHARING"
	LocationsDataFacilitiesBUSSTOP        LocationsDataFacilities = "BUS_STOP"
	LocationsDataFacilitiesCAFE           LocationsDataFacilities = "CAFE"
	LocationsDataFacilitiesCARPOOLPARKING LocationsDataFacilities = "CARPOOL_PARKING"
	LocationsDataFacilitiesFUELSTATION    LocationsDataFacilities = "FUEL_STATION"
	LocationsDataFacilitiesHOTEL          LocationsDataFacilities = "HOTEL"
	LocationsDataFacilitiesMALL           LocationsDataFacilities = "MALL"
	LocationsDataFacilitiesMETROSTATION   LocationsDataFacilities = "METRO_STATION"
	LocationsDataFacilitiesMUSEUM         LocationsDataFacilities = "MUSEUM"
	LocationsDataFacilitiesNATURE         LocationsDataFacilities = "NATURE"
	LocationsDataFacilitiesPARKINGLOT     LocationsDataFacilities = "PARKING_LOT"
	LocationsDataFacilitiesRECREATIONAREA LocationsDataFacilities = "RECREATION_AREA"
	LocationsDataFacilitiesRESTAURANT     LocationsDataFacilities = "RESTAURANT"
	LocationsDataFacilitiesSPORT          LocationsDataFacilities = "SPORT"
	LocationsDataFacilitiesSUPERMARKET    LocationsDataFacilities = "SUPERMARKET"
	LocationsDataFacilitiesTAXISTAND      LocationsDataFacilities = "TAXI_STAND"
	LocationsDataFacilitiesTRAINSTATION   LocationsDataFacilities = "TRAIN_STATION"
	LocationsDataFacilitiesTRAMSTOP       LocationsDataFacilities = "TRAM_STOP"
	LocationsDataFacilitiesWIFI           LocationsDataFacilities = "WIFI"
)

// Defines values for LocationsDataParkingType.
const (
	LocationsDataParkingTypeALONGMOTORWAY     LocationsDataParkingType = "ALONG_MOTORWAY"
	LocationsDataParkingTypeONDRIVEWAY        LocationsDataParkingType = "ON_DRIVEWAY"
	LocationsDataParkingTypeONSTREET          LocationsDataParkingType = "ON_STREET"
	LocationsDataParkingTypePARKINGGARAGE     LocationsDataParkingType = "PARKING_GARAGE"
	LocationsDataParkingTypePARKINGLOT        LocationsDataParkingType = "PARKING_LOT"
	LocationsDataParkingTypeUNDERGROUNDGARAGE LocationsDataParkingType = "UNDERGROUND_GARAGE"
)

// Defines values for LocationsDataPublishAllowedToType.
const (
	LocationsDataPublishAllowedToTypeADHOCUSER LocationsDataPublishAllowedToType = "AD_HOC_USER"
	LocationsDataPublishAllowedToTypeAPPUSER   LocationsDataPublishAllowedToType = "APP_USER"
	LocationsDataPublishAllowedToTypeOTHER     LocationsDataPublishAllowedToType = "OTHER"
	LocationsDataPublishAllowedToTypeRFID      LocationsDataPublishAllowedToType = "RFID"
)

// Defines values for ModuleIDType.
const (
	ModuleIDTypeCdrs             ModuleIDType = "cdrs"
	ModuleIDTypeChargingprofiles ModuleIDType = "chargingprofiles"
	ModuleIDTypeCommands         ModuleIDType = "commands"
	ModuleIDTypeCredentials      ModuleIDType = "credentials"
	ModuleIDTypeHubclientinfo    ModuleIDType = "hubclientinfo"
	ModuleIDTypeLocations        ModuleIDType = "locations"
	ModuleIDTypeSessions         ModuleIDType = "sessions"
	ModuleIDTypeTariffs          ModuleIDType = "tariffs"
	ModuleIDTypeTokens           ModuleIDType = "tokens"
)

// Defines values for ReservationRestrictionType.
const (
	ReservationRestrictionTypeRESERVATION        ReservationRestrictionType = "RESERVATION"
	ReservationRestrictionTypeRESERVATIONEXPIRES ReservationRestrictionType = "RESERVATION_EXPIRES"
)

// Defines values for SessionAuthMethod.
const (
	SessionAuthMethodAUTHREQUEST SessionAuthMethod = "AUTH_REQUEST"
	SessionAuthMethodCOMMAND     SessionAuthMethod = "COMMAND"
	SessionAuthMethodWHITELIST   SessionAuthMethod = "WHITELIST"
)

// Defines values for SessionStatus.
const (
	ACTIVE      SessionStatus = "ACTIVE"
	COMPLETED   SessionStatus = "COMPLETED"
	INVALID     SessionStatus = "INVALID"
	PENDING     SessionStatus = "PENDING"
	RESERVATION SessionStatus = "RESERVATION"
)

// Defines values for SessionChargingPeriodsDimensionsType.
const (
	AUTHREQUEST SessionChargingPeriodsDimensionsType = "AUTH_REQUEST"
	COMMAND     SessionChargingPeriodsDimensionsType = "COMMAND"
	WHITELIST   SessionChargingPeriodsDimensionsType = "WHITELIST"
)

// Defines values for TariffType.
const (
	TariffTypeADHOCPAYMENT TariffType = "AD_HOC_PAYMENT"
	TariffTypePROFILECHEAP TariffType = "PROFILE_CHEAP"
	TariffTypePROFILEFAST  TariffType = "PROFILE_FAST"
	TariffTypePROFILEGREEN TariffType = "PROFILE_GREEN"
	TariffTypeREGULAR      TariffType = "REGULAR"
)

// Defines values for TariffElementsPriceComponents.
const (
	ENERGY      TariffElementsPriceComponents = "ENERGY"
	FLAT        TariffElementsPriceComponents = "FLAT"
	PARKINGTIME TariffElementsPriceComponents = "PARKING_TIME"
	TIME        TariffElementsPriceComponents = "TIME"
)

// Defines values for TariffElementsRestrictionsDayOfWeek.
const (
	TariffElementsRestrictionsDayOfWeekFRIDAY    TariffElementsRestrictionsDayOfWeek = "FRIDAY"
	TariffElementsRestrictionsDayOfWeekMONDAY    TariffElementsRestrictionsDayOfWeek = "MONDAY"
	TariffElementsRestrictionsDayOfWeekSATURDAY  TariffElementsRestrictionsDayOfWeek = "SATURDAY"
	TariffElementsRestrictionsDayOfWeekSUNDAY    TariffElementsRestrictionsDayOfWeek = "SUNDAY"
	TariffElementsRestrictionsDayOfWeekTHURSDAY  TariffElementsRestrictionsDayOfWeek = "THURSDAY"
	TariffElementsRestrictionsDayOfWeekTUESDAY   TariffElementsRestrictionsDayOfWeek = "TUESDAY"
	TariffElementsRestrictionsDayOfWeekWEDNESDAY TariffElementsRestrictionsDayOfWeek = "WEDNESDAY"
)

// Defines values for TokenDefaultProfileType.
const (
	TokenDefaultProfileTypeCHEAP   TokenDefaultProfileType = "CHEAP"
	TokenDefaultProfileTypeFAST    TokenDefaultProfileType = "FAST"
	TokenDefaultProfileTypeGREEN   TokenDefaultProfileType = "GREEN"
	TokenDefaultProfileTypeREGULAR TokenDefaultProfileType = "REGULAR"
)

// Defines values for TokenType.
const (
	TokenTypeADHOCUSER TokenType = "AD_HOC_USER"
	TokenTypeAPPUSER   TokenType = "APP_USER"
	TokenTypeOTHER     TokenType = "OTHER"
	TokenTypeRFID      TokenType = "RFID"
)

// Defines values for TokenWhitelist.
const (
	ALLOWED        TokenWhitelist = "ALLOWED"
	ALLOWEDOFFLINE TokenWhitelist = "ALLOWED_OFFLINE"
	ALWAYS         TokenWhitelist = "ALWAYS"
	NEVER          TokenWhitelist = "NEVER"
)

// Defines values for VersionsDataVersion.
const (
	VersionsDataVersionN20  VersionsDataVersion = "2.0"
	VersionsDataVersionN21  VersionsDataVersion = "2.1"
	VersionsDataVersionN211 VersionsDataVersion = "2.1.1"
	VersionsDataVersionN22  VersionsDataVersion = "2.2"
	VersionsDataVersionN221 VersionsDataVersion = "2.2.1"
)

// Defines values for PostOcpiCommandsCommandParamsCommand.
const (
	PostOcpiCommandsCommandParamsCommandCANCELRESERVATION PostOcpiCommandsCommandParamsCommand = "CANCEL_RESERVATION"
	PostOcpiCommandsCommandParamsCommandRESERVENOW        PostOcpiCommandsCommandParamsCommand = "RESERVE_NOW"
	PostOcpiCommandsCommandParamsCommandSTARTSESSION      PostOcpiCommandsCommandParamsCommand = "START_SESSION"
	PostOcpiCommandsCommandParamsCommandSTOPSESSION       PostOcpiCommandsCommandParamsCommand = "STOP_SESSION"
	PostOcpiCommandsCommandParamsCommandUNLOCKCONNECTOR   PostOcpiCommandsCommandParamsCommand = "UNLOCK_CONNECTOR"
)

// Defines values for PostOcpiCommandsCommandUidParamsCommand.
const (
	PostOcpiCommandsCommandUidParamsCommandCANCELRESERVATION PostOcpiCommandsCommandUidParamsCommand = "CANCEL_RESERVATION"
	PostOcpiCommandsCommandUidParamsCommandRESERVENOW        PostOcpiCommandsCommandUidParamsCommand = "RESERVE_NOW"
	PostOcpiCommandsCommandUidParamsCommandSTARTSESSION      PostOcpiCommandsCommandUidParamsCommand = "START_SESSION"
	PostOcpiCommandsCommandUidParamsCommandSTOPSESSION       PostOcpiCommandsCommandUidParamsCommand = "STOP_SESSION"
	PostOcpiCommandsCommandUidParamsCommandUNLOCKCONNECTOR   PostOcpiCommandsCommandUidParamsCommand = "UNLOCK_CONNECTOR"
)

// Defines values for GetOcpiTokensCountryCodePartyIdTokenUidParamsType.
const (
	GetOcpiTokensCountryCodePartyIdTokenUidParamsTypeADHOCUSER GetOcpiTokensCountryCodePartyIdTokenUidParamsType = "AD_HOC_USER"
	GetOcpiTokensCountryCodePartyIdTokenUidParamsTypeAPPUSER   GetOcpiTokensCountryCodePartyIdTokenUidParamsType = "APP_USER"
	GetOcpiTokensCountryCodePartyIdTokenUidParamsTypeOTHER     GetOcpiTokensCountryCodePartyIdTokenUidParamsType = "OTHER"
	GetOcpiTokensCountryCodePartyIdTokenUidParamsTypeRFID      GetOcpiTokensCountryCodePartyIdTokenUidParamsType = "RFID"
)

// Defines values for PatchOcpiTokensCountryCodePartyIdTokenUidParamsType.
const (
	PatchOcpiTokensCountryCodePartyIdTokenUidParamsTypeADHOCUSER PatchOcpiTokensCountryCodePartyIdTokenUidParamsType = "AD_HOC_USER"
	PatchOcpiTokensCountryCodePartyIdTokenUidParamsTypeAPPUSER   PatchOcpiTokensCountryCodePartyIdTokenUidParamsType = "APP_USER"
	PatchOcpiTokensCountryCodePartyIdTokenUidParamsTypeOTHER     PatchOcpiTokensCountryCodePartyIdTokenUidParamsType = "OTHER"
	PatchOcpiTokensCountryCodePartyIdTokenUidParamsTypeRFID      PatchOcpiTokensCountryCodePartyIdTokenUidParamsType = "RFID"
)

// Defines values for PutOcpiTokensCountryCodePartyIdTokenUidParamsType.
const (
	PutOcpiTokensCountryCodePartyIdTokenUidParamsTypeADHOCUSER PutOcpiTokensCountryCodePartyIdTokenUidParamsType = "AD_HOC_USER"
	PutOcpiTokensCountryCodePartyIdTokenUidParamsTypeAPPUSER   PutOcpiTokensCountryCodePartyIdTokenUidParamsType = "APP_USER"
	PutOcpiTokensCountryCodePartyIdTokenUidParamsTypeOTHER     PutOcpiTokensCountryCodePartyIdTokenUidParamsType = "OTHER"
	PutOcpiTokensCountryCodePartyIdTokenUidParamsTypeRFID      PutOcpiTokensCountryCodePartyIdTokenUidParamsType = "RFID"
)

// Defines values for PostOcpiTokenUidAuthorizeParamsType.
const (
	ADHOCUSER PostOcpiTokenUidAuthorizeParamsType = "AD_HOC_USER"
	APPUSER   PostOcpiTokenUidAuthorizeParamsType = "APP_USER"
	OTHER     PostOcpiTokenUidAuthorizeParamsType = "OTHER"
	RFID      PostOcpiTokenUidAuthorizeParamsType = "RFID"
)

// OcpiChargingprofilePostRequest defines model for _ocpi_chargingprofile_post_request.
type OcpiChargingprofilePostRequest struct {
	union json.RawMessage
}

// OcpiCommandsCommandPostRequest defines model for _ocpi_commands__command__post_request.
type OcpiCommandsCommandPostRequest struct {
	union json.RawMessage
}

// OcpiLocationsLocationIdGet200Response defines model for _ocpi_locations__location_id__get_200_response.
type OcpiLocationsLocationIdGet200Response struct {
	union json.RawMessage
}

// ActiveChargingProfile defines model for activeChargingProfile.
type ActiveChargingProfile struct {
	ChargingProfile ChargingProfile `json:"charging_profile"`
	StartDateTime   string          `json:"start_date_time"`
}

// ActiveChargingProfileResult defines model for activeChargingProfileResult.
type ActiveChargingProfileResult struct {
	Profile *ActiveChargingProfileResultProfile `json:"profile,omitempty"`
	Result  ActiveChargingProfileResultResult   `json:"result"`
}

// ActiveChargingProfileResultResult defines model for ActiveChargingProfileResult.Result.
type ActiveChargingProfileResultResult string

// ActiveChargingProfileResultProfile defines model for activeChargingProfileResult_profile.
type ActiveChargingProfileResultProfile struct {
	ChargingProfile ChargingProfile `json:"charging_profile"`
	StartDateTime   string          `json:"start_date_time"`
}

// Authorization Changed name of the object from official docs due to colliding naming of info property
type Authorization struct {
	Allowed                AuthorizationAllowed    `json:"allowed"`
	AuthorizationReference *string                 `json:"authorization_reference,omitempty"`
	Info                   *CommandResponseMessage `json:"info,omitempty"`
	Location               *LocationReferences     `json:"location,omitempty"`
	Token                  Token                   `json:"token"`
}

// AuthorizationAllowed defines model for Authorization.Allowed.
type AuthorizationAllowed string

// BusinessDetails defines model for businessDetails.
type BusinessDetails struct {
	Logo    *CredentialsDataRolesBusinessDetailsLogo `json:"logo,omitempty"`
	Name    string                                   `json:"name"`
	Website *string                                  `json:"website,omitempty"`
}

// CancelReservation defines model for cancelReservation.
type CancelReservation struct {
	ReservationId string `json:"reservation_id"`
	ResponseUrl   string `json:"response_url"`
}

// CdrBody defines model for cdrBody.
type CdrBody struct {
	AuthMethod               CdrBodyAuthMethod       `json:"auth_method"`
	AuthorizationReference   *string                 `json:"authorization_reference,omitempty"`
	CdrLocation              CdrBodyCdrLocation      `json:"cdr_location"`
	CdrToken                 CdrBodyCdrToken         `json:"cdr_token"`
	ChargingPeriods          *CdrBodyChargingPeriods `json:"charging_periods,omitempty"`
	CountryCode              string                  `json:"country_code"`
	Credit                   *bool                   `json:"credit,omitempty"`
	CreditReferenceId        *string                 `json:"credit_reference_id,omitempty"`
	Currency                 string                  `json:"currency"`
	EndDateTime              string                  `json:"end_date_time"`
	HomeChargingCompensation *bool                   `json:"home_charging_compensation,omitempty"`
	Id                       string                  `json:"id"`
	InvoiceReferenceId       *string                 `json:"invoice_reference_id,omitempty"`
	LastUpdated              string                  `json:"last_updated"`
	MeterId                  *string                 `json:"meter_id,omitempty"`
	PartyId                  string                  `json:"party_id"`
	Remark                   *string                 `json:"remark,omitempty"`
	SessionId                *string                 `json:"session_id,omitempty"`
	SignedData               *CdrBodySignedData      `json:"signed_data,omitempty"`
	StartDateTime            string                  `json:"start_date_time"`
	Tariffs                  *CdrBodyTariffs         `json:"tariffs,omitempty"`
	TotalCost                Price                   `json:"total_cost"`
	TotalEnergy              float32                 `json:"total_energy"`
	TotalEnergyCost          *Price                  `json:"total_energy_cost,omitempty"`
	TotalFixedCost           *Price                  `json:"total_fixed_cost,omitempty"`
	TotalParkingCost         *Price                  `json:"total_parking_cost,omitempty"`
	TotalParkingTime         *float32                `json:"total_parking_time,omitempty"`
	TotalReservationCost     *Price                  `json:"total_reservation_cost,omitempty"`
	TotalTime                float32                 `json:"total_time"`
	TotalTimeCost            *Price                  `json:"total_time_cost,omitempty"`
}

// CdrBodyAuthMethod defines model for CdrBody.AuthMethod.
type CdrBodyAuthMethod string

// CdrBodyCdrLocation defines model for cdrBody_cdr_location.
type CdrBodyCdrLocation struct {
	Address            *string                               `json:"address,omitempty"`
	City               *string                               `json:"city,omitempty"`
	ConnectorFormat    *CdrBodyCdrLocationConnectorFormat    `json:"connector_format,omitempty"`
	ConnectorId        *string                               `json:"connector_id,omitempty"`
	ConnectorPowerType *CdrBodyCdrLocationConnectorPowerType `json:"connector_power_type,omitempty"`
	ConnectorStandard  *CdrBodyCdrLocationConnectorStandard  `json:"connector_standard,omitempty"`
	Coordinates        *CdrBodyCdrLocationCoordinates        `json:"coordinates,omitempty"`
	Country            *string                               `json:"country,omitempty"`
	EvseId             *string                               `json:"evse_id,omitempty"`
	EvseUid            *string                               `json:"evse_uid,omitempty"`
	Id                 *string                               `json:"id,omitempty"`
	Name               *string                               `json:"name,omitempty"`
	PostalCode         *string                               `json:"postal_code,omitempty"`
	State              *string                               `json:"state,omitempty"`
}

// CdrBodyCdrLocationConnectorFormat defines model for CdrBodyCdrLocation.ConnectorFormat.
type CdrBodyCdrLocationConnectorFormat string

// CdrBodyCdrLocationConnectorPowerType defines model for CdrBodyCdrLocation.ConnectorPowerType.
type CdrBodyCdrLocationConnectorPowerType string

// CdrBodyCdrLocationConnectorStandard defines model for CdrBodyCdrLocation.ConnectorStandard.
type CdrBodyCdrLocationConnectorStandard string

// CdrBodyCdrLocationCoordinates defines model for cdrBody_cdr_location_coordinates.
type CdrBodyCdrLocationCoordinates struct {
	Latitude  string `json:"latitude"`
	Longitude string `json:"longitude"`
}

// CdrBodyCdrToken defines model for cdrBody_cdr_token.
type CdrBodyCdrToken struct {
	ContractId  string              `json:"contract_id"`
	CountryCode string              `json:"country_code"`
	PartyId     string              `json:"party_id"`
	Type        CdrBodyCdrTokenType `json:"type"`
	Uid         string              `json:"uid"`
}

// CdrBodyCdrTokenType defines model for CdrBodyCdrToken.Type.
type CdrBodyCdrTokenType string

// CdrBodyChargingPeriods defines model for cdrBody_charging_periods.
type CdrBodyChargingPeriods struct {
	Dimensions    *CdrBodyChargingPeriodsDimensions `json:"dimensions,omitempty"`
	StartDateTime string                            `json:"start_date_time"`
	TariffId      *string                           `json:"tariff_id,omitempty"`
}

// CdrBodyChargingPeriodsDimensions defines model for cdrBody_charging_periods_dimensions.
type CdrBodyChargingPeriodsDimensions struct {
	Type   CdrBodyChargingPeriodsDimensionsType `json:"type"`
	Volume float32                              `json:"volume"`
}

// CdrBodyChargingPeriodsDimensionsType defines model for CdrBodyChargingPeriodsDimensions.Type.
type CdrBodyChargingPeriodsDimensionsType string

// CdrBodySignedData defines model for cdrBody_signed_data.
type CdrBodySignedData struct {
	EncodingMethod        string                         `json:"encoding_method"`
	EncodingMethodVersion *int                           `json:"encoding_method_version,omitempty"`
	PublicKey             *string                        `json:"public_key,omitempty"`
	SignedValues          *CdrBodySignedDataSignedValues `json:"signed_values,omitempty"`
	Url                   *string                        `json:"url,omitempty"`
}

// CdrBodySignedDataSignedValues defines model for cdrBody_signed_data_signed_values.
type CdrBodySignedDataSignedValues struct {
	Nature     string `json:"nature"`
	PlainData  string `json:"plain_data"`
	SignedData string `json:"signed_data"`
}

// CdrBodyTariffs defines model for cdrBody_tariffs.
type CdrBodyTariffs struct {
	CountryCode   string                       `json:"country_code"`
	Currency      string                       `json:"currency"`
	Elements      *CdrBodyTariffsElements      `json:"elements,omitempty"`
	EndDateTime   *string                      `json:"end_date_time,omitempty"`
	EnergyMix     *CdrBodyTariffsEnergyMix     `json:"energy_mix,omitempty"`
	Id            string                       `json:"id"`
	LastUpdated   string                       `json:"last_updated"`
	MaxPrice      *Price                       `json:"max_price,omitempty"`
	MinPrice      *Price                       `json:"min_price,omitempty"`
	PartyId       string                       `json:"party_id"`
	StartDateTime *string                      `json:"start_date_time,omitempty"`
	TariffAltText *CdrBodyTariffsTariffAltText `json:"tariff_alt_text,omitempty"`
	TariffAltUrl  *string                      `json:"tariff_alt_url,omitempty"`
	Type          *CdrBodyTariffsType          `json:"type,omitempty"`
}

// CdrBodyTariffsType defines model for CdrBodyTariffs.Type.
type CdrBodyTariffsType string

// CdrBodyTariffsElements defines model for cdrBody_tariffs_elements.
type CdrBodyTariffsElements struct {
	PriceComponents *CdrBodyTariffsElementsPriceComponents `json:"price_components,omitempty"`
	Restrictions    *CdrBodyTariffsElementsRestrictions    `json:"restrictions,omitempty"`
}

// CdrBodyTariffsElementsPriceComponents defines model for CdrBodyTariffsElements.PriceComponents.
type CdrBodyTariffsElementsPriceComponents string

// CdrBodyTariffsElementsRestrictions defines model for cdrBody_tariffs_elements_restrictions.
type CdrBodyTariffsElementsRestrictions struct {
	DayOfWeek   *CdrBodyTariffsElementsRestrictionsDayOfWeek   `json:"day_of_week,omitempty"`
	EndDate     *string                                        `json:"end_date,omitempty"`
	EndTime     *string                                        `json:"end_time,omitempty"`
	MaxCurrent  *float32                                       `json:"max_current,omitempty"`
	MaxDuration *int                                           `json:"max_duration,omitempty"`
	MaxKwh      *float32                                       `json:"max_kwh,omitempty"`
	MaxPower    *float32                                       `json:"max_power,omitempty"`
	MinCurrent  *float32                                       `json:"min_current,omitempty"`
	MinDuration *int                                           `json:"min_duration,omitempty"`
	MinKwh      *float32                                       `json:"min_kwh,omitempty"`
	MinPower    *float32                                       `json:"min_power,omitempty"`
	Reservation *CdrBodyTariffsElementsRestrictionsReservation `json:"reservation,omitempty"`
	StartDate   *string                                        `json:"start_date,omitempty"`
	StartTime   *string                                        `json:"start_time,omitempty"`
}

// CdrBodyTariffsElementsRestrictionsDayOfWeek defines model for CdrBodyTariffsElementsRestrictions.DayOfWeek.
type CdrBodyTariffsElementsRestrictionsDayOfWeek string

// CdrBodyTariffsElementsRestrictionsReservation defines model for CdrBodyTariffsElementsRestrictions.Reservation.
type CdrBodyTariffsElementsRestrictionsReservation string

// CdrBodyTariffsEnergyMix defines model for cdrBody_tariffs_energy_mix.
type CdrBodyTariffsEnergyMix struct {
	EnergyProductName *string                               `json:"energy_product_name,omitempty"`
	EnergySources     *CdrBodyTariffsEnergyMixEnergySources `json:"energy_sources,omitempty"`
	EnvironImpact     *CdrBodyTariffsEnergyMixEnvironImpact `json:"environ_impact,omitempty"`
	IsGreenEnergy     bool                                  `json:"is_green_energy"`
	SupplierName      *string                               `json:"supplier_name,omitempty"`
}

// CdrBodyTariffsEnergyMixEnergySources defines model for cdrBody_tariffs_energy_mix_energy_sources.
type CdrBodyTariffsEnergyMixEnergySources struct {
	Percentage float32                                    `json:"percentage"`
	Source     CdrBodyTariffsEnergyMixEnergySourcesSource `json:"source"`
}

// CdrBodyTariffsEnergyMixEnergySourcesSource defines model for CdrBodyTariffsEnergyMixEnergySources.Source.
type CdrBodyTariffsEnergyMixEnergySourcesSource string

// CdrBodyTariffsEnergyMixEnvironImpact defines model for cdrBody_tariffs_energy_mix_environ_impact.
type CdrBodyTariffsEnergyMixEnvironImpact struct {
	Amount   float32                                      `json:"amount"`
	Category CdrBodyTariffsEnergyMixEnvironImpactCategory `json:"category"`
}

// CdrBodyTariffsEnergyMixEnvironImpactCategory defines model for CdrBodyTariffsEnergyMixEnvironImpact.Category.
type CdrBodyTariffsEnergyMixEnvironImpactCategory string

// CdrBodyTariffsTariffAltText defines model for cdrBody_tariffs_tariff_alt_text.
type CdrBodyTariffsTariffAltText struct {
	Language string `json:"language"`
	Text     string `json:"text"`
}

// CdrResponse defines model for cdrResponse.
type CdrResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
	Url           string  `json:"url"`
}

// CdrsResponse defines model for cdrsResponse.
type CdrsResponse struct {
	Cdrs          *CdrBody `json:"cdrs,omitempty"`
	StatusCode    float32  `json:"status_code"`
	StatusMessage *string  `json:"status_message,omitempty"`
	TimeStamp     *string  `json:"timeStamp,omitempty"`
}

// ChargingPreferences defines model for chargingPreferences.
type ChargingPreferences struct {
	DepartureTime *string                        `json:"departure_time,omitempty"`
	EnergyNeed    *float32                       `json:"energy_need,omitempty"`
	ProfileType   ChargingPreferencesProfileType `json:"profile_type"`
}

// ChargingPreferencesProfileType defines model for ChargingPreferences.ProfileType.
type ChargingPreferencesProfileType string

// ChargingPreferencesResponse defines model for chargingPreferencesResponse.
type ChargingPreferencesResponse struct {
	ChargingPreferences ChargingPreferencesResponseChargingPreferences `json:"charging_preferences"`
	StatusCode          float32                                        `json:"status_code"`
	StatusMessage       *string                                        `json:"status_message,omitempty"`
	TimeStamp           *string                                        `json:"timeStamp,omitempty"`
}

// ChargingPreferencesResponseChargingPreferences defines model for ChargingPreferencesResponse.ChargingPreferences.
type ChargingPreferencesResponseChargingPreferences string

// ChargingProfile defines model for chargingProfile.
type ChargingProfile struct {
	ChargingProfilePeriod *ChargingProfileChargingProfilePeriod `json:"charging_profile_period,omitempty"`
	ChargingRateUnit      ChargingProfileChargingRateUnit       `json:"charging_rate_unit"`
	Duration              *int                                  `json:"duration,omitempty"`
	MinChargingRate       *float32                              `json:"min_charging_rate,omitempty"`
	StartDateTime         *string                               `json:"start_date_time,omitempty"`
}

// ChargingProfileChargingRateUnit defines model for ChargingProfile.ChargingRateUnit.
type ChargingProfileChargingRateUnit string

// ChargingProfileResponse defines model for chargingProfileResponse.
type ChargingProfileResponse struct {
	// Result Response to the ChargingProfile request from the eMSP to the CPO.
	Result  ChargingProfileResponseType `json:"result"`
	Timeout int                         `json:"timeout"`
}

// ChargingProfileResponseType Response to the ChargingProfile request from the eMSP to the CPO.
type ChargingProfileResponseType string

// ChargingProfileResult defines model for chargingProfileResult.
type ChargingProfileResult struct {
	Result ChargingProfileResultResult `json:"result"`
}

// ChargingProfileResultResult defines model for ChargingProfileResult.Result.
type ChargingProfileResultResult string

// ChargingProfileChargingProfilePeriod defines model for chargingProfile_charging_profile_period.
type ChargingProfileChargingProfilePeriod struct {
	Limit       float32 `json:"limit"`
	StartPeriod int     `json:"start_period"`
}

// ChargingProfilesResponse defines model for chargingProfilesResponse.
type ChargingProfilesResponse struct {
	ChargingProfile *ChargingProfileResponse `json:"chargingProfile,omitempty"`
	StatusCode      float32                  `json:"status_code"`
	StatusMessage   *string                  `json:"status_message,omitempty"`
	TimeStamp       *string                  `json:"timeStamp,omitempty"`
}

// ClearProfileResult defines model for clearProfileResult.
type ClearProfileResult struct {
	Result ClearProfileResultResult `json:"result"`
}

// ClearProfileResultResult defines model for ClearProfileResult.Result.
type ClearProfileResultResult string

// ClientInfo defines model for clientInfo.
type ClientInfo struct {
	CountryCode string           `json:"country_code"`
	LastUpdated string           `json:"last_updated"`
	PartyId     string           `json:"party_id"`
	Role        ClientInfoRole   `json:"role"`
	Status      ClientInfoStatus `json:"status"`
}

// ClientInfoRole defines model for ClientInfo.Role.
type ClientInfoRole string

// ClientInfoStatus defines model for ClientInfo.Status.
type ClientInfoStatus string

// ClientInfoResponse defines model for clientInfoResponse.
type ClientInfoResponse struct {
	ClientsInfo   *ClientInfo `json:"clients_info,omitempty"`
	StatusCode    float32     `json:"status_code"`
	StatusMessage *string     `json:"status_message,omitempty"`
	TimeStamp     *string     `json:"timeStamp,omitempty"`
}

// ClientsInfoResponse defines model for clientsInfoResponse.
type ClientsInfoResponse struct {
	ClientInfo    ClientInfo `json:"client_info"`
	StatusCode    float32    `json:"status_code"`
	StatusMessage *string    `json:"status_message,omitempty"`
	TimeStamp     *string    `json:"timeStamp,omitempty"`
}

// CommandResponse defines model for commandResponse.
type CommandResponse struct {
	Message *CommandResponseMessage `json:"message,omitempty"`
	Result  CommandResponseResult   `json:"result"`
	Timeout int                     `json:"timeout"`
}

// CommandResponseResult defines model for CommandResponse.Result.
type CommandResponseResult string

// CommandResponseMessage defines model for commandResponse_message.
type CommandResponseMessage struct {
	Language string `json:"language"`
	Text     string `json:"text"`
}

// CommandResult defines model for commandResult.
type CommandResult struct {
	Message *CommandResponseMessage `json:"message,omitempty"`
	Result  CommandResultResult     `json:"result"`
}

// CommandResultResult defines model for CommandResult.Result.
type CommandResultResult string

// Connector defines model for connector.
type Connector struct {
	Format             ConnectorFormat    `json:"format"`
	Id                 string             `json:"id"`
	LastUpdated        string             `json:"last_updated"`
	MaxAmperage        int                `json:"max_amperage"`
	MaxElectricPower   *int               `json:"max_electric_power,omitempty"`
	MaxVoltage         int                `json:"max_voltage"`
	PowerType          ConnectorPowerType `json:"power_type"`
	Standard           ConnectorStandard  `json:"standard"`
	TariffIds          *string            `json:"tariff_ids,omitempty"`
	TermsAndConditions *string            `json:"terms_and_conditions,omitempty"`
}

// ConnectorFormat defines model for Connector.Format.
type ConnectorFormat string

// ConnectorPowerType defines model for Connector.PowerType.
type ConnectorPowerType string

// ConnectorStandard defines model for Connector.Standard.
type ConnectorStandard string

// Credentials defines model for credentials.
type Credentials struct {
	Data          *CredentialsData `json:"data,omitempty"`
	StatusCode    float32          `json:"status_code"`
	StatusMessage *string          `json:"status_message,omitempty"`
	TimeStamp     *string          `json:"timeStamp,omitempty"`
}

// CredentialsData defines model for credentials_data.
type CredentialsData struct {
	Roles *CredentialsDataRoles `json:"roles,omitempty"`
	Token string                `json:"token"`
	Url   string                `json:"url"`
}

// CredentialsDataRoles defines model for credentials_data_roles.
type CredentialsDataRoles struct {
	BusinessDetails CredentialsDataRolesBusinessDetails `json:"business_details"`
	CountryCode     string                              `json:"country_code"`
	PartyId         string                              `json:"party_id"`
	Role            CredentialsDataRolesRole            `json:"role"`
}

// CredentialsDataRolesRole defines model for CredentialsDataRoles.Role.
type CredentialsDataRolesRole string

// CredentialsDataRolesBusinessDetails defines model for credentials_data_roles_business_details.
type CredentialsDataRolesBusinessDetails struct {
	Logo    *CredentialsDataRolesBusinessDetailsLogo `json:"logo,omitempty"`
	Name    string                                   `json:"name"`
	Website *string                                  `json:"website,omitempty"`
}

// CredentialsDataRolesBusinessDetailsLogo defines model for credentials_data_roles_business_details_logo.
type CredentialsDataRolesBusinessDetailsLogo struct {
	Category  CredentialsDataRolesBusinessDetailsLogoCategory `json:"category"`
	Height    *float32                                        `json:"height,omitempty"`
	Thumbnail *string                                         `json:"thumbnail,omitempty"`
	Type      string                                          `json:"type"`
	Url       string                                          `json:"url"`
	Width     *float32                                        `json:"width,omitempty"`
}

// CredentialsDataRolesBusinessDetailsLogoCategory defines model for CredentialsDataRolesBusinessDetailsLogo.Category.
type CredentialsDataRolesBusinessDetailsLogoCategory string

// Details defines model for details.
type Details struct {
	Data          *DetailsData `json:"data,omitempty"`
	StatusCode    float32      `json:"status_code"`
	StatusMessage *string      `json:"status_message,omitempty"`
	TimeStamp     *string      `json:"timeStamp,omitempty"`
}

// DetailsData defines model for details_data.
type DetailsData struct {
	Endpoints *DetailsDataEndpoints `json:"endpoints,omitempty"`
	Version   DetailsDataVersion    `json:"version"`
}

// DetailsDataVersion defines model for DetailsData.Version.
type DetailsDataVersion string

// DetailsDataEndpoints defines model for details_data_endpoints.
type DetailsDataEndpoints struct {
	// Identifier OCPI 2.2.1 modules
	Identifier ModuleIDType `json:"identifier"`

	// Role Interface role endpoint implements.
	Role InterfaceRoleType `json:"role"`

	// Url URL to the endpoint.
	Url string `json:"url"`
}

// EnvironmentalImpactCategoryType Categories of environmental impact values
type EnvironmentalImpactCategoryType string

// Evse defines model for evse.
type Evse struct {
	Capabilities        *EvseCapabilities              `json:"capabilities,omitempty"`
	Connectors          *Connector                     `json:"connectors,omitempty"`
	Coordinates         *CdrBodyCdrLocationCoordinates `json:"coordinates,omitempty"`
	Directions          *CdrBodyTariffsTariffAltText   `json:"directions,omitempty"`
	EvseId              *string                        `json:"evse_id,omitempty"`
	FloorLevel          *string                        `json:"floor_level,omitempty"`
	Images              *Image                         `json:"images,omitempty"`
	LastUpdated         string                         `json:"last_updated"`
	ParkingRestrictions *EvseParkingRestrictions       `json:"parking_restrictions,omitempty"`
	PhysicalReference   *string                        `json:"physical_reference,omitempty"`
	Status              EvseStatus                     `json:"status"`
	StatusSchedule      *EvseStatusSchedule            `json:"status_schedule,omitempty"`
	Uid                 string                         `json:"uid"`
}

// EvseCapabilities defines model for Evse.Capabilities.
type EvseCapabilities string

// EvseParkingRestrictions defines model for Evse.ParkingRestrictions.
type EvseParkingRestrictions string

// EvseStatus defines model for Evse.Status.
type EvseStatus string

// EvseStatusSchedule defines model for evse_status_schedule.
type EvseStatusSchedule struct {
	PeriodBegin string                   `json:"period_begin"`
	PeriodEnd   *string                  `json:"period_end,omitempty"`
	Status      EvseStatusScheduleStatus `json:"status"`
}

// EvseStatusScheduleStatus defines model for EvseStatusSchedule.Status.
type EvseStatusScheduleStatus string

// GenericError defines model for genericError.
type GenericError struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     string  `json:"timeStamp"`
}

// GenericResponse defines model for genericResponse.
type GenericResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     string  `json:"timeStamp"`
}

// Image defines model for image.
type Image struct {
	Category  ImageCategory `json:"category"`
	Height    *float32      `json:"height,omitempty"`
	Thumbnail *string       `json:"thumbnail,omitempty"`
	Type      string        `json:"type"`
	Url       string        `json:"url"`
	Width     *float32      `json:"width,omitempty"`
}

// ImageCategory defines model for Image.Category.
type ImageCategory string

// InterfaceRoleType Interface role endpoint implements.
type InterfaceRoleType string

// LocationReferences defines model for locationReferences.
type LocationReferences struct {
	EvseUids   *string `json:"evse_uids,omitempty"`
	LocationId string  `json:"location_id"`
}

// Locations defines model for locations.
type Locations struct {
	Data          *LocationsData `json:"data,omitempty"`
	StatusCode    float32        `json:"status_code"`
	StatusMessage *string        `json:"status_message,omitempty"`
	TimeStamp     *string        `json:"timeStamp,omitempty"`
}

// LocationsData defines model for locations_data.
type LocationsData struct {
	Address            string                         `json:"address"`
	ChargingWhenClosed *bool                          `json:"charging_when_closed,omitempty"`
	City               string                         `json:"city"`
	Coordinates        CdrBodyCdrLocationCoordinates  `json:"coordinates"`
	Country            string                         `json:"country"`
	CountryCode        *string                        `json:"country_code,omitempty"`
	Directions         *CdrBodyTariffsTariffAltText   `json:"directions,omitempty"`
	EnergyMix          *CdrBodyTariffsEnergyMix       `json:"energy_mix,omitempty"`
	Evses              *Evse                          `json:"evses,omitempty"`
	Facilities         *LocationsDataFacilities       `json:"facilities,omitempty"`
	Id                 *string                        `json:"id,omitempty"`
	Images             *Image                         `json:"images,omitempty"`
	LastUpdated        string                         `json:"last_updated"`
	Name               *string                        `json:"name,omitempty"`
	OpeningTimes       *LocationsDataOpeningTimes     `json:"opening_times,omitempty"`
	Operator           *BusinessDetails               `json:"operator,omitempty"`
	Owner              *BusinessDetails               `json:"owner,omitempty"`
	ParkingType        *LocationsDataParkingType      `json:"parking_type,omitempty"`
	PartyId            *string                        `json:"party_id,omitempty"`
	PostalCode         *string                        `json:"postal_code,omitempty"`
	Publish            *bool                          `json:"publish,omitempty"`
	PublishAllowedTo   *LocationsDataPublishAllowedTo `json:"publish_allowed_to,omitempty"`
	RelatedLocations   *LocationsDataRelatedLocations `json:"related_locations,omitempty"`
	State              *string                        `json:"state,omitempty"`
	Suboperator        *BusinessDetails               `json:"suboperator,omitempty"`
	TimeZone           string                         `json:"time_zone"`
}

// LocationsDataFacilities defines model for LocationsData.Facilities.
type LocationsDataFacilities string

// LocationsDataParkingType defines model for LocationsData.ParkingType.
type LocationsDataParkingType string

// LocationsDataOpeningTimes defines model for locations_data_opening_times.
type LocationsDataOpeningTimes struct {
	ExceptionalClosings *LocationsDataOpeningTimesExceptionalOpenings `json:"exceptional_closings,omitempty"`
	ExceptionalOpenings *LocationsDataOpeningTimesExceptionalOpenings `json:"exceptional_openings,omitempty"`
	RegularHours        *LocationsDataOpeningTimesRegularHours        `json:"regular_hours,omitempty"`
	Twentyfourseven     bool                                          `json:"twentyfourseven"`
}

// LocationsDataOpeningTimesExceptionalOpenings defines model for locations_data_opening_times_exceptional_openings.
type LocationsDataOpeningTimesExceptionalOpenings struct {
	PeriodBegin string `json:"period_begin"`
	PeriodEnd   string `json:"period_end"`
}

// LocationsDataOpeningTimesRegularHours defines model for locations_data_opening_times_regular_hours.
type LocationsDataOpeningTimesRegularHours struct {
	PeriodBegin string `json:"period_begin"`
	PeriodEnd   string `json:"period_end"`
	Weekday     int    `json:"weekday"`
}

// LocationsDataPublishAllowedTo defines model for locations_data_publish_allowed_to.
type LocationsDataPublishAllowedTo struct {
	GroupId      *string                            `json:"group_id,omitempty"`
	Issuer       *string                            `json:"issuer,omitempty"`
	Type         *LocationsDataPublishAllowedToType `json:"type,omitempty"`
	Uid          *string                            `json:"uid,omitempty"`
	VisualNumber *string                            `json:"visual_number,omitempty"`
}

// LocationsDataPublishAllowedToType defines model for LocationsDataPublishAllowedTo.Type.
type LocationsDataPublishAllowedToType string

// LocationsDataRelatedLocations defines model for locations_data_related_locations.
type LocationsDataRelatedLocations struct {
	Latitude  string                       `json:"latitude"`
	Longitude string                       `json:"longitude"`
	Name      *CdrBodyTariffsTariffAltText `json:"name,omitempty"`
}

// ModuleIDType OCPI 2.2.1 modules
type ModuleIDType string

// Price defines model for price.
type Price struct {
	ExclVat float32  `json:"excl_vat"`
	InclVat *float32 `json:"incl_vat,omitempty"`
}

// ReservationRestrictionType defines model for reservationRestrictionType.
type ReservationRestrictionType string

// ReserveNow defines model for reserveNow.
type ReserveNow struct {
	AuthorizationReference *string `json:"authorization_reference,omitempty"`
	EvseUid                *string `json:"evse_uid,omitempty"`
	ExpiryDate             string  `json:"expiry_date"`
	LocationId             string  `json:"location_id"`
	ReservationId          string  `json:"reservation_id"`
	ResponseUrl            string  `json:"response_url"`
	Token                  Token   `json:"token"`
}

// Session defines model for session.
type Session struct {
	AuthMethod             SessionAuthMethod       `json:"auth_method"`
	AuthorizationReference *string                 `json:"authorization_reference,omitempty"`
	CdrToken               CdrBodyCdrToken         `json:"cdr_token"`
	ChargingPeriods        *SessionChargingPeriods `json:"charging_periods,omitempty"`
	ConnectorId            string                  `json:"connector_id"`
	CountryCode            string                  `json:"country_code"`
	Currency               string                  `json:"currency"`
	EndDateTime            *string                 `json:"end_date_time,omitempty"`
	EvseUid                string                  `json:"evse_uid"`
	Id                     string                  `json:"id"`
	Kwh                    float32                 `json:"kwh"`
	LastUpdated            string                  `json:"last_updated"`
	LocationId             string                  `json:"location_id"`
	MeterId                *string                 `json:"meter_id,omitempty"`
	PartyId                string                  `json:"party_id"`
	StartDateTime          string                  `json:"start_date_time"`
	Status                 SessionStatus           `json:"status"`
	TotalCosts             *SessionTotalCosts      `json:"total_costs,omitempty"`
}

// SessionAuthMethod defines model for Session.AuthMethod.
type SessionAuthMethod string

// SessionStatus defines model for Session.Status.
type SessionStatus string

// SessionResponse defines model for sessionResponse.
type SessionResponse struct {
	Session       Session `json:"session"`
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
}

// SessionChargingPeriods defines model for session_charging_periods.
type SessionChargingPeriods struct {
	Dimensions    *SessionChargingPeriodsDimensions `json:"dimensions,omitempty"`
	StartDateTime string                            `json:"start_date_time"`
	TariffId      *string                           `json:"tariff_id,omitempty"`
}

// SessionChargingPeriodsDimensions defines model for session_charging_periods_dimensions.
type SessionChargingPeriodsDimensions struct {
	Type   SessionChargingPeriodsDimensionsType `json:"type"`
	Volume float32                              `json:"volume"`
}

// SessionChargingPeriodsDimensionsType defines model for SessionChargingPeriodsDimensions.Type.
type SessionChargingPeriodsDimensionsType string

// SessionTotalCosts defines model for session_total_costs.
type SessionTotalCosts struct {
	ExclVat float32  `json:"excl_vat"`
	InclVat *float32 `json:"incl_vat,omitempty"`
}

// SessionsResponse defines model for sessionsResponse.
type SessionsResponse struct {
	Sessions      *Session `json:"sessions,omitempty"`
	StatusCode    float32  `json:"status_code"`
	StatusMessage *string  `json:"status_message,omitempty"`
	TimeStamp     *string  `json:"timeStamp,omitempty"`
}

// SetChargingProfile defines model for setChargingProfile.
type SetChargingProfile struct {
	ChargingProfile ChargingProfile `json:"charging_profile"`
	ResponseUrl     string          `json:"response_url"`
}

// StartSession defines model for startSession.
type StartSession struct {
	AuthorizationReference *string `json:"authorization_reference,omitempty"`
	ConnectorId            *string `json:"connector_id,omitempty"`
	EvseUid                *string `json:"evse_uid,omitempty"`
	LocationId             string  `json:"location_id"`
	ResponseUrl            string  `json:"response_url"`
	Token                  Token   `json:"token"`
}

// StopSession defines model for stopSession.
type StopSession struct {
	ResponseUrl string  `json:"response_url"`
	SessionId   *string `json:"session_id,omitempty"`
}

// Tariff defines model for tariff.
type Tariff struct {
	CountryCode   string                       `json:"country_code"`
	Currency      string                       `json:"currency"`
	Elements      *TariffElements              `json:"elements,omitempty"`
	EndDateTime   *string                      `json:"end_date_time,omitempty"`
	EnergyMix     *TariffEnergyMix             `json:"energy_mix,omitempty"`
	Id            string                       `json:"id"`
	LastUpdated   string                       `json:"last_updated"`
	MaxPrice      *Price                       `json:"max_price,omitempty"`
	MinPrice      *Price                       `json:"min_price,omitempty"`
	PartyId       string                       `json:"party_id"`
	StartDateTime *string                      `json:"start_date_time,omitempty"`
	TariffAltText *CdrBodyTariffsTariffAltText `json:"tariff_alt_text,omitempty"`
	TariffAltUrl  *string                      `json:"tariff_alt_url,omitempty"`
	Type          *TariffType                  `json:"type,omitempty"`
}

// TariffType defines model for Tariff.Type.
type TariffType string

// TariffDeleteResponse defines model for tariffDeleteResponse.
type TariffDeleteResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     string  `json:"timeStamp"`
}

// TariffResponse defines model for tariffResponse.
type TariffResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	Tariff        Tariff  `json:"tariff"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
}

// TariffElements defines model for tariff_elements.
type TariffElements struct {
	PriceComponents *TariffElementsPriceComponents `json:"price_components,omitempty"`
	Restrictions    *TariffElementsRestrictions    `json:"restrictions,omitempty"`
}

// TariffElementsPriceComponents defines model for TariffElements.PriceComponents.
type TariffElementsPriceComponents string

// TariffElementsRestrictions defines model for tariff_elements_restrictions.
type TariffElementsRestrictions struct {
	DayOfWeek   *TariffElementsRestrictionsDayOfWeek `json:"day_of_week,omitempty"`
	EndDate     *string                              `json:"end_date,omitempty"`
	EndTime     *string                              `json:"end_time,omitempty"`
	MaxCurrent  *float32                             `json:"max_current,omitempty"`
	MaxDuration *int                                 `json:"max_duration,omitempty"`
	MaxKwh      *float32                             `json:"max_kwh,omitempty"`
	MaxPower    *float32                             `json:"max_power,omitempty"`
	MinCurrent  *float32                             `json:"min_current,omitempty"`
	MinDuration *int                                 `json:"min_duration,omitempty"`
	MinKwh      *float32                             `json:"min_kwh,omitempty"`
	MinPower    *float32                             `json:"min_power,omitempty"`
	Reservation *ReservationRestrictionType          `json:"reservation,omitempty"`
	StartDate   *string                              `json:"start_date,omitempty"`
	StartTime   *string                              `json:"start_time,omitempty"`
}

// TariffElementsRestrictionsDayOfWeek defines model for TariffElementsRestrictions.DayOfWeek.
type TariffElementsRestrictionsDayOfWeek string

// TariffEnergyMix defines model for tariff_energy_mix.
type TariffEnergyMix struct {
	EnergyProductName *string                               `json:"energy_product_name,omitempty"`
	EnergySources     *CdrBodyTariffsEnergyMixEnergySources `json:"energy_sources,omitempty"`
	EnvironImpact     *TariffEnergyMixEnvironImpact         `json:"environ_impact,omitempty"`
	IsGreenEnergy     bool                                  `json:"is_green_energy"`
	SupplierName      *string                               `json:"supplier_name,omitempty"`
}

// TariffEnergyMixEnvironImpact defines model for tariff_energy_mix_environ_impact.
type TariffEnergyMixEnvironImpact struct {
	Amount float32 `json:"amount"`

	// Category Categories of environmental impact values
	Category EnvironmentalImpactCategoryType `json:"category"`
}

// TariffsResponse defines model for tariffsResponse.
type TariffsResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	Tariffs       *Tariff `json:"tariffs,omitempty"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
}

// Token defines model for token.
type Token struct {
	ContractId         string                   `json:"contract_id"`
	CountryCode        string                   `json:"country_code"`
	DefaultProfileType *TokenDefaultProfileType `json:"default_profile_type,omitempty"`
	EnergyContract     *TokenEnergyContract     `json:"energy_contract,omitempty"`
	GroupId            *string                  `json:"group_id,omitempty"`
	Issuer             string                   `json:"issuer"`
	Language           *string                  `json:"language,omitempty"`
	LastUpdated        string                   `json:"last_updated"`
	PartyId            string                   `json:"party_id"`
	Type               TokenType                `json:"type"`
	Uid                string                   `json:"uid"`
	Valid              bool                     `json:"valid"`
	VisualNumber       *string                  `json:"visual_number,omitempty"`
	Whitelist          TokenWhitelist           `json:"whitelist"`
}

// TokenDefaultProfileType defines model for Token.DefaultProfileType.
type TokenDefaultProfileType string

// TokenType defines model for Token.Type.
type TokenType string

// TokenWhitelist defines model for Token.Whitelist.
type TokenWhitelist string

// TokenResponse defines model for tokenResponse.
type TokenResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
	Token         Token   `json:"token"`
}

// TokenEnergyContract defines model for token_energy_contract.
type TokenEnergyContract struct {
	ContractId   *string `json:"contract_id,omitempty"`
	SupplierName string  `json:"supplier_name"`
}

// TokensResponse defines model for tokensResponse.
type TokensResponse struct {
	StatusCode    float32 `json:"status_code"`
	StatusMessage *string `json:"status_message,omitempty"`
	TimeStamp     *string `json:"timeStamp,omitempty"`
	Tokens        *Token  `json:"tokens,omitempty"`
}

// UnlockConnector defines model for unlockConnector.
type UnlockConnector struct {
	ConnectorId string `json:"connector_id"`
	EvseUid     string `json:"evse_uid"`
	LocationId  string `json:"location_id"`
	ResponseUrl string `json:"response_url"`
}

// Versions defines model for versions.
type Versions struct {
	Data          *VersionsData `json:"data,omitempty"`
	StatusCode    float32       `json:"status_code"`
	StatusMessage *string       `json:"status_message,omitempty"`
	TimeStamp     *string       `json:"timeStamp,omitempty"`
}

// VersionsData defines model for versions_data.
type VersionsData struct {
	Url     string              `json:"url"`
	Version VersionsDataVersion `json:"version"`
}

// VersionsDataVersion defines model for VersionsData.Version.
type VersionsDataVersion string

// GetOcpiCdrsParams defines parameters for GetOcpiCdrs.
type GetOcpiCdrsParams struct {
	// DateFrom Return CDRs that have last_updated after or equal to this Date/Time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return CDRs that have last_updated up to this Date/Time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostOcpiCommandsCommandParamsCommand defines parameters for PostOcpiCommandsCommand.
type PostOcpiCommandsCommandParamsCommand string

// PostOcpiCommandsCommandUidParamsCommand defines parameters for PostOcpiCommandsCommandUid.
type PostOcpiCommandsCommandUidParamsCommand string

// GetOcpiHubclientinfoParams defines parameters for GetOcpiHubclientinfo.
type GetOcpiHubclientinfoParams struct {
	// DateFrom Return ClientInfo that have last_updated after or equal to Date/Time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return ClientInfo that have last_updated up to Date/Time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOcpiLocationsParams defines parameters for GetOcpiLocations.
type GetOcpiLocationsParams struct {
	// DateFrom Return Locations that have last_updated after or equal to this date time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return Locations that have last_updated up to this date time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOcpiLocationsCountryCodePartyIdLocationIdParams defines parameters for GetOcpiLocationsCountryCodePartyIdLocationId.
type GetOcpiLocationsCountryCodePartyIdLocationIdParams struct {
	// EvseUid Evse.uid, required when requesting an EVSE or Connector object.
	EvseUid *string `form:"evse_uid,omitempty" json:"evse_uid,omitempty"`

	// ConnectorId Connector.id, required when requesting a Connector object.
	ConnectorId *string `form:"connector_id,omitempty" json:"connector_id,omitempty"`
}

// PatchOcpiLocationsCountryCodePartyIdLocationIdParams defines parameters for PatchOcpiLocationsCountryCodePartyIdLocationId.
type PatchOcpiLocationsCountryCodePartyIdLocationIdParams struct {
	// EvseUid Evse.uid, required when requesting an EVSE or Connector object.
	EvseUid *string `form:"evse_uid,omitempty" json:"evse_uid,omitempty"`

	// ConnectorId Connector.id, required when requesting a Connector object.
	ConnectorId *string `form:"connector_id,omitempty" json:"connector_id,omitempty"`
}

// PutOcpiLocationsCountryCodePartyIdLocationIdParams defines parameters for PutOcpiLocationsCountryCodePartyIdLocationId.
type PutOcpiLocationsCountryCodePartyIdLocationIdParams struct {
	// EvseUid Evse.uid, required when requesting an EVSE or Connector object.
	EvseUid *string `form:"evse_uid,omitempty" json:"evse_uid,omitempty"`

	// ConnectorId Connector.id, required when requesting a Connector object.
	ConnectorId *string `form:"connector_id,omitempty" json:"connector_id,omitempty"`
}

// GetOcpiLocationsLocationIdParams defines parameters for GetOcpiLocationsLocationId.
type GetOcpiLocationsLocationIdParams struct {
	// EvseUid Evse.uid, required when requesting an EVSE or Connector object.
	EvseUid *string `form:"evse_uid,omitempty" json:"evse_uid,omitempty"`

	// ConnectorId Connector.id, required when requesting a Connector object.
	ConnectorId *string `form:"connector_id,omitempty" json:"connector_id,omitempty"`
}

// GetOcpiSessionsParams defines parameters for GetOcpiSessions.
type GetOcpiSessionsParams struct {
	// DateFrom Return Sessions that have last_updated after or equal to this date time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return Sessions that have last_updated up to this date time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOcpiTariffsParams defines parameters for GetOcpiTariffs.
type GetOcpiTariffsParams struct {
	// DateFrom Return Tariffs that have last_updated after or equal to Date/Time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return Tariffs that have last_updated up to Date/Time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOcpiTokensParams defines parameters for GetOcpiTokens.
type GetOcpiTokensParams struct {
	// DateFrom Return tokens that have last_updated after or equal to this Date/Time (inclusive).
	DateFrom *string `form:"date_from,omitempty" json:"date_from,omitempty"`

	// DateTo Return tokens that have last_updated up to Date/Time, but not including (exclusive).
	DateTo *string `form:"date_to,omitempty" json:"date_to,omitempty"`

	// Offset The offset of the first object returned. Default is 0.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of objects to GET.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOcpiTokensCountryCodePartyIdTokenUidParams defines parameters for GetOcpiTokensCountryCodePartyIdTokenUid.
type GetOcpiTokensCountryCodePartyIdTokenUidParams struct {
	// Type Token.type of the Token to retrieve. Default if omitted: RFID
	Type *GetOcpiTokensCountryCodePartyIdTokenUidParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetOcpiTokensCountryCodePartyIdTokenUidParamsType defines parameters for GetOcpiTokensCountryCodePartyIdTokenUid.
type GetOcpiTokensCountryCodePartyIdTokenUidParamsType string

// PatchOcpiTokensCountryCodePartyIdTokenUidParams defines parameters for PatchOcpiTokensCountryCodePartyIdTokenUid.
type PatchOcpiTokensCountryCodePartyIdTokenUidParams struct {
	// Type Token.type of the Token to retrieve. Default if omitted: RFID
	Type *PatchOcpiTokensCountryCodePartyIdTokenUidParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// PatchOcpiTokensCountryCodePartyIdTokenUidParamsType defines parameters for PatchOcpiTokensCountryCodePartyIdTokenUid.
type PatchOcpiTokensCountryCodePartyIdTokenUidParamsType string

// PutOcpiTokensCountryCodePartyIdTokenUidParams defines parameters for PutOcpiTokensCountryCodePartyIdTokenUid.
type PutOcpiTokensCountryCodePartyIdTokenUidParams struct {
	// Type Token.type of the Token to retrieve. Default if omitted: RFID
	Type *PutOcpiTokensCountryCodePartyIdTokenUidParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// PutOcpiTokensCountryCodePartyIdTokenUidParamsType defines parameters for PutOcpiTokensCountryCodePartyIdTokenUid.
type PutOcpiTokensCountryCodePartyIdTokenUidParamsType string

// PostOcpiTokenUidAuthorizeParams defines parameters for PostOcpiTokenUidAuthorize.
type PostOcpiTokenUidAuthorizeParams struct {
	// Type Token.type of the Token to retrieve. Default if omitted: RFID
	Type *PostOcpiTokenUidAuthorizeParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// PostOcpiTokenUidAuthorizeParamsType defines parameters for PostOcpiTokenUidAuthorize.
type PostOcpiTokenUidAuthorizeParamsType string

// PostOcpi221CredentialsJSONRequestBody defines body for PostOcpi221Credentials for application/json ContentType.
type PostOcpi221CredentialsJSONRequestBody = Credentials

// PutOcpi221CredentialsJSONRequestBody defines body for PutOcpi221Credentials for application/json ContentType.
type PutOcpi221CredentialsJSONRequestBody = Credentials

// PostOcpiCdrsJSONRequestBody defines body for PostOcpiCdrs for application/json ContentType.
type PostOcpiCdrsJSONRequestBody = CdrBody

// PostOcpiChargingprofileJSONRequestBody defines body for PostOcpiChargingprofile for application/json ContentType.
type PostOcpiChargingprofileJSONRequestBody = OcpiChargingprofilePostRequest

// PutOcpiChargingprofileSessionIdJSONRequestBody defines body for PutOcpiChargingprofileSessionId for application/json ContentType.
type PutOcpiChargingprofileSessionIdJSONRequestBody = ActiveChargingProfile

// PutOcpiChargingprofilesSessionIdJSONRequestBody defines body for PutOcpiChargingprofilesSessionId for application/json ContentType.
type PutOcpiChargingprofilesSessionIdJSONRequestBody = SetChargingProfile

// PutOcpiClientinfoCountryCodePartyIdJSONRequestBody defines body for PutOcpiClientinfoCountryCodePartyId for application/json ContentType.
type PutOcpiClientinfoCountryCodePartyIdJSONRequestBody = ClientInfo

// PostOcpiCommandsCommandJSONRequestBody defines body for PostOcpiCommandsCommand for application/json ContentType.
type PostOcpiCommandsCommandJSONRequestBody = OcpiCommandsCommandPostRequest

// PostOcpiCommandsCommandUidJSONRequestBody defines body for PostOcpiCommandsCommandUid for application/json ContentType.
type PostOcpiCommandsCommandUidJSONRequestBody = CommandResult

// PutOcpiLocationsCountryCodePartyIdLocationIdJSONRequestBody defines body for PutOcpiLocationsCountryCodePartyIdLocationId for application/json ContentType.
type PutOcpiLocationsCountryCodePartyIdLocationIdJSONRequestBody = OcpiLocationsLocationIdGet200Response

// PutOcpiSessionsCountryCodePartyIdSessionIdJSONRequestBody defines body for PutOcpiSessionsCountryCodePartyIdSessionId for application/json ContentType.
type PutOcpiSessionsCountryCodePartyIdSessionIdJSONRequestBody = Session

// PutOcpiSessionsSessionIdChargingPreferencesJSONRequestBody defines body for PutOcpiSessionsSessionIdChargingPreferences for application/json ContentType.
type PutOcpiSessionsSessionIdChargingPreferencesJSONRequestBody = ChargingPreferences

// PutOcpiTariffsCountryCodePartyIdTariffIdJSONRequestBody defines body for PutOcpiTariffsCountryCodePartyIdTariffId for application/json ContentType.
type PutOcpiTariffsCountryCodePartyIdTariffIdJSONRequestBody = Tariff

// PutOcpiTokensCountryCodePartyIdTokenUidJSONRequestBody defines body for PutOcpiTokensCountryCodePartyIdTokenUid for application/json ContentType.
type PutOcpiTokensCountryCodePartyIdTokenUidJSONRequestBody = Token

// PostOcpiTokenUidAuthorizeJSONRequestBody defines body for PostOcpiTokenUidAuthorize for application/json ContentType.
type PostOcpiTokenUidAuthorizeJSONRequestBody = LocationReferences

// AsActiveChargingProfileResult returns the union data inside the OcpiChargingprofilePostRequest as a ActiveChargingProfileResult
func (t OcpiChargingprofilePostRequest) AsActiveChargingProfileResult() (ActiveChargingProfileResult, error) {
	var body ActiveChargingProfileResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActiveChargingProfileResult overwrites any union data inside the OcpiChargingprofilePostRequest as the provided ActiveChargingProfileResult
func (t *OcpiChargingprofilePostRequest) FromActiveChargingProfileResult(v ActiveChargingProfileResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActiveChargingProfileResult performs a merge with any union data inside the OcpiChargingprofilePostRequest, using the provided ActiveChargingProfileResult
func (t *OcpiChargingprofilePostRequest) MergeActiveChargingProfileResult(v ActiveChargingProfileResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChargingProfileResult returns the union data inside the OcpiChargingprofilePostRequest as a ChargingProfileResult
func (t OcpiChargingprofilePostRequest) AsChargingProfileResult() (ChargingProfileResult, error) {
	var body ChargingProfileResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChargingProfileResult overwrites any union data inside the OcpiChargingprofilePostRequest as the provided ChargingProfileResult
func (t *OcpiChargingprofilePostRequest) FromChargingProfileResult(v ChargingProfileResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChargingProfileResult performs a merge with any union data inside the OcpiChargingprofilePostRequest, using the provided ChargingProfileResult
func (t *OcpiChargingprofilePostRequest) MergeChargingProfileResult(v ChargingProfileResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsClearProfileResult returns the union data inside the OcpiChargingprofilePostRequest as a ClearProfileResult
func (t OcpiChargingprofilePostRequest) AsClearProfileResult() (ClearProfileResult, error) {
	var body ClearProfileResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClearProfileResult overwrites any union data inside the OcpiChargingprofilePostRequest as the provided ClearProfileResult
func (t *OcpiChargingprofilePostRequest) FromClearProfileResult(v ClearProfileResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClearProfileResult performs a merge with any union data inside the OcpiChargingprofilePostRequest, using the provided ClearProfileResult
func (t *OcpiChargingprofilePostRequest) MergeClearProfileResult(v ClearProfileResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OcpiChargingprofilePostRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OcpiChargingprofilePostRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCancelReservation returns the union data inside the OcpiCommandsCommandPostRequest as a CancelReservation
func (t OcpiCommandsCommandPostRequest) AsCancelReservation() (CancelReservation, error) {
	var body CancelReservation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelReservation overwrites any union data inside the OcpiCommandsCommandPostRequest as the provided CancelReservation
func (t *OcpiCommandsCommandPostRequest) FromCancelReservation(v CancelReservation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelReservation performs a merge with any union data inside the OcpiCommandsCommandPostRequest, using the provided CancelReservation
func (t *OcpiCommandsCommandPostRequest) MergeCancelReservation(v CancelReservation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReserveNow returns the union data inside the OcpiCommandsCommandPostRequest as a ReserveNow
func (t OcpiCommandsCommandPostRequest) AsReserveNow() (ReserveNow, error) {
	var body ReserveNow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReserveNow overwrites any union data inside the OcpiCommandsCommandPostRequest as the provided ReserveNow
func (t *OcpiCommandsCommandPostRequest) FromReserveNow(v ReserveNow) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReserveNow performs a merge with any union data inside the OcpiCommandsCommandPostRequest, using the provided ReserveNow
func (t *OcpiCommandsCommandPostRequest) MergeReserveNow(v ReserveNow) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStartSession returns the union data inside the OcpiCommandsCommandPostRequest as a StartSession
func (t OcpiCommandsCommandPostRequest) AsStartSession() (StartSession, error) {
	var body StartSession
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStartSession overwrites any union data inside the OcpiCommandsCommandPostRequest as the provided StartSession
func (t *OcpiCommandsCommandPostRequest) FromStartSession(v StartSession) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStartSession performs a merge with any union data inside the OcpiCommandsCommandPostRequest, using the provided StartSession
func (t *OcpiCommandsCommandPostRequest) MergeStartSession(v StartSession) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStopSession returns the union data inside the OcpiCommandsCommandPostRequest as a StopSession
func (t OcpiCommandsCommandPostRequest) AsStopSession() (StopSession, error) {
	var body StopSession
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStopSession overwrites any union data inside the OcpiCommandsCommandPostRequest as the provided StopSession
func (t *OcpiCommandsCommandPostRequest) FromStopSession(v StopSession) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStopSession performs a merge with any union data inside the OcpiCommandsCommandPostRequest, using the provided StopSession
func (t *OcpiCommandsCommandPostRequest) MergeStopSession(v StopSession) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnlockConnector returns the union data inside the OcpiCommandsCommandPostRequest as a UnlockConnector
func (t OcpiCommandsCommandPostRequest) AsUnlockConnector() (UnlockConnector, error) {
	var body UnlockConnector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnlockConnector overwrites any union data inside the OcpiCommandsCommandPostRequest as the provided UnlockConnector
func (t *OcpiCommandsCommandPostRequest) FromUnlockConnector(v UnlockConnector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnlockConnector performs a merge with any union data inside the OcpiCommandsCommandPostRequest, using the provided UnlockConnector
func (t *OcpiCommandsCommandPostRequest) MergeUnlockConnector(v UnlockConnector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OcpiCommandsCommandPostRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OcpiCommandsCommandPostRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLocations returns the union data inside the OcpiLocationsLocationIdGet200Response as a Locations
func (t OcpiLocationsLocationIdGet200Response) AsLocations() (Locations, error) {
	var body Locations
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLocations overwrites any union data inside the OcpiLocationsLocationIdGet200Response as the provided Locations
func (t *OcpiLocationsLocationIdGet200Response) FromLocations(v Locations) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLocations performs a merge with any union data inside the OcpiLocationsLocationIdGet200Response, using the provided Locations
func (t *OcpiLocationsLocationIdGet200Response) MergeLocations(v Locations) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEvse returns the union data inside the OcpiLocationsLocationIdGet200Response as a Evse
func (t OcpiLocationsLocationIdGet200Response) AsEvse() (Evse, error) {
	var body Evse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvse overwrites any union data inside the OcpiLocationsLocationIdGet200Response as the provided Evse
func (t *OcpiLocationsLocationIdGet200Response) FromEvse(v Evse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvse performs a merge with any union data inside the OcpiLocationsLocationIdGet200Response, using the provided Evse
func (t *OcpiLocationsLocationIdGet200Response) MergeEvse(v Evse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConnector returns the union data inside the OcpiLocationsLocationIdGet200Response as a Connector
func (t OcpiLocationsLocationIdGet200Response) AsConnector() (Connector, error) {
	var body Connector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConnector overwrites any union data inside the OcpiLocationsLocationIdGet200Response as the provided Connector
func (t *OcpiLocationsLocationIdGet200Response) FromConnector(v Connector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConnector performs a merge with any union data inside the OcpiLocationsLocationIdGet200Response, using the provided Connector
func (t *OcpiLocationsLocationIdGet200Response) MergeConnector(v Connector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OcpiLocationsLocationIdGet200Response) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OcpiLocationsLocationIdGet200Response) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteOcpi221Credentials request
	DeleteOcpi221Credentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpi221Credentials request
	GetOcpi221Credentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOcpi221CredentialsWithBody request with any body
	PostOcpi221CredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOcpi221Credentials(ctx context.Context, body PostOcpi221CredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOcpi221CredentialsWithBody request with any body
	PutOcpi221CredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOcpi221Credentials(ctx context.Context, body PutOcpi221CredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpi221Details request
	GetOcpi221Details(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiCdrs request
	GetOcpiCdrs(ctx context.Context, params *GetOcpiCdrsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOcpiCdrsWithBody request with any body
	PostOcpiCdrsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOcpiCdrs(ctx context.Context, body PostOcpiCdrsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOcpiChargingprofileWithBody request with any body
	PostOcpiChargingprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOcpiChargingprofile(ctx context.Context, body PostOcpiChargingprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOcpiChargingprofileSessionIdWithBody request with any body
	PutOcpiChargingprofileSessionIdWithBody(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOcpiChargingprofileSessionId(ctx context.Context, sessionId string, body PutOcpiChargingprofileSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOcpiChargingprofilesSessionIdWithBody request with any body
	PutOcpiChargingprofilesSessionIdWithBody(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOcpiChargingprofilesSessionId(ctx context.Context, sessionId string, body PutOcpiChargingprofilesSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiChargingprofilesSessionIdDurationResponseUrl request
	GetOcpiChargingprofilesSessionIdDurationResponseUrl(ctx context.Context, sessionId string, duration int, responseUrl string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOcpiChargingprofilesSessionIdResponseUrl request
	DeleteOcpiChargingprofilesSessionIdResponseUrl(ctx context.Context, sessionId string, responseUrl string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiClientinfoCountryCodePartyId request
	GetOcpiClientinfoCountryCodePartyId(ctx context.Context, countryCode string, partyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOcpiClientinfoCountryCodePartyIdWithBody request with any body
	PutOcpiClientinfoCountryCodePartyIdWithBody(ctx context.Context, countryCode string, partyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOcpiClientinfoCountryCodePartyId(ctx context.Context, countryCode string, partyId string, body PutOcpiClientinfoCountryCodePartyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOcpiCommandsCommandWithBody request with any body
	PostOcpiCommandsCommandWithBody(ctx context.Context, command PostOcpiCommandsCommandParamsCommand, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOcpiCommandsCommand(ctx context.Context, command PostOcpiCommandsCommandParamsCommand, body PostOcpiCommandsCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOcpiCommandsCommandUidWithBody request with any body
	PostOcpiCommandsCommandUidWithBody(ctx context.Context, command PostOcpiCommandsCommandUidParamsCommand, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOcpiCommandsCommandUid(ctx context.Context, command PostOcpiCommandsCommandUidParamsCommand, uid string, body PostOcpiCommandsCommandUidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiHubclientinfo request
	GetOcpiHubclientinfo(ctx context.Context, params *GetOcpiHubclientinfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiLocations request
	GetOcpiLocations(ctx context.Context, params *GetOcpiLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiLocationsCountryCodePartyIdLocationId request
	GetOcpiLocationsCountryCodePartyIdLocationId(ctx context.Context, countryCode string, partyId string, locationId string, params *GetOcpiLocationsCountryCodePartyIdLocationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOcpiLocationsCountryCodePartyIdLocationId request
	PatchOcpiLocationsCountryCodePartyIdLocationId(ctx context.Context, countryCode string, partyId string, locationId string, params *PatchOcpiLocationsCountryCodePartyIdLocationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOcpiLocationsCountryCodePartyIdLocationIdWithBody request with any body
	PutOcpiLocationsCountryCodePartyIdLocationIdWithBody(ctx context.Context, countryCode string, partyId string, locationId string, params *PutOcpiLocationsCountryCodePartyIdLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOcpiLocationsCountryCodePartyIdLocationId(ctx context.Context, countryCode string, partyId string, locationId string, params *PutOcpiLocationsCountryCodePartyIdLocationIdParams, body PutOcpiLocationsCountryCodePartyIdLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiLocationsLocationId request
	GetOcpiLocationsLocationId(ctx context.Context, locationId string, params *GetOcpiLocationsLocationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiSessions request
	GetOcpiSessions(ctx context.Context, params *GetOcpiSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiSessionsCountryCodePartyIdSessionId request
	GetOcpiSessionsCountryCodePartyIdSessionId(ctx context.Context, countryCode string, partyId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOcpiSessionsCountryCodePartyIdSessionId request
	PatchOcpiSessionsCountryCodePartyIdSessionId(ctx context.Context, countryCode string, partyId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOcpiSessionsCountryCodePartyIdSessionIdWithBody request with any body
	PutOcpiSessionsCountryCodePartyIdSessionIdWithBody(ctx context.Context, countryCode string, partyId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOcpiSessionsCountryCodePartyIdSessionId(ctx context.Context, countryCode string, partyId string, sessionId string, body PutOcpiSessionsCountryCodePartyIdSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOcpiSessionsSessionIdChargingPreferencesWithBody request with any body
	PutOcpiSessionsSessionIdChargingPreferencesWithBody(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOcpiSessionsSessionIdChargingPreferences(ctx context.Context, sessionId string, body PutOcpiSessionsSessionIdChargingPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiTariffs request
	GetOcpiTariffs(ctx context.Context, params *GetOcpiTariffsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOcpiTariffsCountryCodePartyIdTariffId request
	DeleteOcpiTariffsCountryCodePartyIdTariffId(ctx context.Context, countryCode string, partyId string, tariffId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiTariffsCountryCodePartyIdTariffId request
	GetOcpiTariffsCountryCodePartyIdTariffId(ctx context.Context, countryCode string, partyId string, tariffId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOcpiTariffsCountryCodePartyIdTariffIdWithBody request with any body
	PutOcpiTariffsCountryCodePartyIdTariffIdWithBody(ctx context.Context, countryCode string, partyId string, tariffId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOcpiTariffsCountryCodePartyIdTariffId(ctx context.Context, countryCode string, partyId string, tariffId string, body PutOcpiTariffsCountryCodePartyIdTariffIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiTokens request
	GetOcpiTokens(ctx context.Context, params *GetOcpiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiTokensCountryCodePartyIdTokenUid request
	GetOcpiTokensCountryCodePartyIdTokenUid(ctx context.Context, countryCode string, partyId string, tokenUid string, params *GetOcpiTokensCountryCodePartyIdTokenUidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOcpiTokensCountryCodePartyIdTokenUid request
	PatchOcpiTokensCountryCodePartyIdTokenUid(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PatchOcpiTokensCountryCodePartyIdTokenUidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOcpiTokensCountryCodePartyIdTokenUidWithBody request with any body
	PutOcpiTokensCountryCodePartyIdTokenUidWithBody(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PutOcpiTokensCountryCodePartyIdTokenUidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOcpiTokensCountryCodePartyIdTokenUid(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PutOcpiTokensCountryCodePartyIdTokenUidParams, body PutOcpiTokensCountryCodePartyIdTokenUidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOcpiVersions request
	GetOcpiVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOcpiTokenUidAuthorizeWithBody request with any body
	PostOcpiTokenUidAuthorizeWithBody(ctx context.Context, tokenUid string, params *PostOcpiTokenUidAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOcpiTokenUidAuthorize(ctx context.Context, tokenUid string, params *PostOcpiTokenUidAuthorizeParams, body PostOcpiTokenUidAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteOcpi221Credentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOcpi221CredentialsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpi221Credentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpi221CredentialsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpi221CredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpi221CredentialsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpi221Credentials(ctx context.Context, body PostOcpi221CredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpi221CredentialsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpi221CredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpi221CredentialsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpi221Credentials(ctx context.Context, body PutOcpi221CredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpi221CredentialsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpi221Details(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpi221DetailsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiCdrs(ctx context.Context, params *GetOcpiCdrsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiCdrsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpiCdrsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpiCdrsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpiCdrs(ctx context.Context, body PostOcpiCdrsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpiCdrsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpiChargingprofileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpiChargingprofileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpiChargingprofile(ctx context.Context, body PostOcpiChargingprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpiChargingprofileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiChargingprofileSessionIdWithBody(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiChargingprofileSessionIdRequestWithBody(c.Server, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiChargingprofileSessionId(ctx context.Context, sessionId string, body PutOcpiChargingprofileSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiChargingprofileSessionIdRequest(c.Server, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiChargingprofilesSessionIdWithBody(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiChargingprofilesSessionIdRequestWithBody(c.Server, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiChargingprofilesSessionId(ctx context.Context, sessionId string, body PutOcpiChargingprofilesSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiChargingprofilesSessionIdRequest(c.Server, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiChargingprofilesSessionIdDurationResponseUrl(ctx context.Context, sessionId string, duration int, responseUrl string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiChargingprofilesSessionIdDurationResponseUrlRequest(c.Server, sessionId, duration, responseUrl)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOcpiChargingprofilesSessionIdResponseUrl(ctx context.Context, sessionId string, responseUrl string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOcpiChargingprofilesSessionIdResponseUrlRequest(c.Server, sessionId, responseUrl)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiClientinfoCountryCodePartyId(ctx context.Context, countryCode string, partyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiClientinfoCountryCodePartyIdRequest(c.Server, countryCode, partyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiClientinfoCountryCodePartyIdWithBody(ctx context.Context, countryCode string, partyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiClientinfoCountryCodePartyIdRequestWithBody(c.Server, countryCode, partyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiClientinfoCountryCodePartyId(ctx context.Context, countryCode string, partyId string, body PutOcpiClientinfoCountryCodePartyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiClientinfoCountryCodePartyIdRequest(c.Server, countryCode, partyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpiCommandsCommandWithBody(ctx context.Context, command PostOcpiCommandsCommandParamsCommand, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpiCommandsCommandRequestWithBody(c.Server, command, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpiCommandsCommand(ctx context.Context, command PostOcpiCommandsCommandParamsCommand, body PostOcpiCommandsCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpiCommandsCommandRequest(c.Server, command, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpiCommandsCommandUidWithBody(ctx context.Context, command PostOcpiCommandsCommandUidParamsCommand, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpiCommandsCommandUidRequestWithBody(c.Server, command, uid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpiCommandsCommandUid(ctx context.Context, command PostOcpiCommandsCommandUidParamsCommand, uid string, body PostOcpiCommandsCommandUidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpiCommandsCommandUidRequest(c.Server, command, uid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiHubclientinfo(ctx context.Context, params *GetOcpiHubclientinfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiHubclientinfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiLocations(ctx context.Context, params *GetOcpiLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiLocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiLocationsCountryCodePartyIdLocationId(ctx context.Context, countryCode string, partyId string, locationId string, params *GetOcpiLocationsCountryCodePartyIdLocationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiLocationsCountryCodePartyIdLocationIdRequest(c.Server, countryCode, partyId, locationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOcpiLocationsCountryCodePartyIdLocationId(ctx context.Context, countryCode string, partyId string, locationId string, params *PatchOcpiLocationsCountryCodePartyIdLocationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOcpiLocationsCountryCodePartyIdLocationIdRequest(c.Server, countryCode, partyId, locationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiLocationsCountryCodePartyIdLocationIdWithBody(ctx context.Context, countryCode string, partyId string, locationId string, params *PutOcpiLocationsCountryCodePartyIdLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiLocationsCountryCodePartyIdLocationIdRequestWithBody(c.Server, countryCode, partyId, locationId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiLocationsCountryCodePartyIdLocationId(ctx context.Context, countryCode string, partyId string, locationId string, params *PutOcpiLocationsCountryCodePartyIdLocationIdParams, body PutOcpiLocationsCountryCodePartyIdLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiLocationsCountryCodePartyIdLocationIdRequest(c.Server, countryCode, partyId, locationId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiLocationsLocationId(ctx context.Context, locationId string, params *GetOcpiLocationsLocationIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiLocationsLocationIdRequest(c.Server, locationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiSessions(ctx context.Context, params *GetOcpiSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiSessionsCountryCodePartyIdSessionId(ctx context.Context, countryCode string, partyId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiSessionsCountryCodePartyIdSessionIdRequest(c.Server, countryCode, partyId, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOcpiSessionsCountryCodePartyIdSessionId(ctx context.Context, countryCode string, partyId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOcpiSessionsCountryCodePartyIdSessionIdRequest(c.Server, countryCode, partyId, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiSessionsCountryCodePartyIdSessionIdWithBody(ctx context.Context, countryCode string, partyId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiSessionsCountryCodePartyIdSessionIdRequestWithBody(c.Server, countryCode, partyId, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiSessionsCountryCodePartyIdSessionId(ctx context.Context, countryCode string, partyId string, sessionId string, body PutOcpiSessionsCountryCodePartyIdSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiSessionsCountryCodePartyIdSessionIdRequest(c.Server, countryCode, partyId, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiSessionsSessionIdChargingPreferencesWithBody(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiSessionsSessionIdChargingPreferencesRequestWithBody(c.Server, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiSessionsSessionIdChargingPreferences(ctx context.Context, sessionId string, body PutOcpiSessionsSessionIdChargingPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiSessionsSessionIdChargingPreferencesRequest(c.Server, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiTariffs(ctx context.Context, params *GetOcpiTariffsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiTariffsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOcpiTariffsCountryCodePartyIdTariffId(ctx context.Context, countryCode string, partyId string, tariffId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOcpiTariffsCountryCodePartyIdTariffIdRequest(c.Server, countryCode, partyId, tariffId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiTariffsCountryCodePartyIdTariffId(ctx context.Context, countryCode string, partyId string, tariffId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiTariffsCountryCodePartyIdTariffIdRequest(c.Server, countryCode, partyId, tariffId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiTariffsCountryCodePartyIdTariffIdWithBody(ctx context.Context, countryCode string, partyId string, tariffId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiTariffsCountryCodePartyIdTariffIdRequestWithBody(c.Server, countryCode, partyId, tariffId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiTariffsCountryCodePartyIdTariffId(ctx context.Context, countryCode string, partyId string, tariffId string, body PutOcpiTariffsCountryCodePartyIdTariffIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiTariffsCountryCodePartyIdTariffIdRequest(c.Server, countryCode, partyId, tariffId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiTokens(ctx context.Context, params *GetOcpiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiTokensCountryCodePartyIdTokenUid(ctx context.Context, countryCode string, partyId string, tokenUid string, params *GetOcpiTokensCountryCodePartyIdTokenUidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiTokensCountryCodePartyIdTokenUidRequest(c.Server, countryCode, partyId, tokenUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOcpiTokensCountryCodePartyIdTokenUid(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PatchOcpiTokensCountryCodePartyIdTokenUidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOcpiTokensCountryCodePartyIdTokenUidRequest(c.Server, countryCode, partyId, tokenUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiTokensCountryCodePartyIdTokenUidWithBody(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PutOcpiTokensCountryCodePartyIdTokenUidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiTokensCountryCodePartyIdTokenUidRequestWithBody(c.Server, countryCode, partyId, tokenUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOcpiTokensCountryCodePartyIdTokenUid(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PutOcpiTokensCountryCodePartyIdTokenUidParams, body PutOcpiTokensCountryCodePartyIdTokenUidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOcpiTokensCountryCodePartyIdTokenUidRequest(c.Server, countryCode, partyId, tokenUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOcpiVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOcpiVersionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpiTokenUidAuthorizeWithBody(ctx context.Context, tokenUid string, params *PostOcpiTokenUidAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpiTokenUidAuthorizeRequestWithBody(c.Server, tokenUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOcpiTokenUidAuthorize(ctx context.Context, tokenUid string, params *PostOcpiTokenUidAuthorizeParams, body PostOcpiTokenUidAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOcpiTokenUidAuthorizeRequest(c.Server, tokenUid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteOcpi221CredentialsRequest generates requests for DeleteOcpi221Credentials
func NewDeleteOcpi221CredentialsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/2.2.1/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOcpi221CredentialsRequest generates requests for GetOcpi221Credentials
func NewGetOcpi221CredentialsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/2.2.1/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOcpi221CredentialsRequest calls the generic PostOcpi221Credentials builder with application/json body
func NewPostOcpi221CredentialsRequest(server string, body PostOcpi221CredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOcpi221CredentialsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOcpi221CredentialsRequestWithBody generates requests for PostOcpi221Credentials with any type of body
func NewPostOcpi221CredentialsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/2.2.1/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOcpi221CredentialsRequest calls the generic PutOcpi221Credentials builder with application/json body
func NewPutOcpi221CredentialsRequest(server string, body PutOcpi221CredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOcpi221CredentialsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutOcpi221CredentialsRequestWithBody generates requests for PutOcpi221Credentials with any type of body
func NewPutOcpi221CredentialsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/2.2.1/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOcpi221DetailsRequest generates requests for GetOcpi221Details
func NewGetOcpi221DetailsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/2.2.1/details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOcpiCdrsRequest generates requests for GetOcpiCdrs
func NewGetOcpiCdrsRequest(server string, params *GetOcpiCdrsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/cdrs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOcpiCdrsRequest calls the generic PostOcpiCdrs builder with application/json body
func NewPostOcpiCdrsRequest(server string, body PostOcpiCdrsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOcpiCdrsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOcpiCdrsRequestWithBody generates requests for PostOcpiCdrs with any type of body
func NewPostOcpiCdrsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/cdrs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOcpiChargingprofileRequest calls the generic PostOcpiChargingprofile builder with application/json body
func NewPostOcpiChargingprofileRequest(server string, body PostOcpiChargingprofileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOcpiChargingprofileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOcpiChargingprofileRequestWithBody generates requests for PostOcpiChargingprofile with any type of body
func NewPostOcpiChargingprofileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/chargingprofile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOcpiChargingprofileSessionIdRequest calls the generic PutOcpiChargingprofileSessionId builder with application/json body
func NewPutOcpiChargingprofileSessionIdRequest(server string, sessionId string, body PutOcpiChargingprofileSessionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOcpiChargingprofileSessionIdRequestWithBody(server, sessionId, "application/json", bodyReader)
}

// NewPutOcpiChargingprofileSessionIdRequestWithBody generates requests for PutOcpiChargingprofileSessionId with any type of body
func NewPutOcpiChargingprofileSessionIdRequestWithBody(server string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session_id", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/chargingprofile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOcpiChargingprofilesSessionIdRequest calls the generic PutOcpiChargingprofilesSessionId builder with application/json body
func NewPutOcpiChargingprofilesSessionIdRequest(server string, sessionId string, body PutOcpiChargingprofilesSessionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOcpiChargingprofilesSessionIdRequestWithBody(server, sessionId, "application/json", bodyReader)
}

// NewPutOcpiChargingprofilesSessionIdRequestWithBody generates requests for PutOcpiChargingprofilesSessionId with any type of body
func NewPutOcpiChargingprofilesSessionIdRequestWithBody(server string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session_id", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/chargingprofiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOcpiChargingprofilesSessionIdDurationResponseUrlRequest generates requests for GetOcpiChargingprofilesSessionIdDurationResponseUrl
func NewGetOcpiChargingprofilesSessionIdDurationResponseUrlRequest(server string, sessionId string, duration int, responseUrl string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session_id", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "duration", runtime.ParamLocationPath, duration)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "response_url", runtime.ParamLocationPath, responseUrl)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/chargingprofiles/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOcpiChargingprofilesSessionIdResponseUrlRequest generates requests for DeleteOcpiChargingprofilesSessionIdResponseUrl
func NewDeleteOcpiChargingprofilesSessionIdResponseUrlRequest(server string, sessionId string, responseUrl string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session_id", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "response_url", runtime.ParamLocationPath, responseUrl)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/chargingprofiles/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOcpiClientinfoCountryCodePartyIdRequest generates requests for GetOcpiClientinfoCountryCodePartyId
func NewGetOcpiClientinfoCountryCodePartyIdRequest(server string, countryCode string, partyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/clientinfo/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOcpiClientinfoCountryCodePartyIdRequest calls the generic PutOcpiClientinfoCountryCodePartyId builder with application/json body
func NewPutOcpiClientinfoCountryCodePartyIdRequest(server string, countryCode string, partyId string, body PutOcpiClientinfoCountryCodePartyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOcpiClientinfoCountryCodePartyIdRequestWithBody(server, countryCode, partyId, "application/json", bodyReader)
}

// NewPutOcpiClientinfoCountryCodePartyIdRequestWithBody generates requests for PutOcpiClientinfoCountryCodePartyId with any type of body
func NewPutOcpiClientinfoCountryCodePartyIdRequestWithBody(server string, countryCode string, partyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/clientinfo/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOcpiCommandsCommandRequest calls the generic PostOcpiCommandsCommand builder with application/json body
func NewPostOcpiCommandsCommandRequest(server string, command PostOcpiCommandsCommandParamsCommand, body PostOcpiCommandsCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOcpiCommandsCommandRequestWithBody(server, command, "application/json", bodyReader)
}

// NewPostOcpiCommandsCommandRequestWithBody generates requests for PostOcpiCommandsCommand with any type of body
func NewPostOcpiCommandsCommandRequestWithBody(server string, command PostOcpiCommandsCommandParamsCommand, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "command", runtime.ParamLocationPath, command)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/commands/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOcpiCommandsCommandUidRequest calls the generic PostOcpiCommandsCommandUid builder with application/json body
func NewPostOcpiCommandsCommandUidRequest(server string, command PostOcpiCommandsCommandUidParamsCommand, uid string, body PostOcpiCommandsCommandUidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOcpiCommandsCommandUidRequestWithBody(server, command, uid, "application/json", bodyReader)
}

// NewPostOcpiCommandsCommandUidRequestWithBody generates requests for PostOcpiCommandsCommandUid with any type of body
func NewPostOcpiCommandsCommandUidRequestWithBody(server string, command PostOcpiCommandsCommandUidParamsCommand, uid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "command", runtime.ParamLocationPath, command)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/commands/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOcpiHubclientinfoRequest generates requests for GetOcpiHubclientinfo
func NewGetOcpiHubclientinfoRequest(server string, params *GetOcpiHubclientinfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/hubclientinfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOcpiLocationsRequest generates requests for GetOcpiLocations
func NewGetOcpiLocationsRequest(server string, params *GetOcpiLocationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOcpiLocationsCountryCodePartyIdLocationIdRequest generates requests for GetOcpiLocationsCountryCodePartyIdLocationId
func NewGetOcpiLocationsCountryCodePartyIdLocationIdRequest(server string, countryCode string, partyId string, locationId string, params *GetOcpiLocationsCountryCodePartyIdLocationIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "location_id", runtime.ParamLocationPath, locationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/locations/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EvseUid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evse_uid", runtime.ParamLocationQuery, *params.EvseUid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ConnectorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connector_id", runtime.ParamLocationQuery, *params.ConnectorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOcpiLocationsCountryCodePartyIdLocationIdRequest generates requests for PatchOcpiLocationsCountryCodePartyIdLocationId
func NewPatchOcpiLocationsCountryCodePartyIdLocationIdRequest(server string, countryCode string, partyId string, locationId string, params *PatchOcpiLocationsCountryCodePartyIdLocationIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "location_id", runtime.ParamLocationPath, locationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/locations/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EvseUid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evse_uid", runtime.ParamLocationQuery, *params.EvseUid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ConnectorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connector_id", runtime.ParamLocationQuery, *params.ConnectorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOcpiLocationsCountryCodePartyIdLocationIdRequest calls the generic PutOcpiLocationsCountryCodePartyIdLocationId builder with application/json body
func NewPutOcpiLocationsCountryCodePartyIdLocationIdRequest(server string, countryCode string, partyId string, locationId string, params *PutOcpiLocationsCountryCodePartyIdLocationIdParams, body PutOcpiLocationsCountryCodePartyIdLocationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOcpiLocationsCountryCodePartyIdLocationIdRequestWithBody(server, countryCode, partyId, locationId, params, "application/json", bodyReader)
}

// NewPutOcpiLocationsCountryCodePartyIdLocationIdRequestWithBody generates requests for PutOcpiLocationsCountryCodePartyIdLocationId with any type of body
func NewPutOcpiLocationsCountryCodePartyIdLocationIdRequestWithBody(server string, countryCode string, partyId string, locationId string, params *PutOcpiLocationsCountryCodePartyIdLocationIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "location_id", runtime.ParamLocationPath, locationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/locations/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EvseUid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evse_uid", runtime.ParamLocationQuery, *params.EvseUid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ConnectorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connector_id", runtime.ParamLocationQuery, *params.ConnectorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOcpiLocationsLocationIdRequest generates requests for GetOcpiLocationsLocationId
func NewGetOcpiLocationsLocationIdRequest(server string, locationId string, params *GetOcpiLocationsLocationIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location_id", runtime.ParamLocationPath, locationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EvseUid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evse_uid", runtime.ParamLocationQuery, *params.EvseUid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ConnectorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "connector_id", runtime.ParamLocationQuery, *params.ConnectorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOcpiSessionsRequest generates requests for GetOcpiSessions
func NewGetOcpiSessionsRequest(server string, params *GetOcpiSessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOcpiSessionsCountryCodePartyIdSessionIdRequest generates requests for GetOcpiSessionsCountryCodePartyIdSessionId
func NewGetOcpiSessionsCountryCodePartyIdSessionIdRequest(server string, countryCode string, partyId string, sessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "session_id", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/sessions/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOcpiSessionsCountryCodePartyIdSessionIdRequest generates requests for PatchOcpiSessionsCountryCodePartyIdSessionId
func NewPatchOcpiSessionsCountryCodePartyIdSessionIdRequest(server string, countryCode string, partyId string, sessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "session_id", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/sessions/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOcpiSessionsCountryCodePartyIdSessionIdRequest calls the generic PutOcpiSessionsCountryCodePartyIdSessionId builder with application/json body
func NewPutOcpiSessionsCountryCodePartyIdSessionIdRequest(server string, countryCode string, partyId string, sessionId string, body PutOcpiSessionsCountryCodePartyIdSessionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOcpiSessionsCountryCodePartyIdSessionIdRequestWithBody(server, countryCode, partyId, sessionId, "application/json", bodyReader)
}

// NewPutOcpiSessionsCountryCodePartyIdSessionIdRequestWithBody generates requests for PutOcpiSessionsCountryCodePartyIdSessionId with any type of body
func NewPutOcpiSessionsCountryCodePartyIdSessionIdRequestWithBody(server string, countryCode string, partyId string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "session_id", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/sessions/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOcpiSessionsSessionIdChargingPreferencesRequest calls the generic PutOcpiSessionsSessionIdChargingPreferences builder with application/json body
func NewPutOcpiSessionsSessionIdChargingPreferencesRequest(server string, sessionId string, body PutOcpiSessionsSessionIdChargingPreferencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOcpiSessionsSessionIdChargingPreferencesRequestWithBody(server, sessionId, "application/json", bodyReader)
}

// NewPutOcpiSessionsSessionIdChargingPreferencesRequestWithBody generates requests for PutOcpiSessionsSessionIdChargingPreferences with any type of body
func NewPutOcpiSessionsSessionIdChargingPreferencesRequestWithBody(server string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "session_id", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/sessions/%s/charging_preferences", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOcpiTariffsRequest generates requests for GetOcpiTariffs
func NewGetOcpiTariffsRequest(server string, params *GetOcpiTariffsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/tariffs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOcpiTariffsCountryCodePartyIdTariffIdRequest generates requests for DeleteOcpiTariffsCountryCodePartyIdTariffId
func NewDeleteOcpiTariffsCountryCodePartyIdTariffIdRequest(server string, countryCode string, partyId string, tariffId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tariff_id", runtime.ParamLocationPath, tariffId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/tariffs/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOcpiTariffsCountryCodePartyIdTariffIdRequest generates requests for GetOcpiTariffsCountryCodePartyIdTariffId
func NewGetOcpiTariffsCountryCodePartyIdTariffIdRequest(server string, countryCode string, partyId string, tariffId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tariff_id", runtime.ParamLocationPath, tariffId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/tariffs/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOcpiTariffsCountryCodePartyIdTariffIdRequest calls the generic PutOcpiTariffsCountryCodePartyIdTariffId builder with application/json body
func NewPutOcpiTariffsCountryCodePartyIdTariffIdRequest(server string, countryCode string, partyId string, tariffId string, body PutOcpiTariffsCountryCodePartyIdTariffIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOcpiTariffsCountryCodePartyIdTariffIdRequestWithBody(server, countryCode, partyId, tariffId, "application/json", bodyReader)
}

// NewPutOcpiTariffsCountryCodePartyIdTariffIdRequestWithBody generates requests for PutOcpiTariffsCountryCodePartyIdTariffId with any type of body
func NewPutOcpiTariffsCountryCodePartyIdTariffIdRequestWithBody(server string, countryCode string, partyId string, tariffId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tariff_id", runtime.ParamLocationPath, tariffId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/tariffs/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOcpiTokensRequest generates requests for GetOcpiTokens
func NewGetOcpiTokensRequest(server string, params *GetOcpiTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOcpiTokensCountryCodePartyIdTokenUidRequest generates requests for GetOcpiTokensCountryCodePartyIdTokenUid
func NewGetOcpiTokensCountryCodePartyIdTokenUidRequest(server string, countryCode string, partyId string, tokenUid string, params *GetOcpiTokensCountryCodePartyIdTokenUidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "token_uid", runtime.ParamLocationPath, tokenUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/tokens/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOcpiTokensCountryCodePartyIdTokenUidRequest generates requests for PatchOcpiTokensCountryCodePartyIdTokenUid
func NewPatchOcpiTokensCountryCodePartyIdTokenUidRequest(server string, countryCode string, partyId string, tokenUid string, params *PatchOcpiTokensCountryCodePartyIdTokenUidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "token_uid", runtime.ParamLocationPath, tokenUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/tokens/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOcpiTokensCountryCodePartyIdTokenUidRequest calls the generic PutOcpiTokensCountryCodePartyIdTokenUid builder with application/json body
func NewPutOcpiTokensCountryCodePartyIdTokenUidRequest(server string, countryCode string, partyId string, tokenUid string, params *PutOcpiTokensCountryCodePartyIdTokenUidParams, body PutOcpiTokensCountryCodePartyIdTokenUidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOcpiTokensCountryCodePartyIdTokenUidRequestWithBody(server, countryCode, partyId, tokenUid, params, "application/json", bodyReader)
}

// NewPutOcpiTokensCountryCodePartyIdTokenUidRequestWithBody generates requests for PutOcpiTokensCountryCodePartyIdTokenUid with any type of body
func NewPutOcpiTokensCountryCodePartyIdTokenUidRequestWithBody(server string, countryCode string, partyId string, tokenUid string, params *PutOcpiTokensCountryCodePartyIdTokenUidParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country_code", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "party_id", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "token_uid", runtime.ParamLocationPath, tokenUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/tokens/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOcpiVersionsRequest generates requests for GetOcpiVersions
func NewGetOcpiVersionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOcpiTokenUidAuthorizeRequest calls the generic PostOcpiTokenUidAuthorize builder with application/json body
func NewPostOcpiTokenUidAuthorizeRequest(server string, tokenUid string, params *PostOcpiTokenUidAuthorizeParams, body PostOcpiTokenUidAuthorizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOcpiTokenUidAuthorizeRequestWithBody(server, tokenUid, params, "application/json", bodyReader)
}

// NewPostOcpiTokenUidAuthorizeRequestWithBody generates requests for PostOcpiTokenUidAuthorize with any type of body
func NewPostOcpiTokenUidAuthorizeRequestWithBody(server string, tokenUid string, params *PostOcpiTokenUidAuthorizeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token_uid", runtime.ParamLocationPath, tokenUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ocpi/%s/authorize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteOcpi221CredentialsWithResponse request
	DeleteOcpi221CredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteOcpi221CredentialsResponse, error)

	// GetOcpi221CredentialsWithResponse request
	GetOcpi221CredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOcpi221CredentialsResponse, error)

	// PostOcpi221CredentialsWithBodyWithResponse request with any body
	PostOcpi221CredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpi221CredentialsResponse, error)

	PostOcpi221CredentialsWithResponse(ctx context.Context, body PostOcpi221CredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpi221CredentialsResponse, error)

	// PutOcpi221CredentialsWithBodyWithResponse request with any body
	PutOcpi221CredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpi221CredentialsResponse, error)

	PutOcpi221CredentialsWithResponse(ctx context.Context, body PutOcpi221CredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpi221CredentialsResponse, error)

	// GetOcpi221DetailsWithResponse request
	GetOcpi221DetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOcpi221DetailsResponse, error)

	// GetOcpiCdrsWithResponse request
	GetOcpiCdrsWithResponse(ctx context.Context, params *GetOcpiCdrsParams, reqEditors ...RequestEditorFn) (*GetOcpiCdrsResponse, error)

	// PostOcpiCdrsWithBodyWithResponse request with any body
	PostOcpiCdrsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpiCdrsResponse, error)

	PostOcpiCdrsWithResponse(ctx context.Context, body PostOcpiCdrsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpiCdrsResponse, error)

	// PostOcpiChargingprofileWithBodyWithResponse request with any body
	PostOcpiChargingprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpiChargingprofileResponse, error)

	PostOcpiChargingprofileWithResponse(ctx context.Context, body PostOcpiChargingprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpiChargingprofileResponse, error)

	// PutOcpiChargingprofileSessionIdWithBodyWithResponse request with any body
	PutOcpiChargingprofileSessionIdWithBodyWithResponse(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiChargingprofileSessionIdResponse, error)

	PutOcpiChargingprofileSessionIdWithResponse(ctx context.Context, sessionId string, body PutOcpiChargingprofileSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiChargingprofileSessionIdResponse, error)

	// PutOcpiChargingprofilesSessionIdWithBodyWithResponse request with any body
	PutOcpiChargingprofilesSessionIdWithBodyWithResponse(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiChargingprofilesSessionIdResponse, error)

	PutOcpiChargingprofilesSessionIdWithResponse(ctx context.Context, sessionId string, body PutOcpiChargingprofilesSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiChargingprofilesSessionIdResponse, error)

	// GetOcpiChargingprofilesSessionIdDurationResponseUrlWithResponse request
	GetOcpiChargingprofilesSessionIdDurationResponseUrlWithResponse(ctx context.Context, sessionId string, duration int, responseUrl string, reqEditors ...RequestEditorFn) (*GetOcpiChargingprofilesSessionIdDurationResponseUrlResponse, error)

	// DeleteOcpiChargingprofilesSessionIdResponseUrlWithResponse request
	DeleteOcpiChargingprofilesSessionIdResponseUrlWithResponse(ctx context.Context, sessionId string, responseUrl string, reqEditors ...RequestEditorFn) (*DeleteOcpiChargingprofilesSessionIdResponseUrlResponse, error)

	// GetOcpiClientinfoCountryCodePartyIdWithResponse request
	GetOcpiClientinfoCountryCodePartyIdWithResponse(ctx context.Context, countryCode string, partyId string, reqEditors ...RequestEditorFn) (*GetOcpiClientinfoCountryCodePartyIdResponse, error)

	// PutOcpiClientinfoCountryCodePartyIdWithBodyWithResponse request with any body
	PutOcpiClientinfoCountryCodePartyIdWithBodyWithResponse(ctx context.Context, countryCode string, partyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiClientinfoCountryCodePartyIdResponse, error)

	PutOcpiClientinfoCountryCodePartyIdWithResponse(ctx context.Context, countryCode string, partyId string, body PutOcpiClientinfoCountryCodePartyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiClientinfoCountryCodePartyIdResponse, error)

	// PostOcpiCommandsCommandWithBodyWithResponse request with any body
	PostOcpiCommandsCommandWithBodyWithResponse(ctx context.Context, command PostOcpiCommandsCommandParamsCommand, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpiCommandsCommandResponse, error)

	PostOcpiCommandsCommandWithResponse(ctx context.Context, command PostOcpiCommandsCommandParamsCommand, body PostOcpiCommandsCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpiCommandsCommandResponse, error)

	// PostOcpiCommandsCommandUidWithBodyWithResponse request with any body
	PostOcpiCommandsCommandUidWithBodyWithResponse(ctx context.Context, command PostOcpiCommandsCommandUidParamsCommand, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpiCommandsCommandUidResponse, error)

	PostOcpiCommandsCommandUidWithResponse(ctx context.Context, command PostOcpiCommandsCommandUidParamsCommand, uid string, body PostOcpiCommandsCommandUidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpiCommandsCommandUidResponse, error)

	// GetOcpiHubclientinfoWithResponse request
	GetOcpiHubclientinfoWithResponse(ctx context.Context, params *GetOcpiHubclientinfoParams, reqEditors ...RequestEditorFn) (*GetOcpiHubclientinfoResponse, error)

	// GetOcpiLocationsWithResponse request
	GetOcpiLocationsWithResponse(ctx context.Context, params *GetOcpiLocationsParams, reqEditors ...RequestEditorFn) (*GetOcpiLocationsResponse, error)

	// GetOcpiLocationsCountryCodePartyIdLocationIdWithResponse request
	GetOcpiLocationsCountryCodePartyIdLocationIdWithResponse(ctx context.Context, countryCode string, partyId string, locationId string, params *GetOcpiLocationsCountryCodePartyIdLocationIdParams, reqEditors ...RequestEditorFn) (*GetOcpiLocationsCountryCodePartyIdLocationIdResponse, error)

	// PatchOcpiLocationsCountryCodePartyIdLocationIdWithResponse request
	PatchOcpiLocationsCountryCodePartyIdLocationIdWithResponse(ctx context.Context, countryCode string, partyId string, locationId string, params *PatchOcpiLocationsCountryCodePartyIdLocationIdParams, reqEditors ...RequestEditorFn) (*PatchOcpiLocationsCountryCodePartyIdLocationIdResponse, error)

	// PutOcpiLocationsCountryCodePartyIdLocationIdWithBodyWithResponse request with any body
	PutOcpiLocationsCountryCodePartyIdLocationIdWithBodyWithResponse(ctx context.Context, countryCode string, partyId string, locationId string, params *PutOcpiLocationsCountryCodePartyIdLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiLocationsCountryCodePartyIdLocationIdResponse, error)

	PutOcpiLocationsCountryCodePartyIdLocationIdWithResponse(ctx context.Context, countryCode string, partyId string, locationId string, params *PutOcpiLocationsCountryCodePartyIdLocationIdParams, body PutOcpiLocationsCountryCodePartyIdLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiLocationsCountryCodePartyIdLocationIdResponse, error)

	// GetOcpiLocationsLocationIdWithResponse request
	GetOcpiLocationsLocationIdWithResponse(ctx context.Context, locationId string, params *GetOcpiLocationsLocationIdParams, reqEditors ...RequestEditorFn) (*GetOcpiLocationsLocationIdResponse, error)

	// GetOcpiSessionsWithResponse request
	GetOcpiSessionsWithResponse(ctx context.Context, params *GetOcpiSessionsParams, reqEditors ...RequestEditorFn) (*GetOcpiSessionsResponse, error)

	// GetOcpiSessionsCountryCodePartyIdSessionIdWithResponse request
	GetOcpiSessionsCountryCodePartyIdSessionIdWithResponse(ctx context.Context, countryCode string, partyId string, sessionId string, reqEditors ...RequestEditorFn) (*GetOcpiSessionsCountryCodePartyIdSessionIdResponse, error)

	// PatchOcpiSessionsCountryCodePartyIdSessionIdWithResponse request
	PatchOcpiSessionsCountryCodePartyIdSessionIdWithResponse(ctx context.Context, countryCode string, partyId string, sessionId string, reqEditors ...RequestEditorFn) (*PatchOcpiSessionsCountryCodePartyIdSessionIdResponse, error)

	// PutOcpiSessionsCountryCodePartyIdSessionIdWithBodyWithResponse request with any body
	PutOcpiSessionsCountryCodePartyIdSessionIdWithBodyWithResponse(ctx context.Context, countryCode string, partyId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiSessionsCountryCodePartyIdSessionIdResponse, error)

	PutOcpiSessionsCountryCodePartyIdSessionIdWithResponse(ctx context.Context, countryCode string, partyId string, sessionId string, body PutOcpiSessionsCountryCodePartyIdSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiSessionsCountryCodePartyIdSessionIdResponse, error)

	// PutOcpiSessionsSessionIdChargingPreferencesWithBodyWithResponse request with any body
	PutOcpiSessionsSessionIdChargingPreferencesWithBodyWithResponse(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiSessionsSessionIdChargingPreferencesResponse, error)

	PutOcpiSessionsSessionIdChargingPreferencesWithResponse(ctx context.Context, sessionId string, body PutOcpiSessionsSessionIdChargingPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiSessionsSessionIdChargingPreferencesResponse, error)

	// GetOcpiTariffsWithResponse request
	GetOcpiTariffsWithResponse(ctx context.Context, params *GetOcpiTariffsParams, reqEditors ...RequestEditorFn) (*GetOcpiTariffsResponse, error)

	// DeleteOcpiTariffsCountryCodePartyIdTariffIdWithResponse request
	DeleteOcpiTariffsCountryCodePartyIdTariffIdWithResponse(ctx context.Context, countryCode string, partyId string, tariffId string, reqEditors ...RequestEditorFn) (*DeleteOcpiTariffsCountryCodePartyIdTariffIdResponse, error)

	// GetOcpiTariffsCountryCodePartyIdTariffIdWithResponse request
	GetOcpiTariffsCountryCodePartyIdTariffIdWithResponse(ctx context.Context, countryCode string, partyId string, tariffId string, reqEditors ...RequestEditorFn) (*GetOcpiTariffsCountryCodePartyIdTariffIdResponse, error)

	// PutOcpiTariffsCountryCodePartyIdTariffIdWithBodyWithResponse request with any body
	PutOcpiTariffsCountryCodePartyIdTariffIdWithBodyWithResponse(ctx context.Context, countryCode string, partyId string, tariffId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiTariffsCountryCodePartyIdTariffIdResponse, error)

	PutOcpiTariffsCountryCodePartyIdTariffIdWithResponse(ctx context.Context, countryCode string, partyId string, tariffId string, body PutOcpiTariffsCountryCodePartyIdTariffIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiTariffsCountryCodePartyIdTariffIdResponse, error)

	// GetOcpiTokensWithResponse request
	GetOcpiTokensWithResponse(ctx context.Context, params *GetOcpiTokensParams, reqEditors ...RequestEditorFn) (*GetOcpiTokensResponse, error)

	// GetOcpiTokensCountryCodePartyIdTokenUidWithResponse request
	GetOcpiTokensCountryCodePartyIdTokenUidWithResponse(ctx context.Context, countryCode string, partyId string, tokenUid string, params *GetOcpiTokensCountryCodePartyIdTokenUidParams, reqEditors ...RequestEditorFn) (*GetOcpiTokensCountryCodePartyIdTokenUidResponse, error)

	// PatchOcpiTokensCountryCodePartyIdTokenUidWithResponse request
	PatchOcpiTokensCountryCodePartyIdTokenUidWithResponse(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PatchOcpiTokensCountryCodePartyIdTokenUidParams, reqEditors ...RequestEditorFn) (*PatchOcpiTokensCountryCodePartyIdTokenUidResponse, error)

	// PutOcpiTokensCountryCodePartyIdTokenUidWithBodyWithResponse request with any body
	PutOcpiTokensCountryCodePartyIdTokenUidWithBodyWithResponse(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PutOcpiTokensCountryCodePartyIdTokenUidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiTokensCountryCodePartyIdTokenUidResponse, error)

	PutOcpiTokensCountryCodePartyIdTokenUidWithResponse(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PutOcpiTokensCountryCodePartyIdTokenUidParams, body PutOcpiTokensCountryCodePartyIdTokenUidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiTokensCountryCodePartyIdTokenUidResponse, error)

	// GetOcpiVersionsWithResponse request
	GetOcpiVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOcpiVersionsResponse, error)

	// PostOcpiTokenUidAuthorizeWithBodyWithResponse request with any body
	PostOcpiTokenUidAuthorizeWithBodyWithResponse(ctx context.Context, tokenUid string, params *PostOcpiTokenUidAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpiTokenUidAuthorizeResponse, error)

	PostOcpiTokenUidAuthorizeWithResponse(ctx context.Context, tokenUid string, params *PostOcpiTokenUidAuthorizeParams, body PostOcpiTokenUidAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpiTokenUidAuthorizeResponse, error)
}

type DeleteOcpi221CredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credentials
	JSON405      *GenericError
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r DeleteOcpi221CredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOcpi221CredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpi221CredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credentials
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpi221CredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpi221CredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOcpi221CredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credentials
	JSON405      *GenericError
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PostOcpi221CredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOcpi221CredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOcpi221CredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credentials
	JSON405      *GenericError
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PutOcpi221CredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOcpi221CredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpi221DetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Details
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpi221DetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpi221DetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiCdrsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CdrsResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiCdrsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiCdrsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOcpiCdrsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CdrResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PostOcpiCdrsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOcpiCdrsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOcpiChargingprofileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PostOcpiChargingprofileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOcpiChargingprofileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOcpiChargingprofileSessionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PutOcpiChargingprofileSessionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOcpiChargingprofileSessionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOcpiChargingprofilesSessionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChargingProfilesResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PutOcpiChargingprofilesSessionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOcpiChargingprofilesSessionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiChargingprofilesSessionIdDurationResponseUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChargingProfilesResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiChargingprofilesSessionIdDurationResponseUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiChargingprofilesSessionIdDurationResponseUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOcpiChargingprofilesSessionIdResponseUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChargingProfilesResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r DeleteOcpiChargingprofilesSessionIdResponseUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOcpiChargingprofilesSessionIdResponseUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiClientinfoCountryCodePartyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientsInfoResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiClientinfoCountryCodePartyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiClientinfoCountryCodePartyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOcpiClientinfoCountryCodePartyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientsInfoResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PutOcpiClientinfoCountryCodePartyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOcpiClientinfoCountryCodePartyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOcpiCommandsCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommandResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PostOcpiCommandsCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOcpiCommandsCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOcpiCommandsCommandUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommandResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PostOcpiCommandsCommandUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOcpiCommandsCommandUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiHubclientinfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientInfoResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiHubclientinfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiHubclientinfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Locations
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiLocationsCountryCodePartyIdLocationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OcpiLocationsLocationIdGet200Response
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiLocationsCountryCodePartyIdLocationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiLocationsCountryCodePartyIdLocationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOcpiLocationsCountryCodePartyIdLocationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OcpiLocationsLocationIdGet200Response
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PatchOcpiLocationsCountryCodePartyIdLocationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOcpiLocationsCountryCodePartyIdLocationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOcpiLocationsCountryCodePartyIdLocationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OcpiLocationsLocationIdGet200Response
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PutOcpiLocationsCountryCodePartyIdLocationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOcpiLocationsCountryCodePartyIdLocationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiLocationsLocationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OcpiLocationsLocationIdGet200Response
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiLocationsLocationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiLocationsLocationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionsResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiSessionsCountryCodePartyIdSessionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiSessionsCountryCodePartyIdSessionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiSessionsCountryCodePartyIdSessionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOcpiSessionsCountryCodePartyIdSessionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PatchOcpiSessionsCountryCodePartyIdSessionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOcpiSessionsCountryCodePartyIdSessionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOcpiSessionsCountryCodePartyIdSessionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PutOcpiSessionsCountryCodePartyIdSessionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOcpiSessionsCountryCodePartyIdSessionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOcpiSessionsSessionIdChargingPreferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChargingPreferencesResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PutOcpiSessionsSessionIdChargingPreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOcpiSessionsSessionIdChargingPreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiTariffsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TariffsResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiTariffsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiTariffsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOcpiTariffsCountryCodePartyIdTariffIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TariffDeleteResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r DeleteOcpiTariffsCountryCodePartyIdTariffIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOcpiTariffsCountryCodePartyIdTariffIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiTariffsCountryCodePartyIdTariffIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TariffResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiTariffsCountryCodePartyIdTariffIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiTariffsCountryCodePartyIdTariffIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOcpiTariffsCountryCodePartyIdTariffIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TariffResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PutOcpiTariffsCountryCodePartyIdTariffIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOcpiTariffsCountryCodePartyIdTariffIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokensResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiTokensCountryCodePartyIdTokenUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiTokensCountryCodePartyIdTokenUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiTokensCountryCodePartyIdTokenUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOcpiTokensCountryCodePartyIdTokenUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PatchOcpiTokensCountryCodePartyIdTokenUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOcpiTokensCountryCodePartyIdTokenUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOcpiTokensCountryCodePartyIdTokenUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponse
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PutOcpiTokensCountryCodePartyIdTokenUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOcpiTokensCountryCodePartyIdTokenUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOcpiVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Versions
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r GetOcpiVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOcpiVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOcpiTokenUidAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authorization
	JSONDefault  *GenericError
}

// Status returns HTTPResponse.Status
func (r PostOcpiTokenUidAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOcpiTokenUidAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteOcpi221CredentialsWithResponse request returning *DeleteOcpi221CredentialsResponse
func (c *ClientWithResponses) DeleteOcpi221CredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteOcpi221CredentialsResponse, error) {
	rsp, err := c.DeleteOcpi221Credentials(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOcpi221CredentialsResponse(rsp)
}

// GetOcpi221CredentialsWithResponse request returning *GetOcpi221CredentialsResponse
func (c *ClientWithResponses) GetOcpi221CredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOcpi221CredentialsResponse, error) {
	rsp, err := c.GetOcpi221Credentials(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpi221CredentialsResponse(rsp)
}

// PostOcpi221CredentialsWithBodyWithResponse request with arbitrary body returning *PostOcpi221CredentialsResponse
func (c *ClientWithResponses) PostOcpi221CredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpi221CredentialsResponse, error) {
	rsp, err := c.PostOcpi221CredentialsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpi221CredentialsResponse(rsp)
}

func (c *ClientWithResponses) PostOcpi221CredentialsWithResponse(ctx context.Context, body PostOcpi221CredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpi221CredentialsResponse, error) {
	rsp, err := c.PostOcpi221Credentials(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpi221CredentialsResponse(rsp)
}

// PutOcpi221CredentialsWithBodyWithResponse request with arbitrary body returning *PutOcpi221CredentialsResponse
func (c *ClientWithResponses) PutOcpi221CredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpi221CredentialsResponse, error) {
	rsp, err := c.PutOcpi221CredentialsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpi221CredentialsResponse(rsp)
}

func (c *ClientWithResponses) PutOcpi221CredentialsWithResponse(ctx context.Context, body PutOcpi221CredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpi221CredentialsResponse, error) {
	rsp, err := c.PutOcpi221Credentials(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpi221CredentialsResponse(rsp)
}

// GetOcpi221DetailsWithResponse request returning *GetOcpi221DetailsResponse
func (c *ClientWithResponses) GetOcpi221DetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOcpi221DetailsResponse, error) {
	rsp, err := c.GetOcpi221Details(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpi221DetailsResponse(rsp)
}

// GetOcpiCdrsWithResponse request returning *GetOcpiCdrsResponse
func (c *ClientWithResponses) GetOcpiCdrsWithResponse(ctx context.Context, params *GetOcpiCdrsParams, reqEditors ...RequestEditorFn) (*GetOcpiCdrsResponse, error) {
	rsp, err := c.GetOcpiCdrs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiCdrsResponse(rsp)
}

// PostOcpiCdrsWithBodyWithResponse request with arbitrary body returning *PostOcpiCdrsResponse
func (c *ClientWithResponses) PostOcpiCdrsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpiCdrsResponse, error) {
	rsp, err := c.PostOcpiCdrsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpiCdrsResponse(rsp)
}

func (c *ClientWithResponses) PostOcpiCdrsWithResponse(ctx context.Context, body PostOcpiCdrsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpiCdrsResponse, error) {
	rsp, err := c.PostOcpiCdrs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpiCdrsResponse(rsp)
}

// PostOcpiChargingprofileWithBodyWithResponse request with arbitrary body returning *PostOcpiChargingprofileResponse
func (c *ClientWithResponses) PostOcpiChargingprofileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpiChargingprofileResponse, error) {
	rsp, err := c.PostOcpiChargingprofileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpiChargingprofileResponse(rsp)
}

func (c *ClientWithResponses) PostOcpiChargingprofileWithResponse(ctx context.Context, body PostOcpiChargingprofileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpiChargingprofileResponse, error) {
	rsp, err := c.PostOcpiChargingprofile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpiChargingprofileResponse(rsp)
}

// PutOcpiChargingprofileSessionIdWithBodyWithResponse request with arbitrary body returning *PutOcpiChargingprofileSessionIdResponse
func (c *ClientWithResponses) PutOcpiChargingprofileSessionIdWithBodyWithResponse(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiChargingprofileSessionIdResponse, error) {
	rsp, err := c.PutOcpiChargingprofileSessionIdWithBody(ctx, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiChargingprofileSessionIdResponse(rsp)
}

func (c *ClientWithResponses) PutOcpiChargingprofileSessionIdWithResponse(ctx context.Context, sessionId string, body PutOcpiChargingprofileSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiChargingprofileSessionIdResponse, error) {
	rsp, err := c.PutOcpiChargingprofileSessionId(ctx, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiChargingprofileSessionIdResponse(rsp)
}

// PutOcpiChargingprofilesSessionIdWithBodyWithResponse request with arbitrary body returning *PutOcpiChargingprofilesSessionIdResponse
func (c *ClientWithResponses) PutOcpiChargingprofilesSessionIdWithBodyWithResponse(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiChargingprofilesSessionIdResponse, error) {
	rsp, err := c.PutOcpiChargingprofilesSessionIdWithBody(ctx, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiChargingprofilesSessionIdResponse(rsp)
}

func (c *ClientWithResponses) PutOcpiChargingprofilesSessionIdWithResponse(ctx context.Context, sessionId string, body PutOcpiChargingprofilesSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiChargingprofilesSessionIdResponse, error) {
	rsp, err := c.PutOcpiChargingprofilesSessionId(ctx, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiChargingprofilesSessionIdResponse(rsp)
}

// GetOcpiChargingprofilesSessionIdDurationResponseUrlWithResponse request returning *GetOcpiChargingprofilesSessionIdDurationResponseUrlResponse
func (c *ClientWithResponses) GetOcpiChargingprofilesSessionIdDurationResponseUrlWithResponse(ctx context.Context, sessionId string, duration int, responseUrl string, reqEditors ...RequestEditorFn) (*GetOcpiChargingprofilesSessionIdDurationResponseUrlResponse, error) {
	rsp, err := c.GetOcpiChargingprofilesSessionIdDurationResponseUrl(ctx, sessionId, duration, responseUrl, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiChargingprofilesSessionIdDurationResponseUrlResponse(rsp)
}

// DeleteOcpiChargingprofilesSessionIdResponseUrlWithResponse request returning *DeleteOcpiChargingprofilesSessionIdResponseUrlResponse
func (c *ClientWithResponses) DeleteOcpiChargingprofilesSessionIdResponseUrlWithResponse(ctx context.Context, sessionId string, responseUrl string, reqEditors ...RequestEditorFn) (*DeleteOcpiChargingprofilesSessionIdResponseUrlResponse, error) {
	rsp, err := c.DeleteOcpiChargingprofilesSessionIdResponseUrl(ctx, sessionId, responseUrl, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOcpiChargingprofilesSessionIdResponseUrlResponse(rsp)
}

// GetOcpiClientinfoCountryCodePartyIdWithResponse request returning *GetOcpiClientinfoCountryCodePartyIdResponse
func (c *ClientWithResponses) GetOcpiClientinfoCountryCodePartyIdWithResponse(ctx context.Context, countryCode string, partyId string, reqEditors ...RequestEditorFn) (*GetOcpiClientinfoCountryCodePartyIdResponse, error) {
	rsp, err := c.GetOcpiClientinfoCountryCodePartyId(ctx, countryCode, partyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiClientinfoCountryCodePartyIdResponse(rsp)
}

// PutOcpiClientinfoCountryCodePartyIdWithBodyWithResponse request with arbitrary body returning *PutOcpiClientinfoCountryCodePartyIdResponse
func (c *ClientWithResponses) PutOcpiClientinfoCountryCodePartyIdWithBodyWithResponse(ctx context.Context, countryCode string, partyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiClientinfoCountryCodePartyIdResponse, error) {
	rsp, err := c.PutOcpiClientinfoCountryCodePartyIdWithBody(ctx, countryCode, partyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiClientinfoCountryCodePartyIdResponse(rsp)
}

func (c *ClientWithResponses) PutOcpiClientinfoCountryCodePartyIdWithResponse(ctx context.Context, countryCode string, partyId string, body PutOcpiClientinfoCountryCodePartyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiClientinfoCountryCodePartyIdResponse, error) {
	rsp, err := c.PutOcpiClientinfoCountryCodePartyId(ctx, countryCode, partyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiClientinfoCountryCodePartyIdResponse(rsp)
}

// PostOcpiCommandsCommandWithBodyWithResponse request with arbitrary body returning *PostOcpiCommandsCommandResponse
func (c *ClientWithResponses) PostOcpiCommandsCommandWithBodyWithResponse(ctx context.Context, command PostOcpiCommandsCommandParamsCommand, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpiCommandsCommandResponse, error) {
	rsp, err := c.PostOcpiCommandsCommandWithBody(ctx, command, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpiCommandsCommandResponse(rsp)
}

func (c *ClientWithResponses) PostOcpiCommandsCommandWithResponse(ctx context.Context, command PostOcpiCommandsCommandParamsCommand, body PostOcpiCommandsCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpiCommandsCommandResponse, error) {
	rsp, err := c.PostOcpiCommandsCommand(ctx, command, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpiCommandsCommandResponse(rsp)
}

// PostOcpiCommandsCommandUidWithBodyWithResponse request with arbitrary body returning *PostOcpiCommandsCommandUidResponse
func (c *ClientWithResponses) PostOcpiCommandsCommandUidWithBodyWithResponse(ctx context.Context, command PostOcpiCommandsCommandUidParamsCommand, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpiCommandsCommandUidResponse, error) {
	rsp, err := c.PostOcpiCommandsCommandUidWithBody(ctx, command, uid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpiCommandsCommandUidResponse(rsp)
}

func (c *ClientWithResponses) PostOcpiCommandsCommandUidWithResponse(ctx context.Context, command PostOcpiCommandsCommandUidParamsCommand, uid string, body PostOcpiCommandsCommandUidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpiCommandsCommandUidResponse, error) {
	rsp, err := c.PostOcpiCommandsCommandUid(ctx, command, uid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpiCommandsCommandUidResponse(rsp)
}

// GetOcpiHubclientinfoWithResponse request returning *GetOcpiHubclientinfoResponse
func (c *ClientWithResponses) GetOcpiHubclientinfoWithResponse(ctx context.Context, params *GetOcpiHubclientinfoParams, reqEditors ...RequestEditorFn) (*GetOcpiHubclientinfoResponse, error) {
	rsp, err := c.GetOcpiHubclientinfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiHubclientinfoResponse(rsp)
}

// GetOcpiLocationsWithResponse request returning *GetOcpiLocationsResponse
func (c *ClientWithResponses) GetOcpiLocationsWithResponse(ctx context.Context, params *GetOcpiLocationsParams, reqEditors ...RequestEditorFn) (*GetOcpiLocationsResponse, error) {
	rsp, err := c.GetOcpiLocations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiLocationsResponse(rsp)
}

// GetOcpiLocationsCountryCodePartyIdLocationIdWithResponse request returning *GetOcpiLocationsCountryCodePartyIdLocationIdResponse
func (c *ClientWithResponses) GetOcpiLocationsCountryCodePartyIdLocationIdWithResponse(ctx context.Context, countryCode string, partyId string, locationId string, params *GetOcpiLocationsCountryCodePartyIdLocationIdParams, reqEditors ...RequestEditorFn) (*GetOcpiLocationsCountryCodePartyIdLocationIdResponse, error) {
	rsp, err := c.GetOcpiLocationsCountryCodePartyIdLocationId(ctx, countryCode, partyId, locationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiLocationsCountryCodePartyIdLocationIdResponse(rsp)
}

// PatchOcpiLocationsCountryCodePartyIdLocationIdWithResponse request returning *PatchOcpiLocationsCountryCodePartyIdLocationIdResponse
func (c *ClientWithResponses) PatchOcpiLocationsCountryCodePartyIdLocationIdWithResponse(ctx context.Context, countryCode string, partyId string, locationId string, params *PatchOcpiLocationsCountryCodePartyIdLocationIdParams, reqEditors ...RequestEditorFn) (*PatchOcpiLocationsCountryCodePartyIdLocationIdResponse, error) {
	rsp, err := c.PatchOcpiLocationsCountryCodePartyIdLocationId(ctx, countryCode, partyId, locationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOcpiLocationsCountryCodePartyIdLocationIdResponse(rsp)
}

// PutOcpiLocationsCountryCodePartyIdLocationIdWithBodyWithResponse request with arbitrary body returning *PutOcpiLocationsCountryCodePartyIdLocationIdResponse
func (c *ClientWithResponses) PutOcpiLocationsCountryCodePartyIdLocationIdWithBodyWithResponse(ctx context.Context, countryCode string, partyId string, locationId string, params *PutOcpiLocationsCountryCodePartyIdLocationIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiLocationsCountryCodePartyIdLocationIdResponse, error) {
	rsp, err := c.PutOcpiLocationsCountryCodePartyIdLocationIdWithBody(ctx, countryCode, partyId, locationId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiLocationsCountryCodePartyIdLocationIdResponse(rsp)
}

func (c *ClientWithResponses) PutOcpiLocationsCountryCodePartyIdLocationIdWithResponse(ctx context.Context, countryCode string, partyId string, locationId string, params *PutOcpiLocationsCountryCodePartyIdLocationIdParams, body PutOcpiLocationsCountryCodePartyIdLocationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiLocationsCountryCodePartyIdLocationIdResponse, error) {
	rsp, err := c.PutOcpiLocationsCountryCodePartyIdLocationId(ctx, countryCode, partyId, locationId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiLocationsCountryCodePartyIdLocationIdResponse(rsp)
}

// GetOcpiLocationsLocationIdWithResponse request returning *GetOcpiLocationsLocationIdResponse
func (c *ClientWithResponses) GetOcpiLocationsLocationIdWithResponse(ctx context.Context, locationId string, params *GetOcpiLocationsLocationIdParams, reqEditors ...RequestEditorFn) (*GetOcpiLocationsLocationIdResponse, error) {
	rsp, err := c.GetOcpiLocationsLocationId(ctx, locationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiLocationsLocationIdResponse(rsp)
}

// GetOcpiSessionsWithResponse request returning *GetOcpiSessionsResponse
func (c *ClientWithResponses) GetOcpiSessionsWithResponse(ctx context.Context, params *GetOcpiSessionsParams, reqEditors ...RequestEditorFn) (*GetOcpiSessionsResponse, error) {
	rsp, err := c.GetOcpiSessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiSessionsResponse(rsp)
}

// GetOcpiSessionsCountryCodePartyIdSessionIdWithResponse request returning *GetOcpiSessionsCountryCodePartyIdSessionIdResponse
func (c *ClientWithResponses) GetOcpiSessionsCountryCodePartyIdSessionIdWithResponse(ctx context.Context, countryCode string, partyId string, sessionId string, reqEditors ...RequestEditorFn) (*GetOcpiSessionsCountryCodePartyIdSessionIdResponse, error) {
	rsp, err := c.GetOcpiSessionsCountryCodePartyIdSessionId(ctx, countryCode, partyId, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiSessionsCountryCodePartyIdSessionIdResponse(rsp)
}

// PatchOcpiSessionsCountryCodePartyIdSessionIdWithResponse request returning *PatchOcpiSessionsCountryCodePartyIdSessionIdResponse
func (c *ClientWithResponses) PatchOcpiSessionsCountryCodePartyIdSessionIdWithResponse(ctx context.Context, countryCode string, partyId string, sessionId string, reqEditors ...RequestEditorFn) (*PatchOcpiSessionsCountryCodePartyIdSessionIdResponse, error) {
	rsp, err := c.PatchOcpiSessionsCountryCodePartyIdSessionId(ctx, countryCode, partyId, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOcpiSessionsCountryCodePartyIdSessionIdResponse(rsp)
}

// PutOcpiSessionsCountryCodePartyIdSessionIdWithBodyWithResponse request with arbitrary body returning *PutOcpiSessionsCountryCodePartyIdSessionIdResponse
func (c *ClientWithResponses) PutOcpiSessionsCountryCodePartyIdSessionIdWithBodyWithResponse(ctx context.Context, countryCode string, partyId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiSessionsCountryCodePartyIdSessionIdResponse, error) {
	rsp, err := c.PutOcpiSessionsCountryCodePartyIdSessionIdWithBody(ctx, countryCode, partyId, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiSessionsCountryCodePartyIdSessionIdResponse(rsp)
}

func (c *ClientWithResponses) PutOcpiSessionsCountryCodePartyIdSessionIdWithResponse(ctx context.Context, countryCode string, partyId string, sessionId string, body PutOcpiSessionsCountryCodePartyIdSessionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiSessionsCountryCodePartyIdSessionIdResponse, error) {
	rsp, err := c.PutOcpiSessionsCountryCodePartyIdSessionId(ctx, countryCode, partyId, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiSessionsCountryCodePartyIdSessionIdResponse(rsp)
}

// PutOcpiSessionsSessionIdChargingPreferencesWithBodyWithResponse request with arbitrary body returning *PutOcpiSessionsSessionIdChargingPreferencesResponse
func (c *ClientWithResponses) PutOcpiSessionsSessionIdChargingPreferencesWithBodyWithResponse(ctx context.Context, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiSessionsSessionIdChargingPreferencesResponse, error) {
	rsp, err := c.PutOcpiSessionsSessionIdChargingPreferencesWithBody(ctx, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiSessionsSessionIdChargingPreferencesResponse(rsp)
}

func (c *ClientWithResponses) PutOcpiSessionsSessionIdChargingPreferencesWithResponse(ctx context.Context, sessionId string, body PutOcpiSessionsSessionIdChargingPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiSessionsSessionIdChargingPreferencesResponse, error) {
	rsp, err := c.PutOcpiSessionsSessionIdChargingPreferences(ctx, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiSessionsSessionIdChargingPreferencesResponse(rsp)
}

// GetOcpiTariffsWithResponse request returning *GetOcpiTariffsResponse
func (c *ClientWithResponses) GetOcpiTariffsWithResponse(ctx context.Context, params *GetOcpiTariffsParams, reqEditors ...RequestEditorFn) (*GetOcpiTariffsResponse, error) {
	rsp, err := c.GetOcpiTariffs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiTariffsResponse(rsp)
}

// DeleteOcpiTariffsCountryCodePartyIdTariffIdWithResponse request returning *DeleteOcpiTariffsCountryCodePartyIdTariffIdResponse
func (c *ClientWithResponses) DeleteOcpiTariffsCountryCodePartyIdTariffIdWithResponse(ctx context.Context, countryCode string, partyId string, tariffId string, reqEditors ...RequestEditorFn) (*DeleteOcpiTariffsCountryCodePartyIdTariffIdResponse, error) {
	rsp, err := c.DeleteOcpiTariffsCountryCodePartyIdTariffId(ctx, countryCode, partyId, tariffId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOcpiTariffsCountryCodePartyIdTariffIdResponse(rsp)
}

// GetOcpiTariffsCountryCodePartyIdTariffIdWithResponse request returning *GetOcpiTariffsCountryCodePartyIdTariffIdResponse
func (c *ClientWithResponses) GetOcpiTariffsCountryCodePartyIdTariffIdWithResponse(ctx context.Context, countryCode string, partyId string, tariffId string, reqEditors ...RequestEditorFn) (*GetOcpiTariffsCountryCodePartyIdTariffIdResponse, error) {
	rsp, err := c.GetOcpiTariffsCountryCodePartyIdTariffId(ctx, countryCode, partyId, tariffId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiTariffsCountryCodePartyIdTariffIdResponse(rsp)
}

// PutOcpiTariffsCountryCodePartyIdTariffIdWithBodyWithResponse request with arbitrary body returning *PutOcpiTariffsCountryCodePartyIdTariffIdResponse
func (c *ClientWithResponses) PutOcpiTariffsCountryCodePartyIdTariffIdWithBodyWithResponse(ctx context.Context, countryCode string, partyId string, tariffId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiTariffsCountryCodePartyIdTariffIdResponse, error) {
	rsp, err := c.PutOcpiTariffsCountryCodePartyIdTariffIdWithBody(ctx, countryCode, partyId, tariffId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiTariffsCountryCodePartyIdTariffIdResponse(rsp)
}

func (c *ClientWithResponses) PutOcpiTariffsCountryCodePartyIdTariffIdWithResponse(ctx context.Context, countryCode string, partyId string, tariffId string, body PutOcpiTariffsCountryCodePartyIdTariffIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiTariffsCountryCodePartyIdTariffIdResponse, error) {
	rsp, err := c.PutOcpiTariffsCountryCodePartyIdTariffId(ctx, countryCode, partyId, tariffId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiTariffsCountryCodePartyIdTariffIdResponse(rsp)
}

// GetOcpiTokensWithResponse request returning *GetOcpiTokensResponse
func (c *ClientWithResponses) GetOcpiTokensWithResponse(ctx context.Context, params *GetOcpiTokensParams, reqEditors ...RequestEditorFn) (*GetOcpiTokensResponse, error) {
	rsp, err := c.GetOcpiTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiTokensResponse(rsp)
}

// GetOcpiTokensCountryCodePartyIdTokenUidWithResponse request returning *GetOcpiTokensCountryCodePartyIdTokenUidResponse
func (c *ClientWithResponses) GetOcpiTokensCountryCodePartyIdTokenUidWithResponse(ctx context.Context, countryCode string, partyId string, tokenUid string, params *GetOcpiTokensCountryCodePartyIdTokenUidParams, reqEditors ...RequestEditorFn) (*GetOcpiTokensCountryCodePartyIdTokenUidResponse, error) {
	rsp, err := c.GetOcpiTokensCountryCodePartyIdTokenUid(ctx, countryCode, partyId, tokenUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiTokensCountryCodePartyIdTokenUidResponse(rsp)
}

// PatchOcpiTokensCountryCodePartyIdTokenUidWithResponse request returning *PatchOcpiTokensCountryCodePartyIdTokenUidResponse
func (c *ClientWithResponses) PatchOcpiTokensCountryCodePartyIdTokenUidWithResponse(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PatchOcpiTokensCountryCodePartyIdTokenUidParams, reqEditors ...RequestEditorFn) (*PatchOcpiTokensCountryCodePartyIdTokenUidResponse, error) {
	rsp, err := c.PatchOcpiTokensCountryCodePartyIdTokenUid(ctx, countryCode, partyId, tokenUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOcpiTokensCountryCodePartyIdTokenUidResponse(rsp)
}

// PutOcpiTokensCountryCodePartyIdTokenUidWithBodyWithResponse request with arbitrary body returning *PutOcpiTokensCountryCodePartyIdTokenUidResponse
func (c *ClientWithResponses) PutOcpiTokensCountryCodePartyIdTokenUidWithBodyWithResponse(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PutOcpiTokensCountryCodePartyIdTokenUidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOcpiTokensCountryCodePartyIdTokenUidResponse, error) {
	rsp, err := c.PutOcpiTokensCountryCodePartyIdTokenUidWithBody(ctx, countryCode, partyId, tokenUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiTokensCountryCodePartyIdTokenUidResponse(rsp)
}

func (c *ClientWithResponses) PutOcpiTokensCountryCodePartyIdTokenUidWithResponse(ctx context.Context, countryCode string, partyId string, tokenUid string, params *PutOcpiTokensCountryCodePartyIdTokenUidParams, body PutOcpiTokensCountryCodePartyIdTokenUidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOcpiTokensCountryCodePartyIdTokenUidResponse, error) {
	rsp, err := c.PutOcpiTokensCountryCodePartyIdTokenUid(ctx, countryCode, partyId, tokenUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOcpiTokensCountryCodePartyIdTokenUidResponse(rsp)
}

// GetOcpiVersionsWithResponse request returning *GetOcpiVersionsResponse
func (c *ClientWithResponses) GetOcpiVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOcpiVersionsResponse, error) {
	rsp, err := c.GetOcpiVersions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOcpiVersionsResponse(rsp)
}

// PostOcpiTokenUidAuthorizeWithBodyWithResponse request with arbitrary body returning *PostOcpiTokenUidAuthorizeResponse
func (c *ClientWithResponses) PostOcpiTokenUidAuthorizeWithBodyWithResponse(ctx context.Context, tokenUid string, params *PostOcpiTokenUidAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOcpiTokenUidAuthorizeResponse, error) {
	rsp, err := c.PostOcpiTokenUidAuthorizeWithBody(ctx, tokenUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpiTokenUidAuthorizeResponse(rsp)
}

func (c *ClientWithResponses) PostOcpiTokenUidAuthorizeWithResponse(ctx context.Context, tokenUid string, params *PostOcpiTokenUidAuthorizeParams, body PostOcpiTokenUidAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOcpiTokenUidAuthorizeResponse, error) {
	rsp, err := c.PostOcpiTokenUidAuthorize(ctx, tokenUid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOcpiTokenUidAuthorizeResponse(rsp)
}

// ParseDeleteOcpi221CredentialsResponse parses an HTTP response from a DeleteOcpi221CredentialsWithResponse call
func ParseDeleteOcpi221CredentialsResponse(rsp *http.Response) (*DeleteOcpi221CredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOcpi221CredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpi221CredentialsResponse parses an HTTP response from a GetOcpi221CredentialsWithResponse call
func ParseGetOcpi221CredentialsResponse(rsp *http.Response) (*GetOcpi221CredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpi221CredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostOcpi221CredentialsResponse parses an HTTP response from a PostOcpi221CredentialsWithResponse call
func ParsePostOcpi221CredentialsResponse(rsp *http.Response) (*PostOcpi221CredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOcpi221CredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOcpi221CredentialsResponse parses an HTTP response from a PutOcpi221CredentialsWithResponse call
func ParsePutOcpi221CredentialsResponse(rsp *http.Response) (*PutOcpi221CredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOcpi221CredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpi221DetailsResponse parses an HTTP response from a GetOcpi221DetailsWithResponse call
func ParseGetOcpi221DetailsResponse(rsp *http.Response) (*GetOcpi221DetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpi221DetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Details
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiCdrsResponse parses an HTTP response from a GetOcpiCdrsWithResponse call
func ParseGetOcpiCdrsResponse(rsp *http.Response) (*GetOcpiCdrsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiCdrsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CdrsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostOcpiCdrsResponse parses an HTTP response from a PostOcpiCdrsWithResponse call
func ParsePostOcpiCdrsResponse(rsp *http.Response) (*PostOcpiCdrsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOcpiCdrsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CdrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostOcpiChargingprofileResponse parses an HTTP response from a PostOcpiChargingprofileWithResponse call
func ParsePostOcpiChargingprofileResponse(rsp *http.Response) (*PostOcpiChargingprofileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOcpiChargingprofileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOcpiChargingprofileSessionIdResponse parses an HTTP response from a PutOcpiChargingprofileSessionIdWithResponse call
func ParsePutOcpiChargingprofileSessionIdResponse(rsp *http.Response) (*PutOcpiChargingprofileSessionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOcpiChargingprofileSessionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOcpiChargingprofilesSessionIdResponse parses an HTTP response from a PutOcpiChargingprofilesSessionIdWithResponse call
func ParsePutOcpiChargingprofilesSessionIdResponse(rsp *http.Response) (*PutOcpiChargingprofilesSessionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOcpiChargingprofilesSessionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChargingProfilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiChargingprofilesSessionIdDurationResponseUrlResponse parses an HTTP response from a GetOcpiChargingprofilesSessionIdDurationResponseUrlWithResponse call
func ParseGetOcpiChargingprofilesSessionIdDurationResponseUrlResponse(rsp *http.Response) (*GetOcpiChargingprofilesSessionIdDurationResponseUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiChargingprofilesSessionIdDurationResponseUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChargingProfilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteOcpiChargingprofilesSessionIdResponseUrlResponse parses an HTTP response from a DeleteOcpiChargingprofilesSessionIdResponseUrlWithResponse call
func ParseDeleteOcpiChargingprofilesSessionIdResponseUrlResponse(rsp *http.Response) (*DeleteOcpiChargingprofilesSessionIdResponseUrlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOcpiChargingprofilesSessionIdResponseUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChargingProfilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiClientinfoCountryCodePartyIdResponse parses an HTTP response from a GetOcpiClientinfoCountryCodePartyIdWithResponse call
func ParseGetOcpiClientinfoCountryCodePartyIdResponse(rsp *http.Response) (*GetOcpiClientinfoCountryCodePartyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiClientinfoCountryCodePartyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientsInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOcpiClientinfoCountryCodePartyIdResponse parses an HTTP response from a PutOcpiClientinfoCountryCodePartyIdWithResponse call
func ParsePutOcpiClientinfoCountryCodePartyIdResponse(rsp *http.Response) (*PutOcpiClientinfoCountryCodePartyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOcpiClientinfoCountryCodePartyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientsInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostOcpiCommandsCommandResponse parses an HTTP response from a PostOcpiCommandsCommandWithResponse call
func ParsePostOcpiCommandsCommandResponse(rsp *http.Response) (*PostOcpiCommandsCommandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOcpiCommandsCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommandResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostOcpiCommandsCommandUidResponse parses an HTTP response from a PostOcpiCommandsCommandUidWithResponse call
func ParsePostOcpiCommandsCommandUidResponse(rsp *http.Response) (*PostOcpiCommandsCommandUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOcpiCommandsCommandUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommandResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiHubclientinfoResponse parses an HTTP response from a GetOcpiHubclientinfoWithResponse call
func ParseGetOcpiHubclientinfoResponse(rsp *http.Response) (*GetOcpiHubclientinfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiHubclientinfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiLocationsResponse parses an HTTP response from a GetOcpiLocationsWithResponse call
func ParseGetOcpiLocationsResponse(rsp *http.Response) (*GetOcpiLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Locations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiLocationsCountryCodePartyIdLocationIdResponse parses an HTTP response from a GetOcpiLocationsCountryCodePartyIdLocationIdWithResponse call
func ParseGetOcpiLocationsCountryCodePartyIdLocationIdResponse(rsp *http.Response) (*GetOcpiLocationsCountryCodePartyIdLocationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiLocationsCountryCodePartyIdLocationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OcpiLocationsLocationIdGet200Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchOcpiLocationsCountryCodePartyIdLocationIdResponse parses an HTTP response from a PatchOcpiLocationsCountryCodePartyIdLocationIdWithResponse call
func ParsePatchOcpiLocationsCountryCodePartyIdLocationIdResponse(rsp *http.Response) (*PatchOcpiLocationsCountryCodePartyIdLocationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOcpiLocationsCountryCodePartyIdLocationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OcpiLocationsLocationIdGet200Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOcpiLocationsCountryCodePartyIdLocationIdResponse parses an HTTP response from a PutOcpiLocationsCountryCodePartyIdLocationIdWithResponse call
func ParsePutOcpiLocationsCountryCodePartyIdLocationIdResponse(rsp *http.Response) (*PutOcpiLocationsCountryCodePartyIdLocationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOcpiLocationsCountryCodePartyIdLocationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OcpiLocationsLocationIdGet200Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiLocationsLocationIdResponse parses an HTTP response from a GetOcpiLocationsLocationIdWithResponse call
func ParseGetOcpiLocationsLocationIdResponse(rsp *http.Response) (*GetOcpiLocationsLocationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiLocationsLocationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OcpiLocationsLocationIdGet200Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiSessionsResponse parses an HTTP response from a GetOcpiSessionsWithResponse call
func ParseGetOcpiSessionsResponse(rsp *http.Response) (*GetOcpiSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiSessionsCountryCodePartyIdSessionIdResponse parses an HTTP response from a GetOcpiSessionsCountryCodePartyIdSessionIdWithResponse call
func ParseGetOcpiSessionsCountryCodePartyIdSessionIdResponse(rsp *http.Response) (*GetOcpiSessionsCountryCodePartyIdSessionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiSessionsCountryCodePartyIdSessionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchOcpiSessionsCountryCodePartyIdSessionIdResponse parses an HTTP response from a PatchOcpiSessionsCountryCodePartyIdSessionIdWithResponse call
func ParsePatchOcpiSessionsCountryCodePartyIdSessionIdResponse(rsp *http.Response) (*PatchOcpiSessionsCountryCodePartyIdSessionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOcpiSessionsCountryCodePartyIdSessionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOcpiSessionsCountryCodePartyIdSessionIdResponse parses an HTTP response from a PutOcpiSessionsCountryCodePartyIdSessionIdWithResponse call
func ParsePutOcpiSessionsCountryCodePartyIdSessionIdResponse(rsp *http.Response) (*PutOcpiSessionsCountryCodePartyIdSessionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOcpiSessionsCountryCodePartyIdSessionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOcpiSessionsSessionIdChargingPreferencesResponse parses an HTTP response from a PutOcpiSessionsSessionIdChargingPreferencesWithResponse call
func ParsePutOcpiSessionsSessionIdChargingPreferencesResponse(rsp *http.Response) (*PutOcpiSessionsSessionIdChargingPreferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOcpiSessionsSessionIdChargingPreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChargingPreferencesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiTariffsResponse parses an HTTP response from a GetOcpiTariffsWithResponse call
func ParseGetOcpiTariffsResponse(rsp *http.Response) (*GetOcpiTariffsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiTariffsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TariffsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteOcpiTariffsCountryCodePartyIdTariffIdResponse parses an HTTP response from a DeleteOcpiTariffsCountryCodePartyIdTariffIdWithResponse call
func ParseDeleteOcpiTariffsCountryCodePartyIdTariffIdResponse(rsp *http.Response) (*DeleteOcpiTariffsCountryCodePartyIdTariffIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOcpiTariffsCountryCodePartyIdTariffIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TariffDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiTariffsCountryCodePartyIdTariffIdResponse parses an HTTP response from a GetOcpiTariffsCountryCodePartyIdTariffIdWithResponse call
func ParseGetOcpiTariffsCountryCodePartyIdTariffIdResponse(rsp *http.Response) (*GetOcpiTariffsCountryCodePartyIdTariffIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiTariffsCountryCodePartyIdTariffIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TariffResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOcpiTariffsCountryCodePartyIdTariffIdResponse parses an HTTP response from a PutOcpiTariffsCountryCodePartyIdTariffIdWithResponse call
func ParsePutOcpiTariffsCountryCodePartyIdTariffIdResponse(rsp *http.Response) (*PutOcpiTariffsCountryCodePartyIdTariffIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOcpiTariffsCountryCodePartyIdTariffIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TariffResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiTokensResponse parses an HTTP response from a GetOcpiTokensWithResponse call
func ParseGetOcpiTokensResponse(rsp *http.Response) (*GetOcpiTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokensResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiTokensCountryCodePartyIdTokenUidResponse parses an HTTP response from a GetOcpiTokensCountryCodePartyIdTokenUidWithResponse call
func ParseGetOcpiTokensCountryCodePartyIdTokenUidResponse(rsp *http.Response) (*GetOcpiTokensCountryCodePartyIdTokenUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiTokensCountryCodePartyIdTokenUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchOcpiTokensCountryCodePartyIdTokenUidResponse parses an HTTP response from a PatchOcpiTokensCountryCodePartyIdTokenUidWithResponse call
func ParsePatchOcpiTokensCountryCodePartyIdTokenUidResponse(rsp *http.Response) (*PatchOcpiTokensCountryCodePartyIdTokenUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOcpiTokensCountryCodePartyIdTokenUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutOcpiTokensCountryCodePartyIdTokenUidResponse parses an HTTP response from a PutOcpiTokensCountryCodePartyIdTokenUidWithResponse call
func ParsePutOcpiTokensCountryCodePartyIdTokenUidResponse(rsp *http.Response) (*PutOcpiTokensCountryCodePartyIdTokenUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOcpiTokensCountryCodePartyIdTokenUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOcpiVersionsResponse parses an HTTP response from a GetOcpiVersionsWithResponse call
func ParseGetOcpiVersionsResponse(rsp *http.Response) (*GetOcpiVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOcpiVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Versions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostOcpiTokenUidAuthorizeResponse parses an HTTP response from a PostOcpiTokenUidAuthorizeWithResponse call
func ParsePostOcpiTokenUidAuthorizeResponse(rsp *http.Response) (*PostOcpiTokenUidAuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOcpiTokenUidAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authorization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
